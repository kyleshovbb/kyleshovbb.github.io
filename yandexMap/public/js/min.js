!function e(t,n,o){function a(i,u){if(!n[i]){if(!t[i]){var c="function"==typeof require&&require;if(!u&&c)return c(i,!0);if(r)return r(i,!0);var s=new Error("Cannot find module '"+i+"'");throw s.code="MODULE_NOT_FOUND",s}var l=n[i]={exports:{}};t[i][0].call(l.exports,function(e){var n=t[i][1][e];return a(n||e)},l,l.exports,e,t,n,o)}return n[i].exports}for(var r="function"==typeof require&&require,i=0;i<o.length;i++)a(o[i]);return a}({1:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default=function(){if(!document.querySelector("#aboutDiv")){var e=document.createElement("div");e.setAttribute("id","aboutDiv"),document.body.appendChild(e)}aboutDiv.innerHTML='<p>Данное приложение предназначено для просмотра прогноза погоды для определённого населённого пункта.</p><p>При помощи радио-кнопок можно выбирать метод отправки данных на сервер.</p><p>Координаты и название населённого пункта определяется определяются при помощи Google API.</p><p>При клике по карте, населённый пункт добавляется в избранное.</p><p>Нужный город можно найти введя название города в строку поиска.</p><p>При клике по названию города в блоке "История поиска" или "Избранное", выбранный город будет отображаться по центу карты.</p>'}},{}],2:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=e("./workWithAPI");var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.myWeather=(0,a.getForecastByLatLng)(),this.weather=document.querySelector("#weather"),this.addMyWeather()}return o(e,[{key:"addMyWeather",value:function(){var e=this;this.myWeather.then(function(t){var n="<ul>Прогноз погоды:\n                <li>"+t.currently.summary+"</li>\n                <li>Температура: "+Math.round(t.currently.temperature)+"°C</li>\n                <li>Облачность: "+Math.round(100*t.currently.cloudCover)+"%</li>\n                <li>Влажность: "+Math.round(100*t.currently.humidity)+"%</li>\n                <li>Скорость ветра: "+t.currently.windSpeed+"км/ч</li>\n                </ul>";e.weather.innerHTML=n})}}]),e}();n.default=r},{"./workWithAPI":8}],3:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default=function(){if(!document.querySelector("#authorDiv")){var e=document.createElement("div");e.setAttribute("id","authorDiv"),document.body.appendChild(e)}authorDiv.innerHTML="<p>Приложение было создано Кулешовым Владимиром Владимировичем.</p><p><a href='https://vk.com/vvkuleshov' target='_blank'>ВКонтакте</a></p><p><a href='https://www.linkedin.com/in/vladimir-kuleshov-27325712a/' target='_blank'>LinkedIn</a></p><p><img src=\"./img/portfolio.jpeg\"></p>"}},{}],4:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=e("./yandexMap"),r=e("./workWithAPI");var i=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.favorites=n||document.querySelector("#favorites"),t&&(this.cityName=(0,r.getCityName)((0,a.getLatlng)(t[0],t[1])),this.getFavoriteCityName(t))}return o(e,[{key:"getFavoriteCityName",value:function(e){var t=this;this.cityName.then(function(e){return e.results[1].formatted_address}).then(function(t){return a.myMap.balloon.open(e,{contentBody:t+" добавлен в избранное",contentFooter:"<sup>Щелкните еще раз</sup>"}),t}).then(function(e){return t.addCityToFavorite(e)})}},{key:"addCityToFavorite",value:function(e){var t=void 0;localStorage.favoriteCity?t=localStorage.favoriteCity.split(" ;;"):(localStorage.favoriteCity=[],t=[]),e&&t.unshift(e),this.addFavotiteCityInLocalStorage(t),this.addFavoritesAddressList(t)}},{key:"addFavotiteCityInLocalStorage",value:function(e){var t="";e.forEach(function(e){e&&(t+=e+" ;;")}),localStorage.favoriteCity=t.slice(0,-3)}},{key:"addFavoritesAddressList",value:function(e){var t="<ul>Избранное:";e.forEach(function(e,n){t+='<li class="favorites">'+e+'\n<span class="deleteFavorite" data-index="'+n+'">×</span>\n</li>'}),t+="</ul>",this.favorites.innerHTML=t}},{key:"deleteFavorite",value:function(e){var t=e.parentElement,n=e.getAttribute("data-index"),o=localStorage.favoriteCity.split(" ;;");o.splice(n,1),this.addFavotiteCityInLocalStorage(o),t.remove()}}]),e}();n.default=i},{"./workWithAPI":8,"./yandexMap":9}],5:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.history=t||document.querySelector("#history")}return o(e,[{key:"addCityToHistory",value:function(e){var t=void 0;localStorage.searchHistory?t=localStorage.searchHistory.split(" ;;"):(localStorage.searchHistory=[],t=[]),5===t.length&&e&&t.pop(),e&&(t.unshift(e),this.weatherRecordInLocalStorage(t)),this.addHistoryAddressList(t)}},{key:"weatherRecordInLocalStorage",value:function(e){var t="";e.forEach(function(e){t+=e+" ;;"}),localStorage.searchHistory=t.slice(0,-3)}},{key:"addHistoryAddressList",value:function(e){var t="<ul> История поиска:";e.forEach(function(e){t+='<li class="history">'+e+"</li>"}),t+="</ul>",this.history.innerHTML=t}}]),e}();n.default=a},{}],6:[function(e,t,n){"use strict";var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=d(e("./aboutPage")),r=d(e("./authorPage")),i=(d(e("./addWeather")),d(e("./searchCity"))),u=d(e("./favoritesCity")),c=d(e("./historySearchCity")),s=e("./yandexMap"),l=e("./workWithAPI");function d(e){return e&&e.__esModule?e:{default:e}}new(function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.routes=n.routes,window.addEventListener("hashchange",function(){return t.hashCheck(window.location.hash)}),this.hashCheck(window.location.hash)}return o(e,[{key:"findNewRoute",value:function(e){var t=void 0,n=this;if(this.routes)return 1===this.routes.length?this.findRoute(e,this.routes[0]):(this.routes.forEach(function(o){if(n.findRoute(e,o))return t=o}),t)}},{key:"findRoute",value:function(e,t){if("string"==typeof t.match&&e===t.match||"function"==typeof t.match&&t.match(e)||t.match instanceof RegExp&&e.match(t.match))return t}},{key:"hashCheck",value:function(e){var t=this;e=e.slice(1);var n=this.activeRoute,o=this.findNewRoute(e);o&&("string"==typeof o.match?this.routeParams=o.match:o.match instanceof RegExp?this.routeParams=e.match(o.match)[1]:"function"==typeof o.match&&(this.routeParams=o.match(e)),Promise.resolve().then(function(){n&&n.onLeave&&(t.preRouteParams?n.onLeave(t.preRouteParams):n.onLeave())}).then(function(){o&&o.onBeforeEnter&&(t.routeParams?o.onBeforeEnter(t.routeParams):o.onBeforeEnter())}).then(function(){o&&o.onEnter&&(t.routeParams?o.onEnter(t.routeParams):o.onEnter())}).then(function(){t.activeRoute=o,t.preRouteParams=t.routeParams}).catch(function(){}))}}]),e}())({routes:[{name:"index",match:"",onBeforeEnter:function(){document.querySelector("#index").style.display="block"},onEnter:function(){var e=document.querySelector("#yandexMap");ymaps.ready(function(t){if(!e.children.length){var n=(0,l.getUserLocation)();n.then(function(e){new s.YandexMap(t,[e.position.latitude,e.position.longitude]),window.location.hash="/city/"+e.city.name+"/",(new c.default).addCityToHistory(),(new u.default).addCityToFavorite()})}})},onLeave:function(){document.querySelector("#index").style.display="none"}},{name:"About",match:"About",onEnter:function(){var e=document.querySelector("#aboutDiv");e?e.style.display="block":(0,a.default)()},onLeave:function(){document.querySelector("#aboutDiv").style.display="none"}},{name:"Author",match:"Author",onEnter:function(){var e=document.querySelector("#authorDiv");e?e.style.display="block":(0,r.default)()},onLeave:function(){document.querySelector("#authorDiv").style.display="none"}},{name:"cityName",match:/city\/(.+)/,onBeforeEnter:function(){document.querySelector("#index").style.display="block"},onEnter:function(e){var t=document.querySelector("#yandexMap");ymaps.ready(function(){t.children.length||((new i.default).searchCity(null,e.slice(0,-1)),(new u.default).addCityToFavorite())})},onLeave:function(){document.querySelector("#index").style.display="none"}},{name:"location",match:/location\/(.+)/,onBeforeEnter:function(){document.querySelector("#index").style.display="block"},onEnter:function(e){var t=document.querySelector("#yandexMap");ymaps.ready(function(){t.children.length||(new s.YandexMap(event,o,n[2]),(new c.default).addCityToHistory(),(new u.default).addCityToFavorite())});var n=e.slice(0,-1).split(","),o=[n[0],n[1]]},onLeave:function(){document.querySelector("#index").style.display="none"}}]})},{"./aboutPage":1,"./addWeather":2,"./authorPage":3,"./favoritesCity":4,"./historySearchCity":5,"./searchCity":7,"./workWithAPI":8,"./yandexMap":9}],7:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=e("./workWithAPI"),i=e("./yandexMap"),u=e("./historySearchCity"),c=(o=u,o&&o.__esModule?o:{default:o});var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.searchInpute=document.querySelector("#search"),this.addCityNameToHash()}return a(e,[{key:"addCityNameToHash",value:function(){var e=this.searchInpute.value;e&&(window.location.hash="/city/"+e+"/",this.searchCity(null,e))}},{key:"searchCity",value:function(e,t){this.getLocation=(0,r.getCoords)(t),this.getLocation.then(function(e){return(new c.default).addCityToHistory(e.results[0].formatted_address),e}).then(function(e){return e.results[0].geometry.location}).then(function(e){var t=[];return t[0]=e.lat,t[1]=e.lng,t}).then(function(t){(0,i.getLatlng)(t[0],t[1]);yandexMap.innerHTML="",new i.YandexMap(e,t)})}}]),e}();n.default=s},{"./historySearchCity":5,"./workWithAPI":8,"./yandexMap":9}],8:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.getForecastByLatLng=n.getUserLocation=n.getCityName=n.getCoords=void 0;var o=e("./yandexMap"),a=document.querySelector("#fetchMethod"),r=document.querySelector("#XHRMethod");function i(e){if(a.checked)return fetch(e).then(function(e){return e.json()}).catch(function(e){console.log(e)});if(r.checked)return t=e,new Promise(function(e,n){var o=new XMLHttpRequest;o.open("GET",t,!0),o.onload=function(){if(200==o.status)e(JSON.parse(o.response));else{var t=new Error(o.statusText);t.code=o.status,n(t)}},o.onerror=function(){return console.log(error)},o.send()});alert("Выберите метод отпрвки ajax запроса");var t}n.getCoords=function(e){return i("https://maps.googleapis.com/maps/api/geocode/json?address="+e+"&key=AIzaSyBbt9DGHAlhJIrltRyAXpJ6d8E1RDvANAQ&language=ru")},n.getCityName=function(e){return i("https://maps.googleapis.com/maps/api/geocode/json?latlng="+e+"&key=AIzaSyBbt9DGHAlhJIrltRyAXpJ6d8E1RDvANAQ&language=ru")},n.getUserLocation=function(e){return i("https://api.userinfo.io/userinfos")},n.getForecastByLatLng=function(e,t){return i("https://free-cors-proxy.herokuapp.com/https://api.darksky.net/forecast/e2fdce61fddd3b7c2bcc0ab7ac25536c/"+(t=t||(0,o.getLatlng)())+"?lang=ru%26units=si")}},{"./yandexMap":9}],9:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.getLatlng=n.YandexMap=n.myMap=void 0;var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=u(e("./addWeather")),r=u(e("./searchCity")),i=u(e("./favoritesCity"));function u(e){return e&&e.__esModule?e:{default:e}}var c=void 0,s=function(){function e(t,o){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n.myMap=c=new ymaps.Map(yandexMap,{center:o,zoom:a}),this.yandexForm=document.querySelector("#yandexForm"),this.footer=document.querySelector("#footer"),this.subscribeToMapEvent()}return o(e,[{key:"subscribeToMapEvent",value:function(){c.events.add("actionend",this.dragMap),c.events.add("click",this.yandexBalloon),this.footer.addEventListener("click",this.clickAtCityName),this.yandexForm.addEventListener("submit",this.subsSearchCity),new a.default}},{key:"subsSearchCity",value:function(){new r.default}},{key:"dragMap",value:function(){window.location.hash="/location/"+l()+","+c.getZoom()+"/",new a.default}},{key:"clickAtCityName",value:function(e){var t=e.target,n=t.matches(".favorites")&&t.closest(".favorites")||t.matches(".history")&&t.closest(".history"),o=t.matches(".deleteFavorite")&&t.closest(".deleteFavorite");n?(window.location.hash="/city/"+t.firstChild.data+"/",(new r.default).searchCity(null,t.firstChild.data)):o&&(new i.default).deleteFavorite(t)}},{key:"yandexBalloon",value:function(e){if(c.balloon.isOpen())c.balloon.close();else{var t=e.get("coords");new i.default(t)}}}]),e}();function l(e,t){var n=void 0;c&&(n=c.getCenter());return(e=e||n[0])+","+(t=t||n[1])}n.myMap=c,n.YandexMap=s,n.getLatlng=l},{"./addWeather":2,"./favoritesCity":4,"./searchCity":7}]},{},[6]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
