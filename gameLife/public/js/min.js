(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
function addAbout() {
    var about = document.querySelector("#aboutDiv");
    if (!about) {
        var _aboutDiv = document.createElement("div");
        _aboutDiv.setAttribute("id", "aboutDiv");
        document.body.appendChild(_aboutDiv);
    }

    aboutDiv.innerHTML = "<h1><a href='https://ru.wikipedia.org/wiki/%D0%98%D0%B3%D1%80%D0%B0_%C2%AB%D0%96%D0%B8%D0%B7%D0%BD%D1%8C%C2%BB'>Игра «Жизнь»</a></h1>" + "<p>Место действия этой игры — «вселенная» — это размеченная на клетки поверхность или " + "плоскость — безграничная, ограниченная, или замкнутая (в пределе — бесконечная плоскость).</p>" + "<p>Каждая клетка на этой поверхности может находиться в двух состояниях: быть «живой» " + "(заполненной) или быть «мёртвой» (пустой). Клетка имеет восемь соседей, окружающих её.</p>" + "<ul> Распределение живых клеток в начале игры называется первым поколением. Каждое следующее " + "поколение рассчитывается на основе предыдущего по таким правилам:" + "<li>в пустой (мёртвой) клетке, рядом с которой ровно три живые клетки, зарождается жизнь;</li>" + "<li>если у живой клетки есть две или три живые соседки, то эта клетка продолжает жить; " + "в противном случае, если соседей меньше двух или больше трёх, клетка умирает («от одиночества» " + "или «от перенаселённости»)</li>" + "</ul>" + "<p>Игрок не принимает прямого участия в игре, а лишь расставляет или генерирует начальную " + "конфигурацию «живых» клеток, которые затем взаимодействуют согласно правилам уже без его участия " + "(он является наблюдателем).</p>" + "<p>Поле отображает текущее поколение. И позволяет пользователю взаимодействовать с игрой. " + "Клик по полю вызывает инверсию состояния клетки, по которой пользователь кликнул ( живая - " + "умирает, мертвая - оживает ).</p>";
}

exports.default = addAbout;

},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _routs = require('./routs');

var _routs2 = _interopRequireDefault(_routs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CalculatingGameLife = function () {
    function CalculatingGameLife(line, column) {
        _classCallCheck(this, CalculatingGameLife);

        this.gameLineNumbew = line || 40;
        this.gameColumnNumbew = column || 40;
        this.gameLifeArray = this.createGameArray(line, column);
        this.contain = document.querySelector('#contain');
        this.gameSpeed = document.querySelector("#rangeGameSpeed");
        if (this.stageHistory) {
            this.stageHistory.push(this.gameLifeArray);
        } else {
            this.stageHistory = [];
            this.stageHistory.push(this.gameLifeArray);
        }
        this.subscribeToClickOnArray();
        this.playState = true;
        this.currentArrayIndex = this.stageHistory.length - 1;
    }

    _createClass(CalculatingGameLife, [{
        key: 'subscribeToClickOnArray',
        value: function subscribeToClickOnArray() {
            this.wrapperClickOnArray = this.clickOnArray.bind(this);
            this.contain.addEventListener('click', this.wrapperClickOnArray);
        }
    }, {
        key: 'clickOnArray',
        value: function clickOnArray(ev) {
            var height = this.contain.clientHeight;
            var width = this.contain.clientWidth;
            var x = ev.offsetX;
            var y = ev.offsetY;
            var rowHeight = height / this.gameLineNumbew;
            var cellWidth = width / this.gameColumnNumbew;
            var offsetX = Math.floor(x / cellWidth);
            var offsetY = Math.floor(y / rowHeight);
            var cell = this.stageHistory[this.currentArrayIndex][offsetY][offsetX];
            if (cell) {
                this.stageHistory[this.currentArrayIndex][offsetY][offsetX] = 0;
            } else this.stageHistory[this.currentArrayIndex][offsetY][offsetX] = 1;
            this.stageHistory.splice(this.currentArrayIndex + 1);
            this.eventBus.trigger('view', this);
        }
    }, {
        key: 'createGameArray',
        value: function createGameArray(line, column) {
            var array = [];
            for (var i = 0; i < line; ++i) {
                var newRow = [];
                for (var j = 0; j < column; ++j) {
                    newRow.push(0);
                }
                array.push(newRow);
            }

            return this.addToArrayFixedItem(array);
        }
    }, {
        key: 'addToArrayFixedItem',
        value: function addToArrayFixedItem(array) {
            var centerColumn = Math.round(array[0].length / 2);
            var centerLine = Math.round(array.length / 2);

            array[centerLine][centerColumn] = 1;
            array[centerLine - 1][centerColumn] = 1;
            array[centerLine + 1][centerColumn] = 1;
            array[centerLine + 1][centerColumn] = 1;
            array[centerLine + 1][centerColumn + 1] = 1;

            return array;
        }
    }, {
        key: 'startCalculate',
        value: function startCalculate() {
            if (this.stageHistory.length) {
                var currentLifeStage = this.stageHistory[this.currentArrayIndex];
                this.calculateGameLife(currentLifeStage);
            }
            this.currentArrayIndex = this.stageHistory.length - 1;
        }
    }, {
        key: 'calculateGameLife',
        value: function calculateGameLife(stageLife) {
            var newStageOfLife = [];
            for (var i = 0; i < this.gameLineNumbew; ++i) {
                var newRowOnStageOfLife = [];
                for (var j = 0; j < this.gameColumnNumbew; ++j) {
                    var adjacentElementLength = this.getAdjacentElementLength(i, j, stageLife);
                    if (adjacentElementLength === 3 && !stageLife[i][j]) {
                        newRowOnStageOfLife.push(1);
                    } else if (adjacentElementLength === 2 || adjacentElementLength === 3 && stageLife[i][j]) {
                        newRowOnStageOfLife.push(stageLife[i][j]);
                    } else if (adjacentElementLength < 2 || adjacentElementLength > 3) {
                        newRowOnStageOfLife.push(0);
                    }
                }
                newStageOfLife.push(newRowOnStageOfLife);
            }
            this.stageHistory.splice(this.currentArrayIndex + 1);
            this.stageHistory.push(newStageOfLife);
        }
    }, {
        key: 'getAdjacentElementLength',
        value: function getAdjacentElementLength(horizontalNumber, verticalNumber, stageLife) {
            var count = 0;
            for (var i = horizontalNumber - 1; i <= horizontalNumber + 1; ++i) {
                for (var j = verticalNumber - 1; j <= verticalNumber + 1; ++j) {
                    if (i === horizontalNumber && j === verticalNumber) continue;
                    if (!(i < 0 || j < 0 || i > this.gameLineNumbew - 1 || j > this.gameColumnNumbew - 1) && stageLife[i][j] === 1) ++count;
                }
            }
            return count;
        }
    }, {
        key: 'repiatGame',
        value: function repiatGame() {
            var _this = this;

            setTimeout(function () {
                if (_this.playState) {
                    _this.startCalculate(_this.stageHistory);
                    _this.eventBus.trigger('view', _this);
                    _this.repiatGame();
                } else if (!_this.playState) {
                    clearTimeout();
                }
            }, +this.gameSpeed.value * 100);
        }
    }]);

    return CalculatingGameLife;
}();

exports.default = CalculatingGameLife;

},{"./routs":4}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _calculatingGameLife = require("./calculatingGameLife");

var _calculatingGameLife2 = _interopRequireDefault(_calculatingGameLife);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Controls = function (_CalculatingGameLife) {
    _inherits(Controls, _CalculatingGameLife);

    function Controls(eventBus) {
        _classCallCheck(this, Controls);

        var selectLine = document.querySelector("#selectLine");
        var selectColumn = document.querySelector("#selectColumn");

        var _this = _possibleConstructorReturn(this, (Controls.__proto__ || Object.getPrototypeOf(Controls)).call(this, +selectLine.value, +selectColumn.value, eventBus));

        _this.eventBus = eventBus;
        _this.selectLine = selectLine;
        _this.selectColumn = selectColumn;
        _this.buttons = document.querySelector("#buttons");
        _this.subscribeToClickButton();
        return _this;
    }

    _createClass(Controls, [{
        key: "subscribeToClickButton",
        value: function subscribeToClickButton() {
            this.wrapperClickOnControlsButton = this.clickOnControlsButton.bind(this);
            this.buttons.addEventListener("click", this.wrapperClickOnControlsButton);
            this.repiatGame();
        }
    }, {
        key: "clickOnControlsButton",
        value: function clickOnControlsButton(ev) {
            var target = ev.target;
            if (target.closest("#back")) {
                if (this.currentArrayIndex > 0) {
                    --this.currentArrayIndex;
                    this.eventBus.trigger('view', this);
                }
            } else if (target.closest("#forward")) {
                if (this.currentArrayIndex < this.stageHistory.length - 1) {
                    ++this.currentArrayIndex;
                    this.eventBus.trigger('view', this);
                }
            } else if (target.closest("#play")) {
                if (target.value === "Stop") {
                    target.value = "Play";
                    this.playState = false;
                } else if (target.value === "Play") {
                    target.value = "Stop";
                    this.playState = true;
                    this.repiatGame();
                }
            }
        }
    }]);

    return Controls;
}(_calculatingGameLife2.default);

exports.default = Controls;

},{"./calculatingGameLife":2}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _aboutPage = require("./aboutPage");

var _aboutPage2 = _interopRequireDefault(_aboutPage);

var _writeCanvasGameLife = require("./writeCanvasGameLife");

var _writeCanvasGameLife2 = _interopRequireDefault(_writeCanvasGameLife);

var _writeSVGGameLife = require("./writeSVGGameLife");

var _writeSVGGameLife2 = _interopRequireDefault(_writeSVGGameLife);

var _controls = require("./controls");

var _controls2 = _interopRequireDefault(_controls);

var _writeTextGameLife = require("./writeTextGameLife");

var _writeTextGameLife2 = _interopRequireDefault(_writeTextGameLife);

var _eventBus = require("../utils/eventBus");

var _eventBus2 = _interopRequireDefault(_eventBus);

var _router = require("../utils/router");

var _router2 = _interopRequireDefault(_router);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var eventBus = new _eventBus2.default();
var lifeGame = void 0;

var formControls = document.querySelector("#form-controls");
formControls.addEventListener("change", function (ev) {
    if (lifeGame.selectLine.value > 150) lifeGame.selectLine.value = 150;else if (lifeGame.selectLine.value < 3) lifeGame.selectLine.value = 3;

    if (lifeGame.selectColumn.value > 150) lifeGame.selectColumn.value = 150;else if (lifeGame.selectColumn.value < 3) lifeGame.selectColumn.value = 3;

    var target = ev.target;
    if (target.closest("#selectLine") || target.closest("#selectColumn")) {
        lifeGame.playState = false;
        lifeGame.buttons.removeEventListener('click', lifeGame.wrapperClickOnArray);
        lifeGame.contain.removeEventListener('click', lifeGame.wrapperClickOnControlsButton);
        lifeGame = {};
        lifeGame = new _controls2.default(eventBus);
        eventBus.trigger('view', lifeGame);
    }
});

var router = new _router2.default({
    routes: [{
        name: 'index',
        match: '',
        onBeforeEnter: function onBeforeEnter() {
            var contain = document.querySelector("#contain");
            var controls = document.querySelector("#controls");
            contain.style.display = "none";
            controls.style.display = "none";
        },
        onEnter: function onEnter() {
            var headerText = document.createElement("h1");
            headerText.setAttribute("id", "headerText");
            headerText.innerHTML = "Выберите режим отображения игры";
            document.body.appendChild(headerText);
        },
        onLeave: function onLeave() {
            var headerText = document.querySelector("#headerText");
            headerText.style.display = "none";
        }
    }, {
        name: 'Text',
        match: /Text/,
        onBeforeEnter: function onBeforeEnter() {
            var contain = document.querySelector("#contain");
            var controls = document.querySelector("#controls");
            contain.style.display = "block";
            controls.style.display = "block";
        },
        onEnter: function onEnter() {
            eventBus.on('view', _writeTextGameLife2.default);
            if (!lifeGame) lifeGame = new _controls2.default(eventBus);
            eventBus.trigger('view', lifeGame);
        },
        onLeave: function onLeave() {
            eventBus.off('view', _writeTextGameLife2.default);
        }
    }, {
        name: 'Canvas',
        match: /Canvas/,
        onBeforeEnter: function onBeforeEnter() {
            var contain = document.querySelector("#contain");
            var controls = document.querySelector("#controls");
            contain.style.display = "block";
            controls.style.display = "block";
        },
        onEnter: function onEnter() {
            eventBus.on('view', _writeCanvasGameLife2.default);
            if (!lifeGame) lifeGame = new _controls2.default(eventBus);
            eventBus.trigger('view', lifeGame);
        },
        onLeave: function onLeave() {
            eventBus.off('view', _writeCanvasGameLife2.default);
        }
    }, {
        name: 'SVG',
        match: /SVG/,
        onBeforeEnter: function onBeforeEnter() {
            var contain = document.querySelector("#contain");
            var controls = document.querySelector("#controls");
            contain.style.display = "block";
            controls.style.display = "block";
        },
        onEnter: function onEnter() {
            eventBus.on('view', _writeSVGGameLife2.default);
            if (!lifeGame) lifeGame = new _controls2.default(eventBus);
            eventBus.trigger('view', lifeGame);
        },
        onLeave: function onLeave() {
            eventBus.off('view', _writeSVGGameLife2.default);
        }
    }, {
        name: 'About',
        match: /About/,
        onBeforeEnter: function onBeforeEnter() {
            var contain = document.querySelector("#contain");
            var controls = document.querySelector("#controls");
            contain.style.display = "none";
            controls.style.display = "none";
            if (lifeGame) lifeGame.playState = false;
        },
        onEnter: function onEnter() {
            var aboutDiv = document.querySelector("#aboutDiv");
            if (!aboutDiv) {
                (0, _aboutPage2.default)();
            } else {
                aboutDiv.style.display = "block";
            }
        },
        onLeave: function onLeave() {
            var aboutDiv = document.querySelector("#aboutDiv");
            aboutDiv.style.display = "none";
            if (lifeGame) {
                lifeGame.playState = true;
                var playButton = document.querySelector("#play");
                if (playButton.value === "Stop") lifeGame.repiatGame();
            }
        }
    }]
});

exports.default = lifeGame;

},{"../utils/eventBus":8,"../utils/router":9,"./aboutPage":1,"./controls":3,"./writeCanvasGameLife":5,"./writeSVGGameLife":6,"./writeTextGameLife":7}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WriteCanvasGameLife = function () {
    function WriteCanvasGameLife(gameLife) {
        _classCallCheck(this, WriteCanvasGameLife);

        this.canvas = document.createElement("canvas");
        this.gameLife = gameLife;
        this.SQUARE_SIZE = 8;
        this.startWriteGame();
    }

    _createClass(WriteCanvasGameLife, [{
        key: 'startWriteGame',
        value: function startWriteGame() {
            this.writeGame(this.gameLife.stageHistory[this.gameLife.currentArrayIndex], this.pre);
            window.location.hash = 'Canvas&gameState=' + (this.gameLife.currentArrayIndex + 1);
        }
    }, {
        key: 'writeGame',
        value: function writeGame(lastLifeStage) {
            var verticalLength = lastLifeStage.length,
                horizontalLength = lastLifeStage[0].length;

            this.canvas.height = verticalLength * 11;
            this.canvas.width = horizontalLength * 11;

            var ctx = this.canvas.getContext('2d');
            ctx.beginPath();
            var y = 0;
            for (var i = 0; i < verticalLength; ++i) {
                var x = 0;
                for (var j = 0; j < horizontalLength; ++j) {
                    if (lastLifeStage[i][j]) {
                        ctx.rect(x, y, this.SQUARE_SIZE, this.SQUARE_SIZE);
                    }
                    x += 11;
                }
                y += 11;
            }
            ctx.fillStyle = "#8bc34a";
            ctx.fill();
            this.gameLife.contain.innerHTML = "";
            this.gameLife.contain.appendChild(this.canvas);
        }
    }]);

    return WriteCanvasGameLife;
}();

exports.default = WriteCanvasGameLife;

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WriteSVGGameLife = function () {
    function WriteSVGGameLife(gameLife) {
        _classCallCheck(this, WriteSVGGameLife);

        this.SQUARE_SIZE = 8;
        this.SVG_NS = "http://www.w3.org/2000/svg";
        this.svg = document.createElementNS(this.SVG_NS, 'svg');
        this.wrapper = document.createElementNS(this.SVG_NS, 'rect');
        this.wrapper.setAttribute('class', 'wrapper');
        this.svg.appendChild(this.wrapper);
        this.gameLife = gameLife;
        this.startWriteGame();
    }

    _createClass(WriteSVGGameLife, [{
        key: 'startWriteGame',
        value: function startWriteGame() {
            this.writeGame(this.gameLife.stageHistory[this.gameLife.currentArrayIndex], this.pre);
            window.location.hash = 'SVG&gameState=' + (this.gameLife.currentArrayIndex + 1);
        }
    }, {
        key: 'writeGame',
        value: function writeGame(lastLifeStage) {
            var verticalLength = lastLifeStage.length,
                horizontalLength = lastLifeStage[0].length;

            this.svg.setAttribute('height', verticalLength * 11);
            this.svg.setAttribute('width', horizontalLength * 11);

            var y = 0;
            for (var i = 0; i < verticalLength; ++i) {
                var x = 0;
                for (var j = 0; j < horizontalLength; ++j) {
                    if (lastLifeStage[i][j]) {
                        var SVGSquare = '<rect \n                                  x="' + x + '"\n                                  y="' + y + '"\n                                  width="' + this.SQUARE_SIZE + '"\n                                  class="inner-square" />';
                        this.svg.innerHTML += SVGSquare;
                    }
                    x += 11;
                }
                y += 11;
            }
            this.gameLife.contain.innerHTML = "";
            this.gameLife.contain.appendChild(this.svg);
        }
    }]);

    return WriteSVGGameLife;
}();

exports.default = WriteSVGGameLife;

},{}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WriteTextGameLife = function () {
    function WriteTextGameLife(gameLife) {
        _classCallCheck(this, WriteTextGameLife);

        this.pre = document.createElement("pre");
        this.gameLife = gameLife;
        this.startWriteGame();
    }

    _createClass(WriteTextGameLife, [{
        key: "startWriteGame",
        value: function startWriteGame() {
            this.writeGame(this.gameLife.stageHistory[this.gameLife.currentArrayIndex], this.pre);
            window.location.hash = "Text&gameState=" + (this.gameLife.currentArrayIndex + 1);
        }
    }, {
        key: "writeGame",
        value: function writeGame(lastLifeStage) {
            var verticalLength = lastLifeStage.length,
                horizontalLength = lastLifeStage[0].length;
            var textGameLife = "";

            for (var i = 0; i < verticalLength; ++i) {
                if (i > 0) textGameLife += "\n";
                for (var j = 0; j < horizontalLength; ++j) {
                    if (lastLifeStage[i][j]) {
                        textGameLife += "x";
                    } else textGameLife += " ";
                }
                this.pre.innerHTML = textGameLife;
            }
            this.gameLife.contain.innerHTML = "";
            this.gameLife.contain.appendChild(this.pre);
        }
    }]);

    return WriteTextGameLife;
}();

exports.default = WriteTextGameLife;

},{}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventBus = function () {
    function EventBus() {
        _classCallCheck(this, EventBus);

        this.listeners = {};
    }

    _createClass(EventBus, [{
        key: 'on',
        value: function on(name, cb) {
            this.listeners[name] = this.listeners[name] || [];
            this.listeners[name].push(cb);
        }
    }, {
        key: 'trigger',
        value: function trigger(name) {
            for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                data[_key - 1] = arguments[_key];
            }

            if (this.listeners[name]) {
                this.listeners[name].forEach(function (cb) {
                    if (cb.constructor) {
                        new (Function.prototype.bind.apply(cb, [null].concat(data)))();
                    } else cb.apply(undefined, data);
                });
            }
        }
    }, {
        key: 'off',
        value: function off(name, cb) {
            if (!cb) {
                delete this.listeners[name];
            } else {
                this.listeners[name] = this.listeners[name].filter(function (arrayCallback) {
                    return !(cb === arrayCallback);
                });
            }
        }
    }, {
        key: 'once',
        value: function once(name, cb) {
            this.on(name, onceOff);
            var self = this;

            function onceOff() {
                cb.apply(undefined, arguments);
                delete self.listeners[name];
            }
        }
    }]);

    return EventBus;
}();

exports.default = EventBus;

},{}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Router = function () {
    function Router() {
        var _this = this;

        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        _classCallCheck(this, Router);

        this.routes = options.routes;
        window.addEventListener("hashchange", function () {
            return _this.hashCheck(window.location.hash);
        });
        this.hashCheck(window.location.hash);
    }

    _createClass(Router, [{
        key: 'findNewRoute',
        value: function findNewRoute(hash) {
            var route = void 0;
            var self = this;
            if (!this.routes) {
                return;
            } else if (this.routes.length === 1) {
                return this.findRoute(hash, this.routes[0]);
            } else {
                this.routes.forEach(function (routeItem) {
                    if (self.findRoute(hash, routeItem)) {
                        return route = routeItem;
                    }
                });
            }
            return route;
        }
    }, {
        key: 'findRoute',
        value: function findRoute(hash, item) {
            if (typeof item.match === 'string' && hash === item.match || typeof item.match === 'function' && item.match(hash) || item.match instanceof RegExp && hash.match(item.match)) {
                return item;
            }
        }
    }, {
        key: 'hashCheck',
        value: function hashCheck(hash) {
            var _this2 = this;

            hash = hash.slice(1);
            var preRoute = this.activeRoute;
            var newRoute = this.findNewRoute(hash);

            if (!newRoute) {
                return;
            } else if (typeof newRoute.match === 'string') {
                this.routeParams = newRoute.match;
            } else if (newRoute.match instanceof RegExp) {
                this.routeParams = hash.match(newRoute.match)[1];
            } else if (typeof newRoute.match === 'function') {
                this.routeParams = newRoute.match(hash);
            }

            Promise.resolve().then(function () {
                if (preRoute && preRoute.onLeave) {
                    _this2.preRouteParams ? preRoute.onLeave(_this2.preRouteParams) : preRoute.onLeave();
                }
            }).then(function () {
                if (newRoute && newRoute.onBeforeEnter) {
                    _this2.routeParams ? newRoute.onBeforeEnter(_this2.routeParams) : newRoute.onBeforeEnter();
                }
            }).then(function () {
                if (newRoute && newRoute.onEnter) {
                    _this2.routeParams ? newRoute.onEnter(_this2.routeParams) : newRoute.onEnter();
                }
            }).then(function () {
                _this2.activeRoute = newRoute;
                _this2.preRouteParams = _this2.routeParams;
            }).catch(function (error) {
                console.log(error);
            });
        }
    }]);

    return Router;
}();

exports.default = Router;

},{}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
