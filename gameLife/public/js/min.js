!function e(t,n,r){function i(o,u){if(!n[o]){if(!t[o]){var s="function"==typeof require&&require;if(!u&&s)return s(o,!0);if(a)return a(o,!0);var c=new Error("Cannot find module '"+o+"'");throw c.code="MODULE_NOT_FOUND",c}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return i(n||e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var a="function"==typeof require&&require,o=0;o<r.length;o++)i(r[o]);return i}({1:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default=function(){if(!document.querySelector("#aboutDiv")){var e=document.createElement("div");e.setAttribute("id","aboutDiv"),document.body.appendChild(e)}aboutDiv.innerHTML="<h1><a href='https://ru.wikipedia.org/wiki/%D0%98%D0%B3%D1%80%D0%B0_%C2%AB%D0%96%D0%B8%D0%B7%D0%BD%D1%8C%C2%BB'>Игра «Жизнь»</a></h1><p>Место действия этой игры — «вселенная» — это размеченная на клетки поверхность или плоскость — безграничная, ограниченная, или замкнутая (в пределе — бесконечная плоскость).</p><p>Каждая клетка на этой поверхности может находиться в двух состояниях: быть «живой» (заполненной) или быть «мёртвой» (пустой). Клетка имеет восемь соседей, окружающих её.</p><ul> Распределение живых клеток в начале игры называется первым поколением. Каждое следующее поколение рассчитывается на основе предыдущего по таким правилам:<li>в пустой (мёртвой) клетке, рядом с которой ровно три живые клетки, зарождается жизнь;</li><li>если у живой клетки есть две или три живые соседки, то эта клетка продолжает жить; в противном случае, если соседей меньше двух или больше трёх, клетка умирает («от одиночества» или «от перенаселённости»)</li></ul><p>Игрок не принимает прямого участия в игре, а лишь расставляет или генерирует начальную конфигурацию «живых» клеток, которые затем взаимодействуют согласно правилам уже без его участия (он является наблюдателем).</p><p>Поле отображает текущее поколение. И позволяет пользователю взаимодействовать с игрой. Клик по полю вызывает инверсию состояния клетки, по которой пользователь кликнул ( живая - умирает, мертвая - оживает ).</p>"}},{}],2:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=e("./routs");r=a,r&&r.__esModule;var o=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.gameLineNumbew=t||40,this.gameColumnNumbew=n||40,this.gameLifeArray=this.createGameArray(t,n),this.contain=document.querySelector("#contain"),this.gameSpeed=document.querySelector("#rangeGameSpeed"),this.stageHistory?this.stageHistory.push(this.gameLifeArray):(this.stageHistory=[],this.stageHistory.push(this.gameLifeArray)),this.subscribeToClickOnArray(),this.playState=!0,this.currentArrayIndex=this.stageHistory.length-1}return i(e,[{key:"subscribeToClickOnArray",value:function(){this.wrapperClickOnArray=this.clickOnArray.bind(this),this.contain.addEventListener("click",this.wrapperClickOnArray)}},{key:"clickOnArray",value:function(e){var t=this.contain.clientHeight,n=this.contain.clientWidth,r=e.offsetX,i=e.offsetY,a=t/this.gameLineNumbew,o=n/this.gameColumnNumbew,u=Math.floor(r/o),s=Math.floor(i/a),c=this.stageHistory[this.currentArrayIndex][s][u];this.stageHistory[this.currentArrayIndex][s][u]=c?0:1,this.stageHistory.splice(this.currentArrayIndex+1),this.eventBus.trigger("view",this)}},{key:"createGameArray",value:function(e,t){for(var n=[],r=0;r<e;++r){for(var i=[],a=0;a<t;++a)i.push(0);n.push(i)}return this.addToArrayFixedItem(n)}},{key:"addToArrayFixedItem",value:function(e){var t=Math.round(e[0].length/2),n=Math.round(e.length/2);return e[n][t]=1,e[n-1][t]=1,e[n+1][t]=1,e[n+1][t]=1,e[n+1][t+1]=1,e}},{key:"startCalculate",value:function(){if(this.stageHistory.length){var e=this.stageHistory[this.currentArrayIndex];this.calculateGameLife(e)}this.currentArrayIndex=this.stageHistory.length-1}},{key:"calculateGameLife",value:function(e){for(var t=[],n=0;n<this.gameLineNumbew;++n){for(var r=[],i=0;i<this.gameColumnNumbew;++i){var a=this.getAdjacentElementLength(n,i,e);3!==a||e[n][i]?2===a||3===a&&e[n][i]?r.push(e[n][i]):(a<2||a>3)&&r.push(0):r.push(1)}t.push(r)}this.stageHistory.splice(this.currentArrayIndex+1),this.stageHistory.push(t)}},{key:"getAdjacentElementLength",value:function(e,t,n){for(var r=0,i=e-1;i<=e+1;++i)for(var a=t-1;a<=t+1;++a)i===e&&a===t||i<0||a<0||i>this.gameLineNumbew-1||a>this.gameColumnNumbew-1||1!==n[i][a]||++r;return r}},{key:"repiatGame",value:function(){var e=this;setTimeout(function(){e.playState?(e.startCalculate(e.stageHistory),e.eventBus.trigger("view",e),e.repiatGame()):e.playState||clearTimeout()},100*+this.gameSpeed.value)}}]),e}();n.default=o},{"./routs":4}],3:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=e("./calculatingGameLife"),o=(r=a,r&&r.__esModule?r:{default:r});var u=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default);function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=document.querySelector("#selectLine"),r=document.querySelector("#selectColumn"),i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,+n.value,+r.value,e));return i.eventBus=e,i.selectLine=n,i.selectColumn=r,i.buttons=document.querySelector("#buttons"),i.subscribeToClickButton(),i}return i(t,[{key:"subscribeToClickButton",value:function(){this.wrapperClickOnControlsButton=this.clickOnControlsButton.bind(this),this.buttons.addEventListener("click",this.wrapperClickOnControlsButton),this.repiatGame()}},{key:"clickOnControlsButton",value:function(e){var t=e.target;t.closest("#back")?this.currentArrayIndex>0&&(--this.currentArrayIndex,this.eventBus.trigger("view",this)):t.closest("#forward")?this.currentArrayIndex<this.stageHistory.length-1&&(++this.currentArrayIndex,this.eventBus.trigger("view",this)):t.closest("#play")&&("Stop"===t.value?(t.value="Play",this.playState=!1):"Play"===t.value&&(t.value="Stop",this.playState=!0,this.repiatGame()))}}]),t}();n.default=u},{"./calculatingGameLife":2}],4:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=l(e("./aboutPage")),i=l(e("./writeCanvasGameLife")),a=l(e("./writeSVGGameLife")),o=l(e("./controls")),u=l(e("./writeTextGameLife")),s=l(e("../utils/eventBus")),c=l(e("../utils/router"));function l(e){return e&&e.__esModule?e:{default:e}}var f=new s.default,h=void 0;document.querySelector("#form-controls").addEventListener("change",function(e){h.selectLine.value>150?h.selectLine.value=150:h.selectLine.value<3&&(h.selectLine.value=3),h.selectColumn.value>150?h.selectColumn.value=150:h.selectColumn.value<3&&(h.selectColumn.value=3);var t=e.target;(t.closest("#selectLine")||t.closest("#selectColumn"))&&(h.playState=!1,h.buttons.removeEventListener("click",h.wrapperClickOnArray),h.contain.removeEventListener("click",h.wrapperClickOnControlsButton),h={},h=new o.default(f),f.trigger("view",h))});new c.default({routes:[{name:"index",match:"",onBeforeEnter:function(){var e=document.querySelector("#contain"),t=document.querySelector("#controls");e.style.display="none",t.style.display="none"},onEnter:function(){var e=document.createElement("h1");e.setAttribute("id","headerText"),e.innerHTML="Выберите режим отображения игры",document.body.appendChild(e)},onLeave:function(){document.querySelector("#headerText").style.display="none"}},{name:"Text",match:/Text/,onBeforeEnter:function(){var e=document.querySelector("#contain"),t=document.querySelector("#controls");e.style.display="block",t.style.display="block"},onEnter:function(){f.on("view",u.default),h||(h=new o.default(f)),f.trigger("view",h)},onLeave:function(){f.off("view",u.default)}},{name:"Canvas",match:/Canvas/,onBeforeEnter:function(){var e=document.querySelector("#contain"),t=document.querySelector("#controls");e.style.display="block",t.style.display="block"},onEnter:function(){f.on("view",i.default),h||(h=new o.default(f)),f.trigger("view",h)},onLeave:function(){f.off("view",i.default)}},{name:"SVG",match:/SVG/,onBeforeEnter:function(){var e=document.querySelector("#contain"),t=document.querySelector("#controls");e.style.display="block",t.style.display="block"},onEnter:function(){f.on("view",a.default),h||(h=new o.default(f)),f.trigger("view",h)},onLeave:function(){f.off("view",a.default)}},{name:"About",match:/About/,onBeforeEnter:function(){var e=document.querySelector("#contain"),t=document.querySelector("#controls");e.style.display="none",t.style.display="none",h&&(h.playState=!1)},onEnter:function(){var e=document.querySelector("#aboutDiv");e?e.style.display="block":(0,r.default)()},onLeave:function(){if(document.querySelector("#aboutDiv").style.display="none",h){h.playState=!0;"Stop"===document.querySelector("#play").value&&h.repiatGame()}}}]});n.default=h},{"../utils/eventBus":8,"../utils/router":9,"./aboutPage":1,"./controls":3,"./writeCanvasGameLife":5,"./writeSVGGameLife":6,"./writeTextGameLife":7}],5:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.canvas=document.createElement("canvas"),this.gameLife=t,this.SQUARE_SIZE=8,this.startWriteGame()}return r(e,[{key:"startWriteGame",value:function(){this.writeGame(this.gameLife.stageHistory[this.gameLife.currentArrayIndex],this.pre),window.location.hash="Canvas&gameState="+(this.gameLife.currentArrayIndex+1)}},{key:"writeGame",value:function(e){var t=e.length,n=e[0].length;this.canvas.height=11*t,this.canvas.width=11*n;var r=this.canvas.getContext("2d");r.beginPath();for(var i=0,a=0;a<t;++a){for(var o=0,u=0;u<n;++u)e[a][u]&&r.rect(o,i,this.SQUARE_SIZE,this.SQUARE_SIZE),o+=11;i+=11}r.fillStyle="#8bc34a",r.fill(),this.gameLife.contain.innerHTML="",this.gameLife.contain.appendChild(this.canvas)}}]),e}();n.default=i},{}],6:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.SQUARE_SIZE=8,this.SVG_NS="http://www.w3.org/2000/svg",this.svg=document.createElementNS(this.SVG_NS,"svg"),this.wrapper=document.createElementNS(this.SVG_NS,"rect"),this.wrapper.setAttribute("class","wrapper"),this.svg.appendChild(this.wrapper),this.gameLife=t,this.startWriteGame()}return r(e,[{key:"startWriteGame",value:function(){this.writeGame(this.gameLife.stageHistory[this.gameLife.currentArrayIndex],this.pre),window.location.hash="SVG&gameState="+(this.gameLife.currentArrayIndex+1)}},{key:"writeGame",value:function(e){var t=e.length,n=e[0].length;this.svg.setAttribute("height",11*t),this.svg.setAttribute("width",11*n);for(var r=0,i=0;i<t;++i){for(var a=0,o=0;o<n;++o){if(e[i][o]){var u='<rect \n                                  x="'+a+'"\n                                  y="'+r+'"\n                                  width="'+this.SQUARE_SIZE+'"\n                                  class="inner-square" />';this.svg.innerHTML+=u}a+=11}r+=11}this.gameLife.contain.innerHTML="",this.gameLife.contain.appendChild(this.svg)}}]),e}();n.default=i},{}],7:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.pre=document.createElement("pre"),this.gameLife=t,this.startWriteGame()}return r(e,[{key:"startWriteGame",value:function(){this.writeGame(this.gameLife.stageHistory[this.gameLife.currentArrayIndex],this.pre),window.location.hash="Text&gameState="+(this.gameLife.currentArrayIndex+1)}},{key:"writeGame",value:function(e){for(var t=e.length,n=e[0].length,r="",i=0;i<t;++i){i>0&&(r+="\n");for(var a=0;a<n;++a)e[i][a]?r+="x":r+=" ";this.pre.innerHTML=r}this.gameLife.contain.innerHTML="",this.gameLife.contain.appendChild(this.pre)}}]),e}();n.default=i},{}],8:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.listeners={}}return r(e,[{key:"on",value:function(e,t){this.listeners[e]=this.listeners[e]||[],this.listeners[e].push(t)}},{key:"trigger",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];this.listeners[e]&&this.listeners[e].forEach(function(e){e.constructor?new(Function.prototype.bind.apply(e,[null].concat(n))):e.apply(void 0,n)})}},{key:"off",value:function(e,t){t?this.listeners[e]=this.listeners[e].filter(function(e){return!(t===e)}):delete this.listeners[e]}},{key:"once",value:function(e,t){this.on(e,function(){t.apply(void 0,arguments),delete n.listeners[e]});var n=this}}]),e}();n.default=i},{}],9:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.routes=n.routes,window.addEventListener("hashchange",function(){return t.hashCheck(window.location.hash)}),this.hashCheck(window.location.hash)}return r(e,[{key:"findNewRoute",value:function(e){var t=void 0,n=this;if(this.routes)return 1===this.routes.length?this.findRoute(e,this.routes[0]):(this.routes.forEach(function(r){if(n.findRoute(e,r))return t=r}),t)}},{key:"findRoute",value:function(e,t){if("string"==typeof t.match&&e===t.match||"function"==typeof t.match&&t.match(e)||t.match instanceof RegExp&&e.match(t.match))return t}},{key:"hashCheck",value:function(e){var t=this;e=e.slice(1);var n=this.activeRoute,r=this.findNewRoute(e);r&&("string"==typeof r.match?this.routeParams=r.match:r.match instanceof RegExp?this.routeParams=e.match(r.match)[1]:"function"==typeof r.match&&(this.routeParams=r.match(e)),Promise.resolve().then(function(){n&&n.onLeave&&(t.preRouteParams?n.onLeave(t.preRouteParams):n.onLeave())}).then(function(){r&&r.onBeforeEnter&&(t.routeParams?r.onBeforeEnter(t.routeParams):r.onBeforeEnter())}).then(function(){r&&r.onEnter&&(t.routeParams?r.onEnter(t.routeParams):r.onEnter())}).then(function(){t.activeRoute=r,t.preRouteParams=t.routeParams}).catch(function(e){console.log(e)}))}}]),e}();n.default=i},{}]},{},[4]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
