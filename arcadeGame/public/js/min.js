!function e(t,n,a){function r(o,s){if(!n[o]){if(!t[o]){var u="function"==typeof require&&require;if(!s&&u)return u(o,!0);if(i)return i(o,!0);var c=new Error("Cannot find module '"+o+"'");throw c.code="MODULE_NOT_FOUND",c}var h=n[o]={exports:{}};t[o][0].call(h.exports,function(e){var n=t[o][1][e];return r(n||e)},h,h.exports,e,t,n,a)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<a.length;o++)r(a[o]);return r}({1:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default=function(){if(!document.querySelector("#aboutDiv")){var e=document.createElement("div");e.setAttribute("id","aboutDiv"),document.body.appendChild(e)}aboutDiv.innerHTML="<p>Аркдная игра была создана Кулешовым Владимиром</p>\n<p><a href='https://vk.com/vvkuleshov' target='_blank'>ВКонтакте</a></p>\n<p><a href='https://www.linkedin.com/in/vladimir-kuleshov-27325712a/' target='_blank'>LinkedIn</a></p>\n<p>Игра была создана по ТЗ описанному тут: <a href='https://github.com/vvscode/js--base-course/tree/master/09/ht' target='_blank'>ТЗ для игры</a></p>"}},{}],2:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}();var r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.containerWidth=document.documentElement.clientWidth,this.containerHeight=document.documentElement.clientHeight,this.eventBus=t,this.die=!1,this.sx=0,this.sy=0}return a(e,[{key:"setRandomPositions",value:function(){this.x=this.getRandomInt(0,this.containerWidth),this.y=this.getRandomInt(0,this.containerHeight);this.getResultPythagoreanTheorem()<5*this.SUBJECT_SIZE&&this.setRandomPositions()}},{key:"subscribeToMove",value:function(){var e=this.movePerson.bind(this);document.body.addEventListener("keydown",e);var t=this.moveCharacterOnMobile.bind(this);document.querySelector(".mobileControls").addEventListener("click",t)}},{key:"moveCharacterOnMobile",value:function(e){var t=e.target;this.direction=t.value}},{key:"movePerson",value:function(e){switch(e.keyCode){case 38:this.direction="moveForward";break;case 40:this.direction="backward";break;case 39:this.direction="moveRight";break;case 37:this.direction="moveLeft"}}},{key:"moveInRandomDirection",value:function(){switch(this.getRandomInt(1,4)){case 1:this.direction="moveForward";break;case 2:this.direction="backward";break;case 3:this.direction="moveRight";break;case 4:this.direction="moveLeft"}this.startMove()}},{key:"getRandomInt",value:function(e,t){return Math.floor(Math.random()*(t-e+1))+e}},{key:"setEventBusDirection",value:function(){this.eventBus.on("moveRightAndDown",this.moveRightAndDown),this.eventBus.on("moveLeftAndDown",this.moveLeftAndDown),this.eventBus.on("moveRightAndAUp",this.moveRightAndAUp),this.eventBus.on("moveLeftAndAUp",this.moveLeftAndAUp),this.eventBus.on("moveForward",this.moveForward),this.eventBus.on("moveRight",this.moveRight),this.eventBus.on("moveLeft",this.moveLeft),this.eventBus.on("backward",this.backward)}},{key:"pursueCharacter",value:function(){this.prey.x>this.x&&this.prey.y>this.y?this.direction="moveRightAndDown":this.prey.x<this.x&&this.prey.y>this.y?this.direction="moveLeftAndDown":this.prey.x>this.x&&this.prey.y<this.y?this.direction="moveRightAndAUp":this.prey.x<this.x&&this.prey.y<this.y?this.direction="moveLeftAndAUp":this.prey.x<this.x?this.direction="moveLeft":this.prey.x>this.x?this.direction="moveRight":this.prey.y>this.y?this.direction="backward":this.prey.y<this.y&&(this.direction="moveForward")}},{key:"moveForward",value:function(e){e.y=e.y-2}},{key:"backward",value:function(e){e.y=e.y+2}},{key:"moveRight",value:function(e){e.x=e.x+2}},{key:"moveLeft",value:function(e){e.x=e.x-2}},{key:"moveLeftAndAUp",value:function(e){--e.x,--e.y}},{key:"moveRightAndAUp",value:function(e){++e.x,--e.y}},{key:"moveLeftAndDown",value:function(e){--e.x,++e.y}},{key:"moveRightAndDown",value:function(e){++e.x,++e.y}},{key:"getResultPythagoreanTheorem",value:function(){var e=this.prey.x-this.SUBJECT_SIZE/2-(this.x-this.SUBJECT_SIZE/2),t=this.prey.y-this.SUBJECT_SIZE/2-(this.y-this.SUBJECT_SIZE/2);return Math.sqrt(e*e+t*t)}},{key:"checkOutTheEdgeOfTheCharacter",value:function(){this.x<0-this.SUBJECT_SIZE?this.x=this.containerWidth:this.x>this.containerWidth?this.x=0:this.y<0-this.SUBJECT_SIZE?this.y=this.containerHeight:this.y>this.containerHeight&&(this.y=0)}},{key:"catchUpWithThePlayer",value:function(){var e=this.getResultPythagoreanTheorem();e<this.SUBJECT_SIZE/1.5&&"mushroom"===this.type&&!this.die?(this.prey.ateMushroom||this.playerCatchMushroom(),this.die=!0,this.prey.ateMushroom=!0,this.prey.mushroomTimer+=15):e<this.SUBJECT_SIZE/1.5&&this.prey.ateMushroom?this.die=!0:e<this.SUBJECT_SIZE/1.5&&!this.die&&(this.prey.humanLife=!1)}},{key:"checkForCharacterOccurrencesInRadius",value:function(){this.getResultPythagoreanTheorem()<2.7*this.SUBJECT_SIZE&&this.pursueCharacter()}},{key:"playerCatchMushroom",value:function(){var e=this,t=setInterval(function(){--e.prey.mushroomTimer,e.prey.mushroomTimer<=0&&(e.prey.ateMushroom=!1,clearInterval(t))},1e3)}},{key:"startMove",value:function(){var e=this,t=setInterval(function(){e.checkOutTheEdgeOfTheCharacter(),"hunt2"===e.type?(e.eventBus.trigger(e.direction,e),e.catchUpWithThePlayer(),e.checkForCharacterOccurrencesInRadius()):(e.eventBus.trigger(e.direction,e),"human"!==e.type&&e.catchUpWithThePlayer()),e.abortInterval(t)},4*this.speed)}},{key:"startUpdateSprites",value:function(){var e=this;this.updateSpritesTimer=setInterval(function(){e.updateSprite()},18*this.speed)}},{key:"abortInterval",value:function(e){"hunt2"!==this.type&&"hunt1"!==this.type||this.prey.humanLife?"human"!==this.type||this.humanLife||(clearInterval(e),clearInterval(this.updateSpritesTimer)):(clearInterval(e),clearInterval(this.updateSpritesTimer))}}]),e}();n.default=r},{}],3:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),i=e("../characters"),o=(a=i,a&&a.__esModule?a:{default:a});var s=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default);function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.SUBJECT_SIZE=n.containerHeight/15,n.x=Math.round(n.containerWidth/2-n.SUBJECT_SIZE/2),n.y=Math.round(n.containerHeight/2-n.SUBJECT_SIZE/2),n.speed=5,n.type="human",n.humanLife=!0,n.ateMushroom=!1,n.mushroomTimer=0,n.init(),n}return r(t,[{key:"init",value:function(){this.setEventBusDirection(),this.moveInRandomDirection(),this.subscribeToMove(),this.startUpdateSprites()}},{key:"updateSprite",value:function(){switch(this.direction){case"moveForward":case"moveLeftAndAUp":case"moveRightAndAUp":this.sy=207;break;case"backward":case"moveLeftAndDown":case"moveRightAndDown":this.sy=0;break;case"moveRight":this.sy=138;break;case"moveLeft":this.sy=69}this.sx+=64,this.sx>=250&&(this.sx=0)}}]),t}();n.default=s},{"../characters":2}],4:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),i=e("../characters"),o=(a=i,a&&a.__esModule?a:{default:a});var s=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default);function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return a.prey=e,a.SUBJECT_SIZE=a.containerHeight/15,a.speed=a.getRandomInt(3,10),a.type="hunt1",a.init(),a}return r(t,[{key:"init",value:function(){this.setRandomPositions(),this.moveInRandomDirection(),this.startUpdateSprites()}},{key:"updateSprite",value:function(){switch(this.direction){case"moveForward":case"moveLeftAndAUp":case"moveRightAndAUp":this.sy=145;break;case"backward":case"moveLeftAndDown":case"moveRightAndDown":this.sy=0;break;case"moveRight":this.sy=96;break;case"moveLeft":this.sy=48}this.sx+=46,this.sx>=130&&(this.sx=0)}}]),t}();n.default=s},{"../characters":2}],5:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),i=e("../characters"),o=(a=i,a&&a.__esModule?a:{default:a});var s=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default);function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return a.prey=e,a.SUBJECT_SIZE=a.containerHeight/12,a.speed=a.getRandomInt(5,12),a.type="hunt2",a.init(),a}return r(t,[{key:"init",value:function(){this.setRandomPositions(),this.moveInRandomDirection(),this.startUpdateSprites()}},{key:"updateSprite",value:function(){switch(this.direction){case"moveForward":case"moveLeftAndAUp":case"moveRightAndAUp":this.sy=288;break;case"backward":case"moveLeftAndDown":case"moveRightAndDown":this.sy=0;break;case"moveRight":this.sy=192;break;case"moveLeft":this.sy=96}this.sx+=143,this.sx>=425&&(this.sx=0)}}]),t}();n.default=s},{"../characters":2}],6:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),i=e("../characters"),o=(a=i,a&&a.__esModule?a:{default:a});var s=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default);function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return a.prey=e,a.SUBJECT_SIZE=a.containerHeight/15,a.speed=a.getRandomInt(7,14),a.type="mushroom",a.init(),a}return r(t,[{key:"init",value:function(){this.setRandomPositions(),this.moveInRandomDirection(),this.startUpdateSprites()}},{key:"updateSprite",value:function(){switch(this.direction){case"moveForward":case"moveLeftAndAUp":case"moveRightAndAUp":this.sy=150;break;case"backward":case"moveLeftAndDown":case"moveRightAndDown":this.sy=0;break;case"moveRight":this.sy=100;break;case"moveLeft":this.sy=50}this.sx+=50,this.sx>=140&&(this.sx=0)}}]),t}();n.default=s},{"../characters":2}],7:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=c(e("./characters/Human")),i=c(e("./characters/Hunt1")),o=c(e("./characters/Hunt2")),s=c(e("./characters/Mushroom")),u=c(e("../utilities/eventBus"));function c(e){return e&&e.__esModule?e:{default:e}}var h=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.contain=t,this.playingGame=!0,this.gameStage=1,this.eventBus=new u.default,n?this.getCurrentPersonageArray(n):(this.human=new r.default(this.eventBus),this.timeToStart=new Date,this.personage=[this.human],this.historyStage=[],this.exportCharacterData(),this.startTimer(),this.updateArea()),this.createCanvasArea()}return a(e,[{key:"getCurrentPersonageArray",value:function(e){this.personage=e[this.gameStage-1]}},{key:"createCanvasArea",value:function(){this.arcadeGameContainer=document.createElement("canvas"),this.arcadeGameContainer.setAttribute("id","game"),this.arcadeGameContainer.height=document.documentElement.clientHeight,this.arcadeGameContainer.width=document.documentElement.clientWidth,this.drawCanvasArea()}},{key:"drawCanvasArea",value:function(){var e=this.arcadeGameContainer.getContext("2d");e.clearRect(0,0,this.arcadeGameContainer.width,this.arcadeGameContainer.height),this.drawGameBoard(e);for(var t=this.personage.length,n=0;n<t;++n)this.drawPersonage(e,this.personage[n]);this.contain.appendChild(this.arcadeGameContainer)}},{key:"drawGameBoard",value:function(e){var t=e;t.beginPath();var n=document.querySelector("#background");t.drawImage(n,0,0,this.arcadeGameContainer.width,this.arcadeGameContainer.height)}},{key:"drawPersonage",value:function(e,t){var n=t.x,a=t.y,r=0,i=0;t.sx>=0&&(r=t.sx),t.sy>=0&&(i=t.sy);var o=void 0,s=void 0,u=void 0,c=t.SUBJECT_SIZE||this.arcadeGameContainer.height/15;switch(t.type||t.t){case"human":e.beginPath(),o=63.5,s=68.5,u=document.querySelector("#person-img"),e.drawImage(u,r,i,o,s,n,a,c,c);break;case"hunt1":e.beginPath(),o=45.7,s=47.75,u=document.querySelector("#hunter1-img"),e.drawImage(u,r,i,o,s,n,a,c,c);break;case"hunt2":e.beginPath(),o=142.33,s=95.75,u=document.querySelector("#hunter2-img"),c=t.SUBJECT_SIZE||this.arcadeGameContainer.height/12,e.drawImage(u,r,i,o,s,n,a,c,c),e.arc(n+c/2,a+c/2,2.5*c,0,2*Math.PI),e.stroke();break;case"mushroom":e.beginPath(),o=50,s=50,u=document.querySelector("#tinyshroommen-img"),e.drawImage(u,r,i,o,s,n,a,c,c)}}},{key:"startTimer",value:function(){var e=this,t=setInterval(function(){e.playingGame?(e.addNewHunter(),++e.gameStage):e.human.humanLife||clearInterval(t)},5e3)}},{key:"createCharacterDataForExport",value:function(){return this.personage.map(function(e){return{x:e.x,y:e.y,sx:e.sx,sy:e.sy,t:e.type}})}},{key:"addNewHunter",value:function(){this.gameStage%5==0?this.personage.push(new o.default(this.human,this.eventBus)):this.personage.push(new i.default(this.human,this.eventBus)),this.gameStage%10==0&&this.personage.push(new s.default(this.human,this.eventBus))}},{key:"updateArea",value:function(){var e=this,t=setInterval(function(){e.human.humanLife?(e.removeDeadCharacters(),e.drawCanvasArea(),e.checkMushroomTimer()):e.human.humanLife||(clearInterval(t),e.gameOver())},50)}},{key:"exportCharacterData",value:function(){var e=this,t=setInterval(function(){e.historyStage.push(e.createCharacterDataForExport()),e.human.humanLife||clearInterval(t)},200)}},{key:"removeDeadCharacters",value:function(){this.personage=this.personage.filter(function(e){return!1===e.die})}},{key:"checkMushroomTimer",value:function(){if(this.human.mushroomTimer>0){var e=document.querySelector("#mushroomTimer");e||((e=document.createElement("p")).setAttribute("id","mushroomTimer"),document.body.appendChild(e)),e.innerHTML="Время действия волшебного гриба: "+this.human.mushroomTimer+" секунд"}else{var t=document.querySelector("#mushroomTimer");t&&t.remove()}}},{key:"gameOver",value:function(){var e=new Date-this.timeToStart,t=new Date(e),n=t.getMinutes(),a=t.getSeconds();this.playingGame=!1,setTimeout(this.writeFiniteTime(n,a),100)}},{key:"writeFiniteTime",value:function(e,t){var n=prompt("Конец игры. Введите Ваш ник","User")||"User",a=[n,e,t,this.historyStage];if(localStorage.players){var r=JSON.parse(localStorage.players);r.push(a),localStorage.players=JSON.stringify(r)}else{localStorage.players="";var i=[a];localStorage.players=JSON.stringify(i)}window.location.hash="theEnd"+n+";"+e+":"+t}}]),e}();n.default=h},{"../utilities/eventBus":11,"./characters/Human":3,"./characters/Hunt1":4,"./characters/Hunt2":5,"./characters/Mushroom":6}],8:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=u(e("../utilities/router")),r=u(e("./aboutPage")),i=u(e("./gameArea")),o=u(e("./records")),s=u(e("./recordPlayback"));function u(e){return e&&e.__esModule?e:{default:e}}var c=new(u(e("../utilities/eventBus")).default);window.onload=function(){new a.default({routes:[{name:"index",match:"",onEnter:function(){document.querySelector(".mobileControls").style.display="none"}},{name:"Game",match:/Game/,onBeforeEnter:function(){if(document.documentElement.clientWidth<1024){document.querySelector(".mobileControls").style.display="block"}},onEnter:function(){var e=document.querySelector("#main_text"),t=document.querySelector("nav");e.style.display="none",t.style.display="none";document.querySelector("#contain").style.display="block";var n=document.querySelector("#contain");new i.default(n)},onLeave:function(){document.querySelector("#contain").style.display="none"}},{name:"GameOver",match:/theEnd(.+)/,onBeforeEnter:function(){document.querySelector(".mobileControls").style.display="none";document.querySelector("#main_text").style.display="none"},onEnter:function(e){var t=e.split(";"),n=document.createElement("h2");n.setAttribute("id","finalTime"),n.innerHTML=t[0]+", Ваше время игры: "+t[1],document.body.appendChild(n);document.querySelector("nav").style.display="block"},onLeave:function(){document.querySelector("#finalTime").style.display="none"}},{name:"Records",match:/Records/,onBeforeEnter:function(){document.querySelector(".mobileControls").style.display="none";document.querySelector("#main_text").style.display="none"},onEnter:function(){var e=document.querySelector("#tableContain");new o.default(e)},onLeave:function(){document.querySelector("#tableContain").innerHTML=""}},{name:"playbackUser",match:/playbackUser=(.+)/,onBeforeEnter:function(){document.querySelector(".mobileControls").style.display="none";document.querySelector("#main_text").style.display="none"},onEnter:function(e){new s.default(e)},onLeave:function(){var e=document.querySelector("#controlsDiv");document.querySelector("#paybackGame").style.display="none",e.remove()}},{name:"Author",match:/Author/,onBeforeEnter:function(){document.querySelector(".mobileControls").style.display="none";document.querySelector("#main_text").style.display="none"},onEnter:function(){var e=document.querySelector("#aboutDiv");e?e.style.display="block":(0,r.default)()},onLeave:function(){document.querySelector("#aboutDiv").style.display="none"}}]})},n.default=c},{"../utilities/eventBus":11,"../utilities/router":12,"./aboutPage":1,"./gameArea":7,"./recordPlayback":9,"./records":10}],9:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),i=e("./gameArea"),o=(a=i,a&&a.__esModule?a:{default:a});var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.playbackArray=JSON.parse(localStorage.players)[t][3],this.playbackGameContainer=document.createElement("div"),this.playbackGameContainer.setAttribute("id","paybackGame"),document.body.appendChild(this.playbackGameContainer),this.playingGame=!0,this.initPlayback()}return r(e,[{key:"initPlayback",value:function(){this.createControls(),this.createPlaybackGameArea(),this.updatePlaybackGameArea()}},{key:"createControls",value:function(){var e=document.querySelector("#controlsDiv");if(e)e.style.display="block";else{this.controlsDiv=document.createElement("div"),this.controlsDiv.setAttribute("id","controlsDiv"),document.body.appendChild(this.controlsDiv);var t=document.createElement("label");t.innerText="Регулятор скорости:",t.setAttribute("id","speedControllerLabel"),this.controlsDiv.appendChild(t),this.speedController=this.createRange(t,"speedController",50),this.speedController.setAttribute("value","25"),this.rewindController=this.createRange(this.controlsDiv,"rewindController",this.playbackArray.length-1),this.createPlayButton(this.controlsDiv),this.subsToChangeControls()}}},{key:"createRange",value:function(e,t,n){var a=document.createElement("input");return a.setAttribute("id",t),a.setAttribute("type","range"),a.setAttribute("value","1"),a.setAttribute("min","1"),a.setAttribute("max",n),e.appendChild(a),a}},{key:"createPlayButton",value:function(){this.playButton=document.createElement("input"),this.playButton.setAttribute("id","playButton"),this.playButton.setAttribute("type","button"),this.playButton.setAttribute("value","stop"),this.controlsDiv.appendChild(this.playButton)}},{key:"subsToChangeControls",value:function(){var e=this.clickOnPlayButton.bind(this);this.playButton=document.querySelector("#playButton"),this.playButton.addEventListener("click",e);var t=this.changeRange.bind(this);this.controlsDiv.addEventListener("change",t)}},{key:"changeRange",value:function(e){var t=e.target;t.closest("#rewindController")?(this.playback.gameStage=+t.value,this.playback.getCurrentPersonageArray(this.playbackArray),this.playback.drawCanvasArea()):t.closest("#speedController")&&this.playbackArray.length-1!==this.playback.gameStage&&(this.stopPlaybackGameArea(),this.updatePlaybackGameArea())}},{key:"clickOnPlayButton",value:function(e){var t=e.target;"stop"===t.value?(t.value="play",t.style.backgroundPositionX="0",this.timer&&this.stopPlaybackGameArea()):"play"===t.value&&(t.value="stop",t.style.backgroundPositionX="17%",this.timer||this.updatePlaybackGameArea(),this.playbackArray.length-1===this.playback.gameStage&&(this.rewindController.value=1,this.playback.gameStage=1))}},{key:"createPlaybackGameArea",value:function(){this.playback=new o.default(this.playbackGameContainer,this.playbackArray)}},{key:"updatePlaybackGameArea",value:function(){var e=this;this.timer=setInterval(function(){++e.playback.gameStage,+e.rewindController.value==e.playback.gameStage-1&&(e.rewindController.value=e.playback.gameStage),e.playback.getCurrentPersonageArray(e.playbackArray),e.playback.drawCanvasArea(),e.playbackArray.length-1===e.playback.gameStage&&(e.playButton.value="play",e.playButton.style.backgroundPositionX="0",e.stopPlaybackGameArea())},this.speedController.value)}},{key:"stopPlaybackGameArea",value:function(){clearInterval(this.timer),this.timer=0}}]),e}();n.default=s},{"./gameArea":7}],10:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}();var r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.tableContain=t,this.createTableTemplate()}return a(e,[{key:"createTableTemplate",value:function(){this.table=document.createElement("table"),this.table.setAttribute("id","records"),this.table.innerHTML="<tr><th>Ник игрока</th><th>Минут</th><th>Секунд</th><th>Воспроизвести записанную игру</th></tr>",localStorage.players&&(this.playersArray=JSON.parse(localStorage.players),this.createTable())}},{key:"createTable",value:function(){for(var e=0;e<this.playersArray.length;++e){for(var t=document.createElement("tr"),n=0;n<this.playersArray[e].length;++n){var a=document.createElement("td");if(n!==this.playersArray[e].length-1)a.innerText=this.playersArray[e][n];else{var r=document.createElement("a");r.setAttribute("class","playRecordedGame"),r.setAttribute("href","#playbackUser="+e),r.innerText="Play",a.appendChild(r)}t.appendChild(a)}this.table.appendChild(t)}this.tableContain.innerHTML="",this.tableContain.appendChild(this.table)}}]),e}();n.default=r},{}],11:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}();var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.listeners={}}return a(e,[{key:"on",value:function(e,t){this.listeners[e]=this.listeners[e]||[],this.listeners[e].push(t)}},{key:"trigger",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),a=1;a<t;a++)n[a-1]=arguments[a];this.listeners[e]&&this.listeners[e].forEach(function(e){return e.apply(void 0,n)})}},{key:"off",value:function(e,t){t?this.listeners[e]=this.listeners[e].filter(function(e){return!(t===e)}):delete this.listeners[e]}},{key:"once",value:function(e,t){this.on(e,function(){t.apply(void 0,arguments),delete n.listeners[e]});var n=this}}]),e}();n.default=r},{}],12:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}();var r=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.routes=n.routes,window.addEventListener("hashchange",function(){return t.hashCheck(window.location.hash)}),this.hashCheck(window.location.hash)}return a(e,[{key:"findNewRoute",value:function(e){var t=void 0,n=this;if(this.routes)return 1===this.routes.length?this.findRoute(e,this.routes[0]):(this.routes.forEach(function(a){if(n.findRoute(e,a))return t=a}),t)}},{key:"findRoute",value:function(e,t){if("string"==typeof t.match&&e===t.match||"function"==typeof t.match&&t.match(e)||t.match instanceof RegExp&&e.match(t.match))return t}},{key:"hashCheck",value:function(e){var t=this;e=e.slice(1);var n=this.activeRoute,a=this.findNewRoute(e);a&&("string"==typeof a.match?this.routeParams=a.match:a.match instanceof RegExp?this.routeParams=e.match(a.match)[1]:"function"==typeof a.match&&(this.routeParams=a.match(e)),Promise.resolve().then(function(){n&&n.onLeave&&(t.preRouteParams?n.onLeave(t.preRouteParams):n.onLeave())}).then(function(){a&&a.onBeforeEnter&&(t.routeParams?a.onBeforeEnter(t.routeParams):a.onBeforeEnter())}).then(function(){a&&a.onEnter&&(t.routeParams?a.onEnter(t.routeParams):a.onEnter())}).then(function(){t.activeRoute=a,t.preRouteParams=t.routeParams}).catch(function(e){console.log(e)}))}}]),e}();n.default=r},{}]},{},[8]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1pbi5qcyJdLCJuYW1lcyI6WyJlIiwidCIsIm4iLCJyIiwicyIsIm8iLCJ1IiwiYSIsInJlcXVpcmUiLCJpIiwiZiIsIkVycm9yIiwiY29kZSIsImwiLCJleHBvcnRzIiwiY2FsbCIsImxlbmd0aCIsIjEiLCJtb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiZGVmYXVsdCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIl9hYm91dERpdiIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJhYm91dERpdiIsImlubmVySFRNTCIsIjIiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwia2V5IiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJQZXJzb24iLCJldmVudEJ1cyIsImluc3RhbmNlIiwiVHlwZUVycm9yIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsImNvbnRhaW5lcldpZHRoIiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50V2lkdGgiLCJjb250YWluZXJIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJkaWUiLCJzeCIsInN5IiwieCIsImdldFJhbmRvbUludCIsInkiLCJnZXRSZXN1bHRQeXRoYWdvcmVhblRoZW9yZW0iLCJTVUJKRUNUX1NJWkUiLCJzZXRSYW5kb21Qb3NpdGlvbnMiLCJ3cmFwcGVyTW92ZVBlcnNvbiIsIm1vdmVQZXJzb24iLCJiaW5kIiwiYWRkRXZlbnRMaXN0ZW5lciIsIndyYXBwZXJNb3ZlQ2hhcmFjdGVyT25Nb2JpbGUiLCJtb3ZlQ2hhcmFjdGVyT25Nb2JpbGUiLCJldiIsImRpcmVjdGlvbiIsImV2ZW50Iiwia2V5Q29kZSIsInN0YXJ0TW92ZSIsIm1pbiIsIm1heCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsIm9uIiwibW92ZVJpZ2h0QW5kRG93biIsIm1vdmVMZWZ0QW5kRG93biIsIm1vdmVSaWdodEFuZEFVcCIsIm1vdmVMZWZ0QW5kQVVwIiwibW92ZUZvcndhcmQiLCJtb3ZlUmlnaHQiLCJtb3ZlTGVmdCIsImJhY2t3YXJkIiwicHJleSIsInNlbGYiLCJiIiwic3FydCIsImMiLCJ0eXBlIiwiYXRlTXVzaHJvb20iLCJwbGF5ZXJDYXRjaE11c2hyb29tIiwibXVzaHJvb21UaW1lciIsImh1bWFuTGlmZSIsInB1cnN1ZUNoYXJhY3RlciIsIl90aGlzIiwidGltZSIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIl90aGlzMiIsInRpbWVyIiwiY2hlY2tPdXRUaGVFZGdlT2ZUaGVDaGFyYWN0ZXIiLCJ0cmlnZ2VyIiwiY2F0Y2hVcFdpdGhUaGVQbGF5ZXIiLCJjaGVja0ZvckNoYXJhY3Rlck9jY3VycmVuY2VzSW5SYWRpdXMiLCJhYm9ydEludGVydmFsIiwic3BlZWQiLCJfdGhpczMiLCJ1cGRhdGVTcHJpdGVzVGltZXIiLCJ1cGRhdGVTcHJpdGUiLCIzIiwib2JqIiwiX2NoYXJhY3RlcnMiLCJfY2hhcmFjdGVyczIiLCJfX2VzTW9kdWxlIiwiSHVtYW4iLCJfUGVyc29uIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0cyIsIlJlZmVyZW5jZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJnZXRQcm90b3R5cGVPZiIsInJvdW5kIiwiaW5pdCIsInNldEV2ZW50QnVzRGlyZWN0aW9uIiwibW92ZUluUmFuZG9tRGlyZWN0aW9uIiwic3Vic2NyaWJlVG9Nb3ZlIiwic3RhcnRVcGRhdGVTcHJpdGVzIiwiLi4vY2hhcmFjdGVycyIsIjQiLCJIdW50MSIsIjUiLCJIdW50MiIsIjYiLCJNdXNocm9vbSIsIjciLCJfSHVtYW4yIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9IdW50MiIsIl9IdW50NCIsIl9NdXNocm9vbTIiLCJfZXZlbnRCdXMyIiwiR2FtZUFyZWEiLCJjb250YWluIiwicGVyc29uYWdlIiwicGxheWluZ0dhbWUiLCJnYW1lU3RhZ2UiLCJnZXRDdXJyZW50UGVyc29uYWdlQXJyYXkiLCJodW1hbiIsInRpbWVUb1N0YXJ0IiwiRGF0ZSIsImhpc3RvcnlTdGFnZSIsImV4cG9ydENoYXJhY3RlckRhdGEiLCJzdGFydFRpbWVyIiwidXBkYXRlQXJlYSIsImNyZWF0ZUNhbnZhc0FyZWEiLCJhcmNhZGVHYW1lQ29udGFpbmVyIiwiaGVpZ2h0Iiwid2lkdGgiLCJkcmF3Q2FudmFzQXJlYSIsImN0eCIsImdldENvbnRleHQiLCJjbGVhclJlY3QiLCJkcmF3R2FtZUJvYXJkIiwibnVtYmVyT2ZDaGFyYWN0ZXJzIiwiZHJhd1BlcnNvbmFnZSIsImN0eDEiLCJiZWdpblBhdGgiLCJiYWNrZ3JvdW5kIiwiZHJhd0ltYWdlIiwic1dpZHRoIiwic0hlaWdodCIsInNwcml0ZSIsImFyYyIsIlBJIiwic3Ryb2tlIiwiYWRkTmV3SHVudGVyIiwibWFwIiwicHVzaCIsInJlbW92ZURlYWRDaGFyYWN0ZXJzIiwiY2hlY2tNdXNocm9vbVRpbWVyIiwiZ2FtZU92ZXIiLCJjcmVhdGVDaGFyYWN0ZXJEYXRhRm9yRXhwb3J0IiwiZmlsdGVyIiwiY2hhcmFjdGVyIiwiX211c2hyb29tVGltZXIiLCJyZW1vdmUiLCJkaWZmZXJlbmNlSW5UaW1lIiwib3ZlclRpbWUiLCJtaW51dGVzIiwiZ2V0TWludXRlcyIsInNlY29uZHMiLCJnZXRTZWNvbmRzIiwic2V0VGltZW91dCIsIndyaXRlRmluaXRlVGltZSIsInBsYXllck5hbWUiLCJwcm9tcHQiLCJwbGF5ZXIiLCJsb2NhbFN0b3JhZ2UiLCJfcGxheWVyc0FycmF5IiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwicGxheWVyc0FycmF5Iiwid2luZG93IiwibG9jYXRpb24iLCJoYXNoIiwiLi4vdXRpbGl0aWVzL2V2ZW50QnVzIiwiLi9jaGFyYWN0ZXJzL0h1bWFuIiwiLi9jaGFyYWN0ZXJzL0h1bnQxIiwiLi9jaGFyYWN0ZXJzL0h1bnQyIiwiLi9jaGFyYWN0ZXJzL011c2hyb29tIiwiOCIsIl9yb3V0ZXIyIiwiX2Fib3V0UGFnZTIiLCJfZ2FtZUFyZWEyIiwiX3JlY29yZHMyIiwiX3JlY29yZFBsYXliYWNrMiIsIm9ubG9hZCIsInJvdXRlcyIsIm5hbWUiLCJtYXRjaCIsIm9uRW50ZXIiLCJzdHlsZSIsImRpc3BsYXkiLCJvbkJlZm9yZUVudGVyIiwibWFpblRleHQiLCJuYXYiLCJvbkxlYXZlIiwicGxheWVyVGltZSIsInNwbGl0IiwiZmluYWxUaW1lIiwidGFibGVDb250YWluIiwiaW5kZXgiLCJjb250cm9scyIsIi4uL3V0aWxpdGllcy9yb3V0ZXIiLCIuL2Fib3V0UGFnZSIsIi4vZ2FtZUFyZWEiLCIuL3JlY29yZFBsYXliYWNrIiwiLi9yZWNvcmRzIiwiOSIsIl9nYW1lQXJlYSIsIlJlY29yZFBsYXliYWNrIiwicGxheWJhY2tBcnJheSIsInBsYXliYWNrR2FtZUNvbnRhaW5lciIsImluaXRQbGF5YmFjayIsImNyZWF0ZUNvbnRyb2xzIiwiY3JlYXRlUGxheWJhY2tHYW1lQXJlYSIsInVwZGF0ZVBsYXliYWNrR2FtZUFyZWEiLCJjb250cm9sc0RpdiIsInNwZWVkQ29udHJvbGxlckxhYmVsIiwiaW5uZXJUZXh0Iiwic3BlZWRDb250cm9sbGVyIiwiY3JlYXRlUmFuZ2UiLCJyZXdpbmRDb250cm9sbGVyIiwiY3JlYXRlUGxheUJ1dHRvbiIsInN1YnNUb0NoYW5nZUNvbnRyb2xzIiwiaWQiLCJtYXhSYW5nZSIsInJhbmdlIiwicGxheUJ1dHRvbiIsIndyYXBwZXJDbGlja09uUGxheUJ1dHRvbiIsImNsaWNrT25QbGF5QnV0dG9uIiwid3JhcHBlckNoYW5nZVJhbmdlIiwiY2hhbmdlUmFuZ2UiLCJjbG9zZXN0IiwicGxheWJhY2siLCJzdG9wUGxheWJhY2tHYW1lQXJlYSIsImJhY2tncm91bmRQb3NpdGlvblgiLCIxMCIsIlJlY29yZHMiLCJjcmVhdGVUYWJsZVRlbXBsYXRlIiwidGFibGUiLCJjcmVhdGVUYWJsZSIsInRyIiwiaiIsInRkIiwiYnV0dG9uIiwiMTEiLCJFdmVudEJ1cyIsImxpc3RlbmVycyIsImNiIiwiX2xlbiIsImFyZ3VtZW50cyIsImRhdGEiLCJBcnJheSIsIl9rZXkiLCJmb3JFYWNoIiwiYXBwbHkiLCJ1bmRlZmluZWQiLCJhcnJheUNhbGxiYWNrIiwiMTIiLCJSb3V0ZXIiLCJvcHRpb25zIiwiaGFzaENoZWNrIiwicm91dGUiLCJmaW5kUm91dGUiLCJyb3V0ZUl0ZW0iLCJpdGVtIiwiUmVnRXhwIiwic2xpY2UiLCJwcmVSb3V0ZSIsImFjdGl2ZVJvdXRlIiwibmV3Um91dGUiLCJmaW5kTmV3Um91dGUiLCJyb3V0ZVBhcmFtcyIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsInByZVJvdXRlUGFyYW1zIiwiY2F0Y2giLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJDQUFBLFNBQVVBLEVBQUVDLEVBQUVDLEVBQUVDLEdBQUcsU0FBU0MsRUFBRUMsRUFBRUMsR0FBRyxJQUFJSixFQUFFRyxHQUFHLENBQUMsSUFBSUosRUFBRUksR0FBRyxDQUFDLElBQUlFLEVBQWtCLG1CQUFUQyxTQUFxQkEsUUFBUSxJQUFJRixHQUFHQyxFQUFFLE9BQU9BLEVBQUVGLEdBQUUsR0FBSSxHQUFHSSxFQUFFLE9BQU9BLEVBQUVKLEdBQUUsR0FBSSxJQUFJSyxFQUFFLElBQUlDLE1BQU0sdUJBQXVCTixFQUFFLEtBQUssTUFBTUssRUFBRUUsS0FBSyxtQkFBbUJGLEVBQUUsSUFBSUcsRUFBRVgsRUFBRUcsSUFBSVMsWUFBWWIsRUFBRUksR0FBRyxHQUFHVSxLQUFLRixFQUFFQyxRQUFRLFNBQVNkLEdBQUcsSUFBSUUsRUFBRUQsRUFBRUksR0FBRyxHQUFHTCxHQUFHLE9BQU9JLEVBQUVGLEdBQUlGLElBQUlhLEVBQUVBLEVBQUVDLFFBQVFkLEVBQUVDLEVBQUVDLEVBQUVDLEdBQUcsT0FBT0QsRUFBRUcsR0FBR1MsUUFBa0QsSUFBSSxJQUExQ0wsRUFBa0IsbUJBQVRELFNBQXFCQSxRQUFnQkgsRUFBRSxFQUFFQSxFQUFFRixFQUFFYSxPQUFPWCxJQUFJRCxFQUFFRCxFQUFFRSxJQUFJLE9BQU9ELEVBQXZiLEVBQTRiYSxHQUFHLFNBQVNULEVBQVFVLEVBQU9KLEdBQ3ZkLGFBRUFLLE9BQU9DLGVBQWVOLEVBQVMsY0FDM0JPLE9BQU8sSUFhWFAsRUFBUVEsUUFYUixXQUVJLElBRFlDLFNBQVNDLGNBQWMsYUFDdkIsQ0FDUixJQUFJQyxFQUFZRixTQUFTRyxjQUFjLE9BQ3ZDRCxFQUFVRSxhQUFhLEtBQU0sWUFDN0JKLFNBQVNLLEtBQUtDLFlBQVlKLEdBRzlCSyxTQUFTQyxVQUFZLHVZQUtuQkMsR0FBRyxTQUFTeEIsRUFBUVUsRUFBT0osR0FDakMsYUFFQUssT0FBT0MsZUFBZU4sRUFBUyxjQUMzQk8sT0FBTyxJQUdYLElBQUlZLEVBQWUsV0FBYyxTQUFTQyxFQUFpQkMsRUFBUUMsR0FBUyxJQUFLLElBQUkzQixFQUFJLEVBQUdBLEVBQUkyQixFQUFNcEIsT0FBUVAsSUFBSyxDQUFFLElBQUk0QixFQUFhRCxFQUFNM0IsR0FBSTRCLEVBQVdDLFdBQWFELEVBQVdDLGFBQWMsRUFBT0QsRUFBV0UsY0FBZSxFQUFVLFVBQVdGLElBQVlBLEVBQVdHLFVBQVcsR0FBTXJCLE9BQU9DLGVBQWVlLEVBQVFFLEVBQVdJLElBQUtKLElBQWlCLE9BQU8sU0FBVUssRUFBYUMsRUFBWUMsR0FBaUosT0FBOUhELEdBQVlULEVBQWlCUSxFQUFZRyxVQUFXRixHQUFpQkMsR0FBYVYsRUFBaUJRLEVBQWFFLEdBQXFCRixHQUE3Z0IsR0FJbkIsSUFBSUksRUFBUyxXQUNULFNBQVNBLEVBQU9DLElBSHBCLFNBQXlCQyxFQUFVTixHQUFlLEtBQU1NLGFBQW9CTixHQUFnQixNQUFNLElBQUlPLFVBQVUscUNBSXhHQyxDQUFnQkMsS0FBTUwsR0FFdEJLLEtBQUtDLGVBQWlCN0IsU0FBUzhCLGdCQUFnQkMsWUFDL0NILEtBQUtJLGdCQUFrQmhDLFNBQVM4QixnQkFBZ0JHLGFBQ2hETCxLQUFLSixTQUFXQSxFQUNoQkksS0FBS00sS0FBTSxFQUNYTixLQUFLTyxHQUFLLEVBQ1ZQLEtBQUtRLEdBQUssRUFrUGQsT0EvT0ExQixFQUFhYSxJQUNUTCxJQUFLLHFCQUNMcEIsTUFBTyxXQUNIOEIsS0FBS1MsRUFBSVQsS0FBS1UsYUFBYSxFQUFHVixLQUFLQyxnQkFDbkNELEtBQUtXLEVBQUlYLEtBQUtVLGFBQWEsRUFBR1YsS0FBS0ksaUJBRTNCSixLQUFLWSw4QkFDZSxFQUFwQlosS0FBS2EsY0FBa0JiLEtBQUtjLHdCQUd4Q3hCLElBQUssa0JBQ0xwQixNQUFPLFdBQ0gsSUFBSTZDLEVBQW9CZixLQUFLZ0IsV0FBV0MsS0FBS2pCLE1BQzdDNUIsU0FBU0ssS0FBS3lDLGlCQUFpQixVQUFXSCxHQUMxQyxJQUFJSSxFQUErQm5CLEtBQUtvQixzQkFBc0JILEtBQUtqQixNQUNuRTVCLFNBQVNDLGNBQWMsbUJBQW1CNkMsaUJBQWlCLFFBQVNDLE1BR3hFN0IsSUFBSyx3QkFDTHBCLE1BQU8sU0FBK0JtRCxHQUNsQyxJQUFJckMsRUFBU3FDLEVBQUdyQyxPQUNoQmdCLEtBQUtzQixVQUFZdEMsRUFBT2QsU0FHNUJvQixJQUFLLGFBQ0xwQixNQUFPLFNBQW9CcUQsR0FLdkIsT0FBUUEsRUFBTUMsU0FDVixLQUxnQixHQU1aeEIsS0FBS3NCLFVBQVksY0FDakIsTUFDSixLQVBtQixHQVFmdEIsS0FBS3NCLFVBQVksV0FDakIsTUFDSixLQVRrQixHQVVkdEIsS0FBS3NCLFVBQVksWUFDakIsTUFDSixLQVhpQixHQVlidEIsS0FBS3NCLFVBQVksZUFLN0JoQyxJQUFLLHdCQUNMcEIsTUFBTyxXQUNILE9BQVE4QixLQUFLVSxhQUFhLEVBQUcsSUFDekIsS0FBSyxFQUNEVixLQUFLc0IsVUFBWSxjQUNqQixNQUNKLEtBQUssRUFDRHRCLEtBQUtzQixVQUFZLFdBQ2pCLE1BQ0osS0FBSyxFQUNEdEIsS0FBS3NCLFVBQVksWUFDakIsTUFDSixLQUFLLEVBQ0R0QixLQUFLc0IsVUFBWSxXQUd6QnRCLEtBQUt5QixlQUdUbkMsSUFBSyxlQUNMcEIsTUFBTyxTQUFzQndELEVBQUtDLEdBQzlCLE9BQU9DLEtBQUtDLE1BQU1ELEtBQUtFLFVBQVlILEVBQU1ELEVBQU0sSUFBTUEsS0FHekRwQyxJQUFLLHVCQUNMcEIsTUFBTyxXQUNIOEIsS0FBS0osU0FBU21DLEdBQUcsbUJBQW9CL0IsS0FBS2dDLGtCQUMxQ2hDLEtBQUtKLFNBQVNtQyxHQUFHLGtCQUFtQi9CLEtBQUtpQyxpQkFDekNqQyxLQUFLSixTQUFTbUMsR0FBRyxrQkFBbUIvQixLQUFLa0MsaUJBQ3pDbEMsS0FBS0osU0FBU21DLEdBQUcsaUJBQWtCL0IsS0FBS21DLGdCQUN4Q25DLEtBQUtKLFNBQVNtQyxHQUFHLGNBQWUvQixLQUFLb0MsYUFDckNwQyxLQUFLSixTQUFTbUMsR0FBRyxZQUFhL0IsS0FBS3FDLFdBQ25DckMsS0FBS0osU0FBU21DLEdBQUcsV0FBWS9CLEtBQUtzQyxVQUNsQ3RDLEtBQUtKLFNBQVNtQyxHQUFHLFdBQVkvQixLQUFLdUMsYUFHdENqRCxJQUFLLGtCQUNMcEIsTUFBTyxXQUNDOEIsS0FBS3dDLEtBQUsvQixFQUFJVCxLQUFLUyxHQUFLVCxLQUFLd0MsS0FBSzdCLEVBQUlYLEtBQUtXLEVBQzNDWCxLQUFLc0IsVUFBWSxtQkFDVnRCLEtBQUt3QyxLQUFLL0IsRUFBSVQsS0FBS1MsR0FBS1QsS0FBS3dDLEtBQUs3QixFQUFJWCxLQUFLVyxFQUNsRFgsS0FBS3NCLFVBQVksa0JBQ1Z0QixLQUFLd0MsS0FBSy9CLEVBQUlULEtBQUtTLEdBQUtULEtBQUt3QyxLQUFLN0IsRUFBSVgsS0FBS1csRUFDbERYLEtBQUtzQixVQUFZLGtCQUNWdEIsS0FBS3dDLEtBQUsvQixFQUFJVCxLQUFLUyxHQUFLVCxLQUFLd0MsS0FBSzdCLEVBQUlYLEtBQUtXLEVBQ2xEWCxLQUFLc0IsVUFBWSxpQkFDVnRCLEtBQUt3QyxLQUFLL0IsRUFBSVQsS0FBS1MsRUFDMUJULEtBQUtzQixVQUFZLFdBQ1Z0QixLQUFLd0MsS0FBSy9CLEVBQUlULEtBQUtTLEVBQzFCVCxLQUFLc0IsVUFBWSxZQUNWdEIsS0FBS3dDLEtBQUs3QixFQUFJWCxLQUFLVyxFQUMxQlgsS0FBS3NCLFVBQVksV0FDVnRCLEtBQUt3QyxLQUFLN0IsRUFBSVgsS0FBS1csSUFDMUJYLEtBQUtzQixVQUFZLGtCQUl6QmhDLElBQUssY0FDTHBCLE1BQU8sU0FBcUJ1RSxHQUN4QkEsRUFBSzlCLEVBQUk4QixFQUFLOUIsRUFBSSxLQUd0QnJCLElBQUssV0FDTHBCLE1BQU8sU0FBa0J1RSxHQUNyQkEsRUFBSzlCLEVBQUk4QixFQUFLOUIsRUFBSSxLQUd0QnJCLElBQUssWUFDTHBCLE1BQU8sU0FBbUJ1RSxHQUN0QkEsRUFBS2hDLEVBQUlnQyxFQUFLaEMsRUFBSSxLQUd0Qm5CLElBQUssV0FDTHBCLE1BQU8sU0FBa0J1RSxHQUNyQkEsRUFBS2hDLEVBQUlnQyxFQUFLaEMsRUFBSSxLQUd0Qm5CLElBQUssaUJBQ0xwQixNQUFPLFNBQXdCdUUsS0FDekJBLEVBQUtoQyxJQUNMZ0MsRUFBSzlCLEtBR1hyQixJQUFLLGtCQUNMcEIsTUFBTyxTQUF5QnVFLEtBQzFCQSxFQUFLaEMsSUFDTGdDLEVBQUs5QixLQUdYckIsSUFBSyxrQkFDTHBCLE1BQU8sU0FBeUJ1RSxLQUMxQkEsRUFBS2hDLElBQ0xnQyxFQUFLOUIsS0FHWHJCLElBQUssbUJBQ0xwQixNQUFPLFNBQTBCdUUsS0FDM0JBLEVBQUtoQyxJQUNMZ0MsRUFBSzlCLEtBR1hyQixJQUFLLDhCQUNMcEIsTUFBTyxXQUNILElBQUlkLEVBQUk0QyxLQUFLd0MsS0FBSy9CLEVBQUlULEtBQUthLGFBQWUsR0FBS2IsS0FBS1MsRUFBSVQsS0FBS2EsYUFBZSxHQUN4RTZCLEVBQUkxQyxLQUFLd0MsS0FBSzdCLEVBQUlYLEtBQUthLGFBQWUsR0FBS2IsS0FBS1csRUFBSVgsS0FBS2EsYUFBZSxHQUM1RSxPQUFPZSxLQUFLZSxLQUFLdkYsRUFBSUEsRUFBSXNGLEVBQUlBLE1BR2pDcEQsSUFBSyxnQ0FDTHBCLE1BQU8sV0FDQzhCLEtBQUtTLEVBQUksRUFBSVQsS0FBS2EsYUFDbEJiLEtBQUtTLEVBQUlULEtBQUtDLGVBQ1BELEtBQUtTLEVBQUlULEtBQUtDLGVBQ3JCRCxLQUFLUyxFQUFJLEVBQ0ZULEtBQUtXLEVBQUksRUFBSVgsS0FBS2EsYUFDekJiLEtBQUtXLEVBQUlYLEtBQUtJLGdCQUNQSixLQUFLVyxFQUFJWCxLQUFLSSxrQkFDckJKLEtBQUtXLEVBQUksTUFJakJyQixJQUFLLHVCQUNMcEIsTUFBTyxXQUNILElBQUkwRSxFQUFJNUMsS0FBS1ksOEJBRVRnQyxFQUFJNUMsS0FBS2EsYUFBZSxLQUFxQixhQUFkYixLQUFLNkMsT0FBd0I3QyxLQUFLTSxLQUM1RE4sS0FBS3dDLEtBQUtNLGFBQWE5QyxLQUFLK0Msc0JBQ2pDL0MsS0FBS00sS0FBTSxFQUNYTixLQUFLd0MsS0FBS00sYUFBYyxFQUN4QjlDLEtBQUt3QyxLQUFLUSxlQUFpQixJQUNwQkosRUFBSTVDLEtBQUthLGFBQWUsS0FBT2IsS0FBS3dDLEtBQUtNLFlBQWE5QyxLQUFLTSxLQUFNLEVBQWNzQyxFQUFJNUMsS0FBS2EsYUFBZSxNQUFRYixLQUFLTSxNQUFLTixLQUFLd0MsS0FBS1MsV0FBWSxNQUc5SjNELElBQUssdUNBQ0xwQixNQUFPLFdBQ0s4QixLQUFLWSw4QkFDZSxJQUFwQlosS0FBS2EsY0FDVGIsS0FBS2tELHFCQUliNUQsSUFBSyxzQkFDTHBCLE1BQU8sV0FDSCxJQUFJaUYsRUFBUW5ELEtBRVJvRCxFQUFPQyxZQUFZLGFBQ2pCRixFQUFNWCxLQUFLUSxjQUNURyxFQUFNWCxLQUFLUSxlQUFpQixJQUM1QkcsRUFBTVgsS0FBS00sYUFBYyxFQUN6QlEsY0FBY0YsS0FFbkIsUUFHUDlELElBQUssWUFDTHBCLE1BQU8sV0FDSCxJQUFJcUYsRUFBU3ZELEtBRVR3RCxFQUFRSCxZQUFZLFdBQ3BCRSxFQUFPRSxnQ0FDYSxVQUFoQkYsRUFBT1YsTUFDUFUsRUFBTzNELFNBQVM4RCxRQUFRSCxFQUFPakMsVUFBV2lDLEdBQzFDQSxFQUFPSSx1QkFDUEosRUFBT0sseUNBRVBMLEVBQU8zRCxTQUFTOEQsUUFBUUgsRUFBT2pDLFVBQVdpQyxHQUN0QixVQUFoQkEsRUFBT1YsTUFBa0JVLEVBQU9JLHdCQUV4Q0osRUFBT00sY0FBY0wsSUFDVCxFQUFieEQsS0FBSzhELFVBR1p4RSxJQUFLLHFCQUNMcEIsTUFBTyxXQUNILElBQUk2RixFQUFTL0QsS0FFYkEsS0FBS2dFLG1CQUFxQlgsWUFBWSxXQUNsQ1UsRUFBT0UsZ0JBQ0ssR0FBYmpFLEtBQUs4RCxVQUdaeEUsSUFBSyxnQkFDTHBCLE1BQU8sU0FBdUJzRixHQUNQLFVBQWR4RCxLQUFLNkMsTUFBa0MsVUFBZDdDLEtBQUs2QyxNQUFzQjdDLEtBQUt3QyxLQUFLUyxVQUcxQyxVQUFkakQsS0FBSzZDLE1BQXFCN0MsS0FBS2lELFlBQ3RDSyxjQUFjRSxHQUNkRixjQUFjdEQsS0FBS2dFLHNCQUpuQlYsY0FBY0UsR0FDZEYsY0FBY3RELEtBQUtnRSx5QkFReEJyRSxFQTNQRSxHQThQYmhDLEVBQVFRLFFBQVV3QixPQUVadUUsR0FBRyxTQUFTN0csRUFBUVUsRUFBT0osR0FDakMsYUFFQUssT0FBT0MsZUFBZU4sRUFBUyxjQUMzQk8sT0FBTyxJQUdYLElBTWdDaUcsRUFONUJyRixFQUFlLFdBQWMsU0FBU0MsRUFBaUJDLEVBQVFDLEdBQVMsSUFBSyxJQUFJM0IsRUFBSSxFQUFHQSxFQUFJMkIsRUFBTXBCLE9BQVFQLElBQUssQ0FBRSxJQUFJNEIsRUFBYUQsRUFBTTNCLEdBQUk0QixFQUFXQyxXQUFhRCxFQUFXQyxhQUFjLEVBQU9ELEVBQVdFLGNBQWUsRUFBVSxVQUFXRixJQUFZQSxFQUFXRyxVQUFXLEdBQU1yQixPQUFPQyxlQUFlZSxFQUFRRSxFQUFXSSxJQUFLSixJQUFpQixPQUFPLFNBQVVLLEVBQWFDLEVBQVlDLEdBQWlKLE9BQTlIRCxHQUFZVCxFQUFpQlEsRUFBWUcsVUFBV0YsR0FBaUJDLEdBQWFWLEVBQWlCUSxFQUFhRSxHQUFxQkYsR0FBN2dCLEdBRWY2RSxFQUFjL0csRUFBUSxpQkFFdEJnSCxHQUU0QkYsRUFGVUMsRUFFSUQsR0FBT0EsRUFBSUcsV0FBYUgsR0FBUWhHLFFBQVNnRyxJQVF2RixJQUFJSSxFQUFRLFNBQVVDLElBRnRCLFNBQW1CQyxFQUFVQyxHQUFjLEdBQTBCLG1CQUFmQSxHQUE0QyxPQUFmQSxFQUF1QixNQUFNLElBQUk1RSxVQUFVLGtFQUFvRTRFLEdBQWVELEVBQVMvRSxVQUFZMUIsT0FBTzJHLE9BQU9ELEdBQWNBLEVBQVdoRixXQUFha0YsYUFBZTFHLE1BQU91RyxFQUFVdEYsWUFBWSxFQUFPRSxVQUFVLEVBQU1ELGNBQWMsS0FBZXNGLElBQVkxRyxPQUFPNkcsZUFBaUI3RyxPQUFPNkcsZUFBZUosRUFBVUMsR0FBY0QsRUFBU0ssVUFBWUosR0FHN2RLLENBQVVSLEVBNkRaRixFQUFhbEcsU0EzRFgsU0FBU29HLEVBQU0zRSxJQVRuQixTQUF5QkMsRUFBVU4sR0FBZSxLQUFNTSxhQUFvQk4sR0FBZ0IsTUFBTSxJQUFJTyxVQUFVLHFDQVV4R0MsQ0FBZ0JDLEtBQU11RSxHQUV0QixJQUFJcEIsRUFWWixTQUFvQ1YsRUFBTTdFLEdBQVEsSUFBSzZFLEVBQVEsTUFBTSxJQUFJdUMsZUFBZSw2REFBZ0UsT0FBT3BILEdBQXlCLGlCQUFUQSxHQUFxQyxtQkFBVEEsRUFBOEI2RSxFQUFQN0UsRUFVOU1xSCxDQUEyQmpGLE1BQU91RSxFQUFNTyxXQUFhOUcsT0FBT2tILGVBQWVYLElBQVEzRyxLQUFLb0MsS0FBTUosSUFXMUcsT0FUQXVELEVBQU10QyxhQUFlc0MsRUFBTS9DLGdCQUFrQixHQUM3QytDLEVBQU0xQyxFQUFJbUIsS0FBS3VELE1BQU1oQyxFQUFNbEQsZUFBaUIsRUFBSWtELEVBQU10QyxhQUFlLEdBQ3JFc0MsRUFBTXhDLEVBQUlpQixLQUFLdUQsTUFBTWhDLEVBQU0vQyxnQkFBa0IsRUFBSStDLEVBQU10QyxhQUFlLEdBQ3RFc0MsRUFBTVcsTUFBUSxFQUNkWCxFQUFNTixLQUFPLFFBQ2JNLEVBQU1GLFdBQVksRUFDbEJFLEVBQU1MLGFBQWMsRUFDcEJLLEVBQU1ILGNBQWdCLEVBQ3RCRyxFQUFNaUMsT0FDQ2pDLEVBNENYLE9BekNBckUsRUFBYXlGLElBQ1RqRixJQUFLLE9BQ0xwQixNQUFPLFdBQ0g4QixLQUFLcUYsdUJBQ0xyRixLQUFLc0Ysd0JBQ0x0RixLQUFLdUYsa0JBQ0x2RixLQUFLd0Ysd0JBR1RsRyxJQUFLLGVBQ0xwQixNQUFPLFdBUUgsT0FBUThCLEtBQUtzQixXQUNULElBQUssY0FDTCxJQUFLLGlCQUNMLElBQUssa0JBQ0R0QixLQUFLUSxHQVhrQixJQVl2QixNQUNKLElBQUssV0FDTCxJQUFLLGtCQUNMLElBQUssbUJBQ0RSLEtBQUtRLEdBZm1CLEVBZ0J4QixNQUNKLElBQUssWUFDRFIsS0FBS1EsR0FqQmdCLElBa0JyQixNQUNKLElBQUssV0FDRFIsS0FBS1EsR0FuQmUsR0FzQjVCUixLQUFLTyxJQXJCZ0IsR0FzQmpCUCxLQUFLTyxJQXBCZSxNQW9CVVAsS0FBS08sR0FyQlosT0F5QjVCZ0UsRUE3REMsR0FnRVo1RyxFQUFRUSxRQUFVb0csSUFFZmtCLGdCQUFnQixJQUFJQyxHQUFHLFNBQVNySSxFQUFRVSxFQUFPSixHQUNsRCxhQUVBSyxPQUFPQyxlQUFlTixFQUFTLGNBQzNCTyxPQUFPLElBR1gsSUFNZ0NpRyxFQU41QnJGLEVBQWUsV0FBYyxTQUFTQyxFQUFpQkMsRUFBUUMsR0FBUyxJQUFLLElBQUkzQixFQUFJLEVBQUdBLEVBQUkyQixFQUFNcEIsT0FBUVAsSUFBSyxDQUFFLElBQUk0QixFQUFhRCxFQUFNM0IsR0FBSTRCLEVBQVdDLFdBQWFELEVBQVdDLGFBQWMsRUFBT0QsRUFBV0UsY0FBZSxFQUFVLFVBQVdGLElBQVlBLEVBQVdHLFVBQVcsR0FBTXJCLE9BQU9DLGVBQWVlLEVBQVFFLEVBQVdJLElBQUtKLElBQWlCLE9BQU8sU0FBVUssRUFBYUMsRUFBWUMsR0FBaUosT0FBOUhELEdBQVlULEVBQWlCUSxFQUFZRyxVQUFXRixHQUFpQkMsR0FBYVYsRUFBaUJRLEVBQWFFLEdBQXFCRixHQUE3Z0IsR0FFZjZFLEVBQWMvRyxFQUFRLGlCQUV0QmdILEdBRTRCRixFQUZVQyxFQUVJRCxHQUFPQSxFQUFJRyxXQUFhSCxHQUFRaEcsUUFBU2dHLElBUXZGLElBQUl3QixFQUFRLFNBQVVuQixJQUZ0QixTQUFtQkMsRUFBVUMsR0FBYyxHQUEwQixtQkFBZkEsR0FBNEMsT0FBZkEsRUFBdUIsTUFBTSxJQUFJNUUsVUFBVSxrRUFBb0U0RSxHQUFlRCxFQUFTL0UsVUFBWTFCLE9BQU8yRyxPQUFPRCxHQUFjQSxFQUFXaEYsV0FBYWtGLGFBQWUxRyxNQUFPdUcsRUFBVXRGLFlBQVksRUFBT0UsVUFBVSxFQUFNRCxjQUFjLEtBQWVzRixJQUFZMUcsT0FBTzZHLGVBQWlCN0csT0FBTzZHLGVBQWVKLEVBQVVDLEdBQWNELEVBQVNLLFVBQVlKLEdBRzdkSyxDQUFVWSxFQXdEWnRCLEVBQWFsRyxTQXREWCxTQUFTd0gsRUFBTW5ELEVBQU01QyxJQVR6QixTQUF5QkMsRUFBVU4sR0FBZSxLQUFNTSxhQUFvQk4sR0FBZ0IsTUFBTSxJQUFJTyxVQUFVLHFDQVV4R0MsQ0FBZ0JDLEtBQU0yRixHQUV0QixJQUFJeEMsRUFWWixTQUFvQ1YsRUFBTTdFLEdBQVEsSUFBSzZFLEVBQVEsTUFBTSxJQUFJdUMsZUFBZSw2REFBZ0UsT0FBT3BILEdBQXlCLGlCQUFUQSxHQUFxQyxtQkFBVEEsRUFBOEI2RSxFQUFQN0UsRUFVOU1xSCxDQUEyQmpGLE1BQU8yRixFQUFNYixXQUFhOUcsT0FBT2tILGVBQWVTLElBQVEvSCxLQUFLb0MsS0FBTUosSUFPMUcsT0FMQXVELEVBQU1YLEtBQU9BLEVBQ2JXLEVBQU10QyxhQUFlc0MsRUFBTS9DLGdCQUFrQixHQUM3QytDLEVBQU1XLE1BQVFYLEVBQU16QyxhQUFhLEVBQUcsSUFDcEN5QyxFQUFNTixLQUFPLFFBQ2JNLEVBQU1pQyxPQUNDakMsRUEyQ1gsT0F4Q0FyRSxFQUFhNkcsSUFDVHJHLElBQUssT0FDTHBCLE1BQU8sV0FDSDhCLEtBQUtjLHFCQUNMZCxLQUFLc0Ysd0JBQ0x0RixLQUFLd0Ysd0JBR1RsRyxJQUFLLGVBQ0xwQixNQUFPLFdBUUgsT0FBUThCLEtBQUtzQixXQUNULElBQUssY0FDTCxJQUFLLGlCQUNMLElBQUssa0JBQ0R0QixLQUFLUSxHQVhrQixJQVl2QixNQUNKLElBQUssV0FDTCxJQUFLLGtCQUNMLElBQUssbUJBQ0RSLEtBQUtRLEdBZm1CLEVBZ0J4QixNQUNKLElBQUssWUFDRFIsS0FBS1EsR0FqQmdCLEdBa0JyQixNQUNKLElBQUssV0FDRFIsS0FBS1EsR0FuQmUsR0FzQjVCUixLQUFLTyxJQXBCZ0IsR0FxQmpCUCxLQUFLTyxJQXBCZSxNQW9CVVAsS0FBS08sR0F0QlosT0EwQjVCb0YsRUF4REMsR0EyRFpoSSxFQUFRUSxRQUFVd0gsSUFFZkYsZ0JBQWdCLElBQUlHLEdBQUcsU0FBU3ZJLEVBQVFVLEVBQU9KLEdBQ2xELGFBRUFLLE9BQU9DLGVBQWVOLEVBQVMsY0FDM0JPLE9BQU8sSUFHWCxJQU1nQ2lHLEVBTjVCckYsRUFBZSxXQUFjLFNBQVNDLEVBQWlCQyxFQUFRQyxHQUFTLElBQUssSUFBSTNCLEVBQUksRUFBR0EsRUFBSTJCLEVBQU1wQixPQUFRUCxJQUFLLENBQUUsSUFBSTRCLEVBQWFELEVBQU0zQixHQUFJNEIsRUFBV0MsV0FBYUQsRUFBV0MsYUFBYyxFQUFPRCxFQUFXRSxjQUFlLEVBQVUsVUFBV0YsSUFBWUEsRUFBV0csVUFBVyxHQUFNckIsT0FBT0MsZUFBZWUsRUFBUUUsRUFBV0ksSUFBS0osSUFBaUIsT0FBTyxTQUFVSyxFQUFhQyxFQUFZQyxHQUFpSixPQUE5SEQsR0FBWVQsRUFBaUJRLEVBQVlHLFVBQVdGLEdBQWlCQyxHQUFhVixFQUFpQlEsRUFBYUUsR0FBcUJGLEdBQTdnQixHQUVmNkUsRUFBYy9HLEVBQVEsaUJBRXRCZ0gsR0FFNEJGLEVBRlVDLEVBRUlELEdBQU9BLEVBQUlHLFdBQWFILEdBQVFoRyxRQUFTZ0csSUFRdkYsSUFBSTBCLEVBQVEsU0FBVXJCLElBRnRCLFNBQW1CQyxFQUFVQyxHQUFjLEdBQTBCLG1CQUFmQSxHQUE0QyxPQUFmQSxFQUF1QixNQUFNLElBQUk1RSxVQUFVLGtFQUFvRTRFLEdBQWVELEVBQVMvRSxVQUFZMUIsT0FBTzJHLE9BQU9ELEdBQWNBLEVBQVdoRixXQUFha0YsYUFBZTFHLE1BQU91RyxFQUFVdEYsWUFBWSxFQUFPRSxVQUFVLEVBQU1ELGNBQWMsS0FBZXNGLElBQVkxRyxPQUFPNkcsZUFBaUI3RyxPQUFPNkcsZUFBZUosRUFBVUMsR0FBY0QsRUFBU0ssVUFBWUosR0FHN2RLLENBQVVjLEVBd0RaeEIsRUFBYWxHLFNBdERYLFNBQVMwSCxFQUFNckQsRUFBTTVDLElBVHpCLFNBQXlCQyxFQUFVTixHQUFlLEtBQU1NLGFBQW9CTixHQUFnQixNQUFNLElBQUlPLFVBQVUscUNBVXhHQyxDQUFnQkMsS0FBTTZGLEdBRXRCLElBQUkxQyxFQVZaLFNBQW9DVixFQUFNN0UsR0FBUSxJQUFLNkUsRUFBUSxNQUFNLElBQUl1QyxlQUFlLDZEQUFnRSxPQUFPcEgsR0FBeUIsaUJBQVRBLEdBQXFDLG1CQUFUQSxFQUE4QjZFLEVBQVA3RSxFQVU5TXFILENBQTJCakYsTUFBTzZGLEVBQU1mLFdBQWE5RyxPQUFPa0gsZUFBZVcsSUFBUWpJLEtBQUtvQyxLQUFNSixJQU8xRyxPQUxBdUQsRUFBTVgsS0FBT0EsRUFDYlcsRUFBTXRDLGFBQWVzQyxFQUFNL0MsZ0JBQWtCLEdBQzdDK0MsRUFBTVcsTUFBUVgsRUFBTXpDLGFBQWEsRUFBRyxJQUNwQ3lDLEVBQU1OLEtBQU8sUUFDYk0sRUFBTWlDLE9BQ0NqQyxFQTJDWCxPQXhDQXJFLEVBQWErRyxJQUNUdkcsSUFBSyxPQUNMcEIsTUFBTyxXQUNIOEIsS0FBS2MscUJBQ0xkLEtBQUtzRix3QkFDTHRGLEtBQUt3Rix3QkFHVGxHLElBQUssZUFDTHBCLE1BQU8sV0FRSCxPQUFROEIsS0FBS3NCLFdBQ1QsSUFBSyxjQUNMLElBQUssaUJBQ0wsSUFBSyxrQkFDRHRCLEtBQUtRLEdBWGtCLElBWXZCLE1BQ0osSUFBSyxXQUNMLElBQUssa0JBQ0wsSUFBSyxtQkFDRFIsS0FBS1EsR0FmbUIsRUFnQnhCLE1BQ0osSUFBSyxZQUNEUixLQUFLUSxHQWpCZ0IsSUFrQnJCLE1BQ0osSUFBSyxXQUNEUixLQUFLUSxHQW5CZSxHQXNCNUJSLEtBQUtPLElBcEJnQixJQXFCakJQLEtBQUtPLElBcEJlLE1Bb0JVUCxLQUFLTyxHQXRCWixPQTBCNUJzRixFQXhEQyxHQTJEWmxJLEVBQVFRLFFBQVUwSCxJQUVmSixnQkFBZ0IsSUFBSUssR0FBRyxTQUFTekksRUFBUVUsRUFBT0osR0FDbEQsYUFFQUssT0FBT0MsZUFBZU4sRUFBUyxjQUMzQk8sT0FBTyxJQUdYLElBTWdDaUcsRUFONUJyRixFQUFlLFdBQWMsU0FBU0MsRUFBaUJDLEVBQVFDLEdBQVMsSUFBSyxJQUFJM0IsRUFBSSxFQUFHQSxFQUFJMkIsRUFBTXBCLE9BQVFQLElBQUssQ0FBRSxJQUFJNEIsRUFBYUQsRUFBTTNCLEdBQUk0QixFQUFXQyxXQUFhRCxFQUFXQyxhQUFjLEVBQU9ELEVBQVdFLGNBQWUsRUFBVSxVQUFXRixJQUFZQSxFQUFXRyxVQUFXLEdBQU1yQixPQUFPQyxlQUFlZSxFQUFRRSxFQUFXSSxJQUFLSixJQUFpQixPQUFPLFNBQVVLLEVBQWFDLEVBQVlDLEdBQWlKLE9BQTlIRCxHQUFZVCxFQUFpQlEsRUFBWUcsVUFBV0YsR0FBaUJDLEdBQWFWLEVBQWlCUSxFQUFhRSxHQUFxQkYsR0FBN2dCLEdBRWY2RSxFQUFjL0csRUFBUSxpQkFFdEJnSCxHQUU0QkYsRUFGVUMsRUFFSUQsR0FBT0EsRUFBSUcsV0FBYUgsR0FBUWhHLFFBQVNnRyxJQVF2RixJQUFJNEIsRUFBVyxTQUFVdkIsSUFGekIsU0FBbUJDLEVBQVVDLEdBQWMsR0FBMEIsbUJBQWZBLEdBQTRDLE9BQWZBLEVBQXVCLE1BQU0sSUFBSTVFLFVBQVUsa0VBQW9FNEUsR0FBZUQsRUFBUy9FLFVBQVkxQixPQUFPMkcsT0FBT0QsR0FBY0EsRUFBV2hGLFdBQWFrRixhQUFlMUcsTUFBT3VHLEVBQVV0RixZQUFZLEVBQU9FLFVBQVUsRUFBTUQsY0FBYyxLQUFlc0YsSUFBWTFHLE9BQU82RyxlQUFpQjdHLE9BQU82RyxlQUFlSixFQUFVQyxHQUFjRCxFQUFTSyxVQUFZSixHQUc3ZEssQ0FBVWdCLEVBd0RaMUIsRUFBYWxHLFNBdERYLFNBQVM0SCxFQUFTdkQsRUFBTTVDLElBVDVCLFNBQXlCQyxFQUFVTixHQUFlLEtBQU1NLGFBQW9CTixHQUFnQixNQUFNLElBQUlPLFVBQVUscUNBVXhHQyxDQUFnQkMsS0FBTStGLEdBRXRCLElBQUk1QyxFQVZaLFNBQW9DVixFQUFNN0UsR0FBUSxJQUFLNkUsRUFBUSxNQUFNLElBQUl1QyxlQUFlLDZEQUFnRSxPQUFPcEgsR0FBeUIsaUJBQVRBLEdBQXFDLG1CQUFUQSxFQUE4QjZFLEVBQVA3RSxFQVU5TXFILENBQTJCakYsTUFBTytGLEVBQVNqQixXQUFhOUcsT0FBT2tILGVBQWVhLElBQVduSSxLQUFLb0MsS0FBTUosSUFPaEgsT0FMQXVELEVBQU1YLEtBQU9BLEVBQ2JXLEVBQU10QyxhQUFlc0MsRUFBTS9DLGdCQUFrQixHQUM3QytDLEVBQU1XLE1BQVFYLEVBQU16QyxhQUFhLEVBQUcsSUFDcEN5QyxFQUFNTixLQUFPLFdBQ2JNLEVBQU1pQyxPQUNDakMsRUEyQ1gsT0F4Q0FyRSxFQUFhaUgsSUFDVHpHLElBQUssT0FDTHBCLE1BQU8sV0FDSDhCLEtBQUtjLHFCQUNMZCxLQUFLc0Ysd0JBQ0x0RixLQUFLd0Ysd0JBR1RsRyxJQUFLLGVBQ0xwQixNQUFPLFdBUUgsT0FBUThCLEtBQUtzQixXQUNULElBQUssY0FDTCxJQUFLLGlCQUNMLElBQUssa0JBQ0R0QixLQUFLUSxHQVhrQixJQVl2QixNQUNKLElBQUssV0FDTCxJQUFLLGtCQUNMLElBQUssbUJBQ0RSLEtBQUtRLEdBZm1CLEVBZ0J4QixNQUNKLElBQUssWUFDRFIsS0FBS1EsR0FqQmdCLElBa0JyQixNQUNKLElBQUssV0FDRFIsS0FBS1EsR0FuQmUsR0FzQjVCUixLQUFLTyxJQXBCZ0IsR0FxQmpCUCxLQUFLTyxJQXBCZSxNQW9CVVAsS0FBS08sR0F0QlosT0EwQjVCd0YsRUF4REksR0EyRGZwSSxFQUFRUSxRQUFVNEgsSUFFZk4sZ0JBQWdCLElBQUlPLEdBQUcsU0FBUzNJLEVBQVFVLEVBQU9KLEdBQ2xELGFBRUFLLE9BQU9DLGVBQWVOLEVBQVMsY0FDM0JPLE9BQU8sSUFHWCxJQUFJWSxFQUFlLFdBQWMsU0FBU0MsRUFBaUJDLEVBQVFDLEdBQVMsSUFBSyxJQUFJM0IsRUFBSSxFQUFHQSxFQUFJMkIsRUFBTXBCLE9BQVFQLElBQUssQ0FBRSxJQUFJNEIsRUFBYUQsRUFBTTNCLEdBQUk0QixFQUFXQyxXQUFhRCxFQUFXQyxhQUFjLEVBQU9ELEVBQVdFLGNBQWUsRUFBVSxVQUFXRixJQUFZQSxFQUFXRyxVQUFXLEdBQU1yQixPQUFPQyxlQUFlZSxFQUFRRSxFQUFXSSxJQUFLSixJQUFpQixPQUFPLFNBQVVLLEVBQWFDLEVBQVlDLEdBQWlKLE9BQTlIRCxHQUFZVCxFQUFpQlEsRUFBWUcsVUFBV0YsR0FBaUJDLEdBQWFWLEVBQWlCUSxFQUFhRSxHQUFxQkYsR0FBN2dCLEdBSWYwRyxFQUFVQyxFQUZEN0ksRUFBUSx1QkFNakI4SSxFQUFTRCxFQUZEN0ksRUFBUSx1QkFNaEIrSSxFQUFTRixFQUZBN0ksRUFBUSx1QkFNakJnSixFQUFhSCxFQUZEN0ksRUFBUSwwQkFNcEJpSixFQUFhSixFQUZEN0ksRUFBUSwwQkFJeEIsU0FBUzZJLEVBQXVCL0IsR0FBTyxPQUFPQSxHQUFPQSxFQUFJRyxXQUFhSCxHQUFRaEcsUUFBU2dHLEdBSXZGLElBQUlvQyxFQUFXLFdBQ1gsU0FBU0EsRUFBU0MsRUFBU0MsSUFIL0IsU0FBeUI1RyxFQUFVTixHQUFlLEtBQU1NLGFBQW9CTixHQUFnQixNQUFNLElBQUlPLFVBQVUscUNBSXhHQyxDQUFnQkMsS0FBTXVHLEdBRXRCdkcsS0FBS3dHLFFBQVVBLEVBQ2Z4RyxLQUFLMEcsYUFBYyxFQUNuQjFHLEtBQUsyRyxVQUFZLEVBQ2pCM0csS0FBS0osU0FBVyxJQUFJMEcsRUFBV25JLFFBQzFCc0ksRUFRRXpHLEtBQUs0Ryx5QkFBeUJILElBUGpDekcsS0FBSzZHLE1BQVEsSUFBSVosRUFBUTlILFFBQVE2QixLQUFLSixVQUN0Q0ksS0FBSzhHLFlBQWMsSUFBSUMsS0FDdkIvRyxLQUFLeUcsV0FBYXpHLEtBQUs2RyxPQUN2QjdHLEtBQUtnSCxnQkFDTGhILEtBQUtpSCxzQkFDTGpILEtBQUtrSCxhQUNMbEgsS0FBS21ILGNBR1RuSCxLQUFLb0gsbUJBdU1ULE9BcE1BdEksRUFBYXlILElBQ1RqSCxJQUFLLDJCQUNMcEIsTUFBTyxTQUFrQ3VJLEdBQ3JDekcsS0FBS3lHLFVBQVlBLEVBQVV6RyxLQUFLMkcsVUFBWSxNQUdoRHJILElBQUssbUJBQ0xwQixNQUFPLFdBQ0g4QixLQUFLcUgsb0JBQXNCakosU0FBU0csY0FBYyxVQUNsRHlCLEtBQUtxSCxvQkFBb0I3SSxhQUFhLEtBQU0sUUFDNUN3QixLQUFLcUgsb0JBQW9CQyxPQUFTbEosU0FBUzhCLGdCQUFnQkcsYUFDM0RMLEtBQUtxSCxvQkFBb0JFLE1BQVFuSixTQUFTOEIsZ0JBQWdCQyxZQUMxREgsS0FBS3dILG9CQUdUbEksSUFBSyxpQkFDTHBCLE1BQU8sV0FDSCxJQUFJdUosRUFBTXpILEtBQUtxSCxvQkFBb0JLLFdBQVcsTUFDOUNELEVBQUlFLFVBQVUsRUFBRyxFQUFHM0gsS0FBS3FILG9CQUFvQkUsTUFBT3ZILEtBQUtxSCxvQkFBb0JDLFFBQzdFdEgsS0FBSzRILGNBQWNILEdBRW5CLElBQUssSUFEREksRUFBcUI3SCxLQUFLeUcsVUFBVTVJLE9BQy9CUCxFQUFJLEVBQUdBLEVBQUl1SyxJQUFzQnZLLEVBQ3RDMEMsS0FBSzhILGNBQWNMLEVBQUt6SCxLQUFLeUcsVUFBVW5KLElBRTNDMEMsS0FBS3dHLFFBQVE5SCxZQUFZc0IsS0FBS3FILHdCQUdsQy9ILElBQUssZ0JBQ0xwQixNQUFPLFNBQXVCdUosR0FDMUIsSUFBSU0sRUFBT04sRUFDWE0sRUFBS0MsWUFDTCxJQUFJQyxFQUFhN0osU0FBU0MsY0FBYyxlQUN4QzBKLEVBQUtHLFVBQVVELEVBQVksRUFBRyxFQUFHakksS0FBS3FILG9CQUFvQkUsTUFBT3ZILEtBQUtxSCxvQkFBb0JDLFdBRzlGaEksSUFBSyxnQkFDTHBCLE1BQU8sU0FBdUJ1SixFQUFLaEIsR0FDL0IsSUFBSWhHLEVBQUlnRyxFQUFVaEcsRUFDZEUsRUFBSThGLEVBQVU5RixFQUNkSixFQUFLLEVBQ0xDLEVBQUssRUFFTGlHLEVBQVVsRyxJQUFNLElBQUdBLEVBQUtrRyxFQUFVbEcsSUFDbENrRyxFQUFVakcsSUFBTSxJQUFHQSxFQUFLaUcsRUFBVWpHLElBRXRDLElBQUkySCxPQUFTLEVBQ1RDLE9BQVUsRUFDVkMsT0FBUyxFQUNUeEgsRUFBZTRGLEVBQVU1RixjQUFnQmIsS0FBS3FILG9CQUFvQkMsT0FBUyxHQUMvRSxPQUFRYixFQUFVNUQsTUFBUTRELEVBQVUzSixHQUNoQyxJQUFLLFFBQ0QySyxFQUFJTyxZQUNKRyxFQUFTLEtBQ1RDLEVBQVUsS0FDVkMsRUFBU2pLLFNBQVNDLGNBQWMsZUFDaENvSixFQUFJUyxVQUFVRyxFQUFROUgsRUFBSUMsRUFBSTJILEVBQVFDLEVBQVMzSCxFQUFHRSxFQUFHRSxFQUFjQSxHQUNuRSxNQUNKLElBQUssUUFDRDRHLEVBQUlPLFlBQ0pHLEVBQVMsS0FDVEMsRUFBVSxNQUNWQyxFQUFTakssU0FBU0MsY0FBYyxnQkFDaENvSixFQUFJUyxVQUFVRyxFQUFROUgsRUFBSUMsRUFBSTJILEVBQVFDLEVBQVMzSCxFQUFHRSxFQUFHRSxFQUFjQSxHQUNuRSxNQUNKLElBQUssUUFDRDRHLEVBQUlPLFlBQ0pHLEVBQVMsT0FDVEMsRUFBVSxNQUNWQyxFQUFTakssU0FBU0MsY0FBYyxnQkFDaEN3QyxFQUFlNEYsRUFBVTVGLGNBQWdCYixLQUFLcUgsb0JBQW9CQyxPQUFTLEdBQzNFRyxFQUFJUyxVQUFVRyxFQUFROUgsRUFBSUMsRUFBSTJILEVBQVFDLEVBQVMzSCxFQUFHRSxFQUFHRSxFQUFjQSxHQUNuRTRHLEVBQUlhLElBQUk3SCxFQUFJSSxFQUFlLEVBQUdGLEVBQUlFLEVBQWUsRUFBa0IsSUFBZkEsRUFBb0IsRUFBYSxFQUFWZSxLQUFLMkcsSUFDaEZkLEVBQUllLFNBQ0osTUFDSixJQUFLLFdBQ0RmLEVBQUlPLFlBQ0pHLEVBQVMsR0FDVEMsRUFBVSxHQUNWQyxFQUFTakssU0FBU0MsY0FBYyxzQkFDaENvSixFQUFJUyxVQUFVRyxFQUFROUgsRUFBSUMsRUFBSTJILEVBQVFDLEVBQVMzSCxFQUFHRSxFQUFHRSxFQUFjQSxPQUsvRXZCLElBQUssYUFDTHBCLE1BQU8sV0FDSCxJQUFJaUYsRUFBUW5ELEtBRVJ3RCxFQUFRSCxZQUFZLFdBQ2hCRixFQUFNdUQsYUFDTnZELEVBQU1zRixpQkFDSnRGLEVBQU13RCxXQUNBeEQsRUFBTTBELE1BQU01RCxXQUFXSyxjQUFjRSxJQUNsRCxRQUdQbEUsSUFBSywrQkFDTHBCLE1BQU8sV0FXSCxPQVZVOEIsS0FBS3lHLFVBQVVpQyxJQUFJLFNBQVVqQyxHQVFuQyxPQU5JaEcsRUFBR2dHLEVBQVVoRyxFQUNiRSxFQUFHOEYsRUFBVTlGLEVBQ2JKLEdBQUlrRyxFQUFVbEcsR0FDZEMsR0FBSWlHLEVBQVVqRyxHQUNkMUQsRUFBRzJKLEVBQVU1RCxXQU96QnZELElBQUssZUFDTHBCLE1BQU8sV0FDQzhCLEtBQUsyRyxVQUFZLEdBQU0sRUFBRzNHLEtBQUt5RyxVQUFVa0MsS0FBSyxJQUFJdkMsRUFBT2pJLFFBQVE2QixLQUFLNkcsTUFBTzdHLEtBQUtKLFdBQWdCSSxLQUFLeUcsVUFBVWtDLEtBQUssSUFBSXhDLEVBQU9oSSxRQUFRNkIsS0FBSzZHLE1BQU83RyxLQUFLSixXQUMxSkksS0FBSzJHLFVBQVksSUFBTyxHQUFHM0csS0FBS3lHLFVBQVVrQyxLQUFLLElBQUl0QyxFQUFXbEksUUFBUTZCLEtBQUs2RyxNQUFPN0csS0FBS0osY0FHL0ZOLElBQUssYUFDTHBCLE1BQU8sV0FDSCxJQUFJcUYsRUFBU3ZELEtBRVR3RCxFQUFRSCxZQUFZLFdBQ2hCRSxFQUFPc0QsTUFBTTVELFdBQ2JNLEVBQU9xRix1QkFDUHJGLEVBQU9pRSxpQkFDUGpFLEVBQU9zRixzQkFDQ3RGLEVBQU9zRCxNQUFNNUQsWUFDckJLLGNBQWNFLEdBQ2RELEVBQU91RixhQUVaLE9BR1B4SixJQUFLLHNCQUNMcEIsTUFBTyxXQUNILElBQUk2RixFQUFTL0QsS0FFVHdELEVBQVFILFlBQVksV0FDcEJVLEVBQU9pRCxhQUFhMkIsS0FBSzVFLEVBQU9nRixnQ0FDM0JoRixFQUFPOEMsTUFBTTVELFdBQVdLLGNBQWNFLElBQzVDLFFBR1BsRSxJQUFLLHVCQUNMcEIsTUFBTyxXQUNIOEIsS0FBS3lHLFVBQVl6RyxLQUFLeUcsVUFBVXVDLE9BQU8sU0FBVUMsR0FDN0MsT0FBeUIsSUFBbEJBLEVBQVUzSSxTQUl6QmhCLElBQUsscUJBQ0xwQixNQUFPLFdBQ0gsR0FBSThCLEtBQUs2RyxNQUFNN0QsY0FBZ0IsRUFBRyxDQUM5QixJQUFJQSxFQUFnQjVFLFNBQVNDLGNBQWMsa0JBQ3RDMkUsS0FDREEsRUFBZ0I1RSxTQUFTRyxjQUFjLE1BQ3pCQyxhQUFhLEtBQU0saUJBQ2pDSixTQUFTSyxLQUFLQyxZQUFZc0UsSUFFOUJBLEVBQWNwRSxVQUFZLG9DQUFrTG9CLEtBQUs2RyxNQUFNN0QsY0FBZ0IsY0FDcE8sQ0FDSCxJQUFJa0csRUFBaUI5SyxTQUFTQyxjQUFjLGtCQUN4QzZLLEdBQWdCQSxFQUFlQyxhQUkzQzdKLElBQUssV0FDTHBCLE1BQU8sV0FDSCxJQUNJa0wsRUFEYyxJQUFJckMsS0FDZS9HLEtBQUs4RyxZQUN0Q3VDLEVBQVcsSUFBSXRDLEtBQUtxQyxHQUNwQkUsRUFBVUQsRUFBU0UsYUFDbkJDLEVBQVVILEVBQVNJLGFBQ3ZCekosS0FBSzBHLGFBQWMsRUFDbkJnRCxXQUFXMUosS0FBSzJKLGdCQUFnQkwsRUFBU0UsR0FBVSxRQUd2RGxLLElBQUssa0JBQ0xwQixNQUFPLFNBQXlCb0wsRUFBU0UsR0FDckMsSUFBSUksRUFBYUMsT0FBTyw4QkFBK0IsU0FBVyxPQUU5REMsR0FBVUYsRUFBWU4sRUFBU0UsRUFEaEJ4SixLQUFLZ0gsY0FFeEIsR0FBSytDLGFBQXNCLFFBSXBCLENBQ0gsSUFBSUMsRUFBZ0JDLEtBQUtDLE1BQU1ILGFBQXNCLFNBQ3JEQyxFQUFjckIsS0FBS21CLEdBQ25CQyxhQUFzQixRQUFJRSxLQUFLRSxVQUFVSCxPQVBmLENBQzFCRCxhQUFzQixRQUFJLEdBQzFCLElBQUlLLEdBQWdCTixHQUNwQkMsYUFBc0IsUUFBSUUsS0FBS0UsVUFBVUMsR0FPN0NDLE9BQU9DLFNBQVNDLEtBQU8sU0FBV1gsRUFBYSxJQUFPTixFQUFVLElBQU1FLE1BSXZFakQsRUF6TkksR0E0TmY1SSxFQUFRUSxRQUFVb0ksSUFFZmlFLHdCQUF3QixHQUFHQyxxQkFBcUIsRUFBRUMscUJBQXFCLEVBQUVDLHFCQUFxQixFQUFFQyx3QkFBd0IsSUFBSUMsR0FBRyxTQUFTeE4sRUFBUVUsRUFBT0osR0FDMUosYUFFQUssT0FBT0MsZUFBZU4sRUFBUyxjQUMzQk8sT0FBTyxJQUdYLElBRUk0TSxFQUFXNUUsRUFGRDdJLEVBQVEsd0JBTWxCME4sRUFBYzdFLEVBRkQ3SSxFQUFRLGdCQU1yQjJOLEVBQWE5RSxFQUZEN0ksRUFBUSxlQU1wQjROLEVBQVkvRSxFQUZEN0ksRUFBUSxjQU1uQjZOLEVBQW1CaEYsRUFGRDdJLEVBQVEscUJBUTlCLFNBQVM2SSxFQUF1Qi9CLEdBQU8sT0FBT0EsR0FBT0EsRUFBSUcsV0FBYUgsR0FBUWhHLFFBQVNnRyxHQUV2RixJQUFJdkUsRUFBVyxJQUpFc0csRUFGRDdJLEVBQVEsMEJBTU1jLFNBRTlCa00sT0FBT2MsT0FBUyxXQUNDLElBQUlMLEVBQVMzTSxTQUN0QmlOLFNBQ0lDLEtBQU0sUUFDTkMsTUFBTyxHQUNQQyxRQUFTLFdBQ2dCbk4sU0FBU0MsY0FBYyxtQkFDN0JtTixNQUFNQyxRQUFVLFVBR25DSixLQUFNLE9BQ05DLE1BQU8sT0FDUEksY0FBZSxXQUVYLEdBRHFCdE4sU0FBUzhCLGdCQUFnQkMsWUFDekIsS0FBTSxDQUNGL0IsU0FBU0MsY0FBYyxtQkFDN0JtTixNQUFNQyxRQUFVLFVBR3ZDRixRQUFTLFdBQ0wsSUFBSUksRUFBV3ZOLFNBQVNDLGNBQWMsY0FDbEN1TixFQUFNeE4sU0FBU0MsY0FBYyxPQUNqQ3NOLEVBQVNILE1BQU1DLFFBQVUsT0FDekJHLEVBQUlKLE1BQU1DLFFBQVUsT0FDRnJOLFNBQVNDLGNBQWMsWUFDN0JtTixNQUFNQyxRQUFVLFFBQzVCLElBQUlqRixFQUFVcEksU0FBU0MsY0FBYyxZQUNyQyxJQUFJMk0sRUFBVzdNLFFBQVFxSSxJQUUzQnFGLFFBQVMsV0FDYXpOLFNBQVNDLGNBQWMsWUFDN0JtTixNQUFNQyxRQUFVLFVBR2hDSixLQUFNLFdBQ05DLE1BQU8sYUFDUEksY0FBZSxXQUNVdE4sU0FBU0MsY0FBYyxtQkFDN0JtTixNQUFNQyxRQUFVLE9BQ2hCck4sU0FBU0MsY0FBYyxjQUM3Qm1OLE1BQU1DLFFBQVUsUUFFN0JGLFFBQVMsU0FBaUJPLEdBQ3RCLElBQUloQyxFQUFTZ0MsRUFBV0MsTUFBTSxLQUMxQkMsRUFBWTVOLFNBQVNHLGNBQWMsTUFDdkN5TixFQUFVeE4sYUFBYSxLQUFNLGFBQzdCd04sRUFBVXBOLFVBQVlrTCxFQUFPLEdBQUssc0JBQXlGQSxFQUFPLEdBQ2xJMUwsU0FBU0ssS0FBS0MsWUFBWXNOLEdBQ2hCNU4sU0FBU0MsY0FBYyxPQUM3Qm1OLE1BQU1DLFFBQVUsU0FFeEJJLFFBQVMsV0FDV3pOLFNBQVNDLGNBQWMsY0FDN0JtTixNQUFNQyxRQUFVLFVBRzlCSixLQUFNLFVBQ05DLE1BQU8sVUFDUEksY0FBZSxXQUNVdE4sU0FBU0MsY0FBYyxtQkFDN0JtTixNQUFNQyxRQUFVLE9BQ2hCck4sU0FBU0MsY0FBYyxjQUM3Qm1OLE1BQU1DLFFBQVUsUUFFN0JGLFFBQVMsV0FDTCxJQUFJVSxFQUFlN04sU0FBU0MsY0FBYyxpQkFDMUMsSUFBSTRNLEVBQVU5TSxRQUFROE4sSUFFMUJKLFFBQVMsV0FDTHpOLFNBQVNDLGNBQWMsaUJBQWlCTyxVQUFZLE1BR3hEeU0sS0FBTSxlQUNOQyxNQUFPLG9CQUNQSSxjQUFlLFdBQ1V0TixTQUFTQyxjQUFjLG1CQUM3Qm1OLE1BQU1DLFFBQVUsT0FDaEJyTixTQUFTQyxjQUFjLGNBQzdCbU4sTUFBTUMsUUFBVSxRQUU3QkYsUUFBUyxTQUFpQlcsR0FDdEIsSUFBSWhCLEVBQWlCL00sUUFBUStOLElBRWpDTCxRQUFTLFdBQ0wsSUFBSU0sRUFBVy9OLFNBQVNDLGNBQWMsZ0JBQ3BCRCxTQUFTQyxjQUFjLGdCQUM3Qm1OLE1BQU1DLFFBQVUsT0FDNUJVLEVBQVNoRCxZQUdia0MsS0FBTSxTQUNOQyxNQUFPLFNBQ1BJLGNBQWUsV0FDVXROLFNBQVNDLGNBQWMsbUJBQzdCbU4sTUFBTUMsUUFBVSxPQUNoQnJOLFNBQVNDLGNBQWMsY0FDN0JtTixNQUFNQyxRQUFVLFFBRTdCRixRQUFTLFdBQ0wsSUFBSTVNLEVBQVdQLFNBQVNDLGNBQWMsYUFDakNNLEVBR0RBLEVBQVM2TSxNQUFNQyxRQUFVLFNBRnpCLEVBQUlWLEVBQVk1TSxZQUt4QjBOLFFBQVMsV0FDVXpOLFNBQVNDLGNBQWMsYUFDN0JtTixNQUFNQyxRQUFVLGFBTXpDOU4sRUFBUVEsUUFBVXlCLElBRWY0Syx3QkFBd0IsR0FBRzRCLHNCQUFzQixHQUFHQyxjQUFjLEVBQUVDLGFBQWEsRUFBRUMsbUJBQW1CLEVBQUVDLFlBQVksS0FBS0MsR0FBRyxTQUFTcFAsRUFBUVUsRUFBT0osR0FDdkosYUFFQUssT0FBT0MsZUFBZU4sRUFBUyxjQUMzQk8sT0FBTyxJQUdYLElBTWdDaUcsRUFONUJyRixFQUFlLFdBQWMsU0FBU0MsRUFBaUJDLEVBQVFDLEdBQVMsSUFBSyxJQUFJM0IsRUFBSSxFQUFHQSxFQUFJMkIsRUFBTXBCLE9BQVFQLElBQUssQ0FBRSxJQUFJNEIsRUFBYUQsRUFBTTNCLEdBQUk0QixFQUFXQyxXQUFhRCxFQUFXQyxhQUFjLEVBQU9ELEVBQVdFLGNBQWUsRUFBVSxVQUFXRixJQUFZQSxFQUFXRyxVQUFXLEdBQU1yQixPQUFPQyxlQUFlZSxFQUFRRSxFQUFXSSxJQUFLSixJQUFpQixPQUFPLFNBQVVLLEVBQWFDLEVBQVlDLEdBQWlKLE9BQTlIRCxHQUFZVCxFQUFpQlEsRUFBWUcsVUFBV0YsR0FBaUJDLEdBQWFWLEVBQWlCUSxFQUFhRSxHQUFxQkYsR0FBN2dCLEdBRWZtTixFQUFZclAsRUFBUSxjQUVwQjJOLEdBRTRCN0csRUFGUXVJLEVBRU12SSxHQUFPQSxFQUFJRyxXQUFhSCxHQUFRaEcsUUFBU2dHLElBSXZGLElBQUl3SSxFQUFpQixXQUNqQixTQUFTQSxFQUFlVCxJQUg1QixTQUF5QnJNLEVBQVVOLEdBQWUsS0FBTU0sYUFBb0JOLEdBQWdCLE1BQU0sSUFBSU8sVUFBVSxxQ0FJeEdDLENBQWdCQyxLQUFNMk0sR0FFdEIzTSxLQUFLNE0sY0FBZ0IzQyxLQUFLQyxNQUFNSCxhQUFzQixTQUFHbUMsR0FBTyxHQUNoRWxNLEtBQUs2TSxzQkFBd0J6TyxTQUFTRyxjQUFjLE9BQ3BEeUIsS0FBSzZNLHNCQUFzQnJPLGFBQWEsS0FBTSxlQUM5Q0osU0FBU0ssS0FBS0MsWUFBWXNCLEtBQUs2TSx1QkFDL0I3TSxLQUFLMEcsYUFBYyxFQUNuQjFHLEtBQUs4TSxlQTZIVCxPQTFIQWhPLEVBQWE2TixJQUNUck4sSUFBSyxlQUNMcEIsTUFBTyxXQUNIOEIsS0FBSytNLGlCQUNML00sS0FBS2dOLHlCQUNMaE4sS0FBS2lOLDRCQUdUM04sSUFBSyxpQkFDTHBCLE1BQU8sV0FDSCxJQUFJaU8sRUFBVy9OLFNBQVNDLGNBQWMsZ0JBQ3RDLEdBQUk4TixFQUNBQSxFQUFTWCxNQUFNQyxRQUFVLFlBQ3RCLENBQ0h6TCxLQUFLa04sWUFBYzlPLFNBQVNHLGNBQWMsT0FDMUN5QixLQUFLa04sWUFBWTFPLGFBQWEsS0FBTSxlQUNwQ0osU0FBU0ssS0FBS0MsWUFBWXNCLEtBQUtrTixhQUMvQixJQUFJQyxFQUF1Qi9PLFNBQVNHLGNBQWMsU0FDbEQ0TyxFQUFxQkMsVUFBWSxzQkFDakNELEVBQXFCM08sYUFBYSxLQUFNLHdCQUN4Q3dCLEtBQUtrTixZQUFZeE8sWUFBWXlPLEdBQzdCbk4sS0FBS3FOLGdCQUFrQnJOLEtBQUtzTixZQUFZSCxFQUFzQixrQkFBbUIsSUFDakZuTixLQUFLcU4sZ0JBQWdCN08sYUFBYSxRQUFTLE1BQzNDd0IsS0FBS3VOLGlCQUFtQnZOLEtBQUtzTixZQUFZdE4sS0FBS2tOLFlBQWEsbUJBQW9CbE4sS0FBSzRNLGNBQWMvTyxPQUFTLEdBQzNHbUMsS0FBS3dOLGlCQUFpQnhOLEtBQUtrTixhQUMzQmxOLEtBQUt5TiwyQkFJYm5PLElBQUssY0FDTHBCLE1BQU8sU0FBcUJzSSxFQUFTa0gsRUFBSUMsR0FDckMsSUFBSUMsRUFBUXhQLFNBQVNHLGNBQWMsU0FPbkMsT0FOQXFQLEVBQU1wUCxhQUFhLEtBQU1rUCxHQUN6QkUsRUFBTXBQLGFBQWEsT0FBUSxTQUMzQm9QLEVBQU1wUCxhQUFhLFFBQVMsS0FDNUJvUCxFQUFNcFAsYUFBYSxNQUFPLEtBQzFCb1AsRUFBTXBQLGFBQWEsTUFBT21QLEdBQzFCbkgsRUFBUTlILFlBQVlrUCxHQUNiQSxLQUdYdE8sSUFBSyxtQkFDTHBCLE1BQU8sV0FDSDhCLEtBQUs2TixXQUFhelAsU0FBU0csY0FBYyxTQUN6Q3lCLEtBQUs2TixXQUFXclAsYUFBYSxLQUFNLGNBQ25Dd0IsS0FBSzZOLFdBQVdyUCxhQUFhLE9BQVEsVUFDckN3QixLQUFLNk4sV0FBV3JQLGFBQWEsUUFBUyxRQUN0Q3dCLEtBQUtrTixZQUFZeE8sWUFBWXNCLEtBQUs2TixlQUd0Q3ZPLElBQUssdUJBQ0xwQixNQUFPLFdBQ0gsSUFBSTRQLEVBQTJCOU4sS0FBSytOLGtCQUFrQjlNLEtBQUtqQixNQUMzREEsS0FBSzZOLFdBQWF6UCxTQUFTQyxjQUFjLGVBQ3pDMkIsS0FBSzZOLFdBQVczTSxpQkFBaUIsUUFBUzRNLEdBRTFDLElBQUlFLEVBQXFCaE8sS0FBS2lPLFlBQVloTixLQUFLakIsTUFDL0NBLEtBQUtrTixZQUFZaE0saUJBQWlCLFNBQVU4TSxNQUdoRDFPLElBQUssY0FDTHBCLE1BQU8sU0FBcUJtRCxHQUN4QixJQUFJckMsRUFBU3FDLEVBQUdyQyxPQUNaQSxFQUFPa1AsUUFBUSxzQkFDZmxPLEtBQUttTyxTQUFTeEgsV0FBYTNILEVBQU9kLE1BQ2xDOEIsS0FBS21PLFNBQVN2SCx5QkFBeUI1RyxLQUFLNE0sZUFDNUM1TSxLQUFLbU8sU0FBUzNHLGtCQUNQeEksRUFBT2tQLFFBQVEscUJBQXVCbE8sS0FBSzRNLGNBQWMvTyxPQUFTLElBQU1tQyxLQUFLbU8sU0FBU3hILFlBQzdGM0csS0FBS29PLHVCQUNMcE8sS0FBS2lOLDZCQUliM04sSUFBSyxvQkFDTHBCLE1BQU8sU0FBMkJtRCxHQUM5QixJQUFJckMsRUFBU3FDLEVBQUdyQyxPQUNLLFNBQWpCQSxFQUFPZCxPQUNQYyxFQUFPZCxNQUFRLE9BQ2ZjLEVBQU93TSxNQUFNNkMsb0JBQXNCLElBQy9Cck8sS0FBS3dELE9BQU94RCxLQUFLb08sd0JBQ0csU0FBakJwUCxFQUFPZCxRQUNkYyxFQUFPZCxNQUFRLE9BQ2ZjLEVBQU93TSxNQUFNNkMsb0JBQXNCLE1BQzlCck8sS0FBS3dELE9BQU94RCxLQUFLaU4seUJBQ2xCak4sS0FBSzRNLGNBQWMvTyxPQUFTLElBQU1tQyxLQUFLbU8sU0FBU3hILFlBQ2hEM0csS0FBS3VOLGlCQUFpQnJQLE1BQVEsRUFDOUI4QixLQUFLbU8sU0FBU3hILFVBQVksT0FLdENySCxJQUFLLHlCQUNMcEIsTUFBTyxXQUNIOEIsS0FBS21PLFNBQVcsSUFBSW5ELEVBQVc3TSxRQUFRNkIsS0FBSzZNLHNCQUF1QjdNLEtBQUs0TSxrQkFHNUV0TixJQUFLLHlCQUNMcEIsTUFBTyxXQUNILElBQUlpRixFQUFRbkQsS0FFWkEsS0FBS3dELE1BQVFILFlBQVksYUFDbkJGLEVBQU1nTCxTQUFTeEgsV0FDWnhELEVBQU1vSyxpQkFBaUJyUCxPQUFVaUYsRUFBTWdMLFNBQVN4SCxVQUFZLElBQzdEeEQsRUFBTW9LLGlCQUFpQnJQLE1BQVFpRixFQUFNZ0wsU0FBU3hILFdBRWxEeEQsRUFBTWdMLFNBQVN2SCx5QkFBeUJ6RCxFQUFNeUosZUFDOUN6SixFQUFNZ0wsU0FBUzNHLGlCQUNYckUsRUFBTXlKLGNBQWMvTyxPQUFTLElBQU1zRixFQUFNZ0wsU0FBU3hILFlBQ2xEeEQsRUFBTTBLLFdBQVczUCxNQUFRLE9BQ3pCaUYsRUFBTTBLLFdBQVdyQyxNQUFNNkMsb0JBQXNCLElBQzdDbEwsRUFBTWlMLHlCQUVYcE8sS0FBS3FOLGdCQUFnQm5QLFVBRzVCb0IsSUFBSyx1QkFDTHBCLE1BQU8sV0FDSG9GLGNBQWN0RCxLQUFLd0QsT0FDbkJ4RCxLQUFLd0QsTUFBUSxNQUlkbUosRUF0SVUsR0F5SXJCaFAsRUFBUVEsUUFBVXdPLElBRWZMLGFBQWEsSUFBSWdDLElBQUksU0FBU2pSLEVBQVFVLEVBQU9KLEdBQ2hELGFBRUFLLE9BQU9DLGVBQWVOLEVBQVMsY0FDM0JPLE9BQU8sSUFHWCxJQUFJWSxFQUFlLFdBQWMsU0FBU0MsRUFBaUJDLEVBQVFDLEdBQVMsSUFBSyxJQUFJM0IsRUFBSSxFQUFHQSxFQUFJMkIsRUFBTXBCLE9BQVFQLElBQUssQ0FBRSxJQUFJNEIsRUFBYUQsRUFBTTNCLEdBQUk0QixFQUFXQyxXQUFhRCxFQUFXQyxhQUFjLEVBQU9ELEVBQVdFLGNBQWUsRUFBVSxVQUFXRixJQUFZQSxFQUFXRyxVQUFXLEdBQU1yQixPQUFPQyxlQUFlZSxFQUFRRSxFQUFXSSxJQUFLSixJQUFpQixPQUFPLFNBQVVLLEVBQWFDLEVBQVlDLEdBQWlKLE9BQTlIRCxHQUFZVCxFQUFpQlEsRUFBWUcsVUFBV0YsR0FBaUJDLEdBQWFWLEVBQWlCUSxFQUFhRSxHQUFxQkYsR0FBN2dCLEdBSW5CLElBQUlnUCxFQUFVLFdBQ1YsU0FBU0EsRUFBUXRDLElBSHJCLFNBQXlCcE0sRUFBVU4sR0FBZSxLQUFNTSxhQUFvQk4sR0FBZ0IsTUFBTSxJQUFJTyxVQUFVLHFDQUl4R0MsQ0FBZ0JDLEtBQU11TyxHQUV0QnZPLEtBQUtpTSxhQUFlQSxFQUNwQmpNLEtBQUt3TyxzQkFxQ1QsT0FsQ0ExUCxFQUFheVAsSUFDVGpQLElBQUssc0JBQ0xwQixNQUFPLFdBQ0g4QixLQUFLeU8sTUFBUXJRLFNBQVNHLGNBQWMsU0FDcEN5QixLQUFLeU8sTUFBTWpRLGFBQWEsS0FBTSxXQUM5QndCLEtBQUt5TyxNQUFNN1AsVUFBWSxrR0FDbkJtTCxhQUFzQixVQUN0Qi9KLEtBQUtvSyxhQUFlSCxLQUFLQyxNQUFNSCxhQUFzQixTQUNyRC9KLEtBQUswTyxrQkFJYnBQLElBQUssY0FDTHBCLE1BQU8sV0FDSCxJQUFLLElBQUlaLEVBQUksRUFBR0EsRUFBSTBDLEtBQUtvSyxhQUFhdk0sU0FBVVAsRUFBRyxDQUUvQyxJQUFLLElBRERxUixFQUFLdlEsU0FBU0csY0FBYyxNQUN2QnFRLEVBQUksRUFBR0EsRUFBSTVPLEtBQUtvSyxhQUFhOU0sR0FBR08sU0FBVStRLEVBQUcsQ0FDbEQsSUFBSUMsRUFBS3pRLFNBQVNHLGNBQWMsTUFDaEMsR0FBSXFRLElBQU01TyxLQUFLb0ssYUFBYTlNLEdBQUdPLE9BQVMsRUFBR2dSLEVBQUd6QixVQUFZcE4sS0FBS29LLGFBQWE5TSxHQUFHc1IsT0FBUSxDQUNuRixJQUFJRSxFQUFTMVEsU0FBU0csY0FBYyxLQUNwQ3VRLEVBQU90USxhQUFhLFFBQVMsb0JBQzdCc1EsRUFBT3RRLGFBQWEsT0FBUSxpQkFBbUJsQixHQUMvQ3dSLEVBQU8xQixVQUFZLE9BQ25CeUIsRUFBR25RLFlBQVlvUSxHQUVuQkgsRUFBR2pRLFlBQVltUSxHQUVuQjdPLEtBQUt5TyxNQUFNL1AsWUFBWWlRLEdBRTNCM08sS0FBS2lNLGFBQWFyTixVQUFZLEdBQzlCb0IsS0FBS2lNLGFBQWF2TixZQUFZc0IsS0FBS3lPLFdBSXBDRixFQTFDRyxHQTZDZDVRLEVBQVFRLFFBQVVvUSxPQUVaUSxJQUFJLFNBQVMxUixFQUFRVSxFQUFPSixHQUNsQyxhQUVBSyxPQUFPQyxlQUFlTixFQUFTLGNBQzNCTyxPQUFPLElBR1gsSUFBSVksRUFBZSxXQUFjLFNBQVNDLEVBQWlCQyxFQUFRQyxHQUFTLElBQUssSUFBSTNCLEVBQUksRUFBR0EsRUFBSTJCLEVBQU1wQixPQUFRUCxJQUFLLENBQUUsSUFBSTRCLEVBQWFELEVBQU0zQixHQUFJNEIsRUFBV0MsV0FBYUQsRUFBV0MsYUFBYyxFQUFPRCxFQUFXRSxjQUFlLEVBQVUsVUFBV0YsSUFBWUEsRUFBV0csVUFBVyxHQUFNckIsT0FBT0MsZUFBZWUsRUFBUUUsRUFBV0ksSUFBS0osSUFBaUIsT0FBTyxTQUFVSyxFQUFhQyxFQUFZQyxHQUFpSixPQUE5SEQsR0FBWVQsRUFBaUJRLEVBQVlHLFVBQVdGLEdBQWlCQyxHQUFhVixFQUFpQlEsRUFBYUUsR0FBcUJGLEdBQTdnQixHQUluQixJQUFJeVAsRUFBVyxXQUNYLFNBQVNBLEtBSGIsU0FBeUJuUCxFQUFVTixHQUFlLEtBQU1NLGFBQW9CTixHQUFnQixNQUFNLElBQUlPLFVBQVUscUNBSXhHQyxDQUFnQkMsS0FBTWdQLEdBRXRCaFAsS0FBS2lQLGFBOENULE9BM0NBblEsRUFBYWtRLElBQ1QxUCxJQUFLLEtBQ0xwQixNQUFPLFNBQVltTixFQUFNNkQsR0FDckJsUCxLQUFLaVAsVUFBVTVELEdBQVFyTCxLQUFLaVAsVUFBVTVELE9BQ3RDckwsS0FBS2lQLFVBQVU1RCxHQUFNMUMsS0FBS3VHLE1BRzlCNVAsSUFBSyxVQUNMcEIsTUFBTyxTQUFpQm1OLEdBQ3BCLElBQUssSUFBSThELEVBQU9DLFVBQVV2UixPQUFRd1IsRUFBT0MsTUFBTUgsRUFBTyxFQUFJQSxFQUFPLEVBQUksR0FBSUksRUFBTyxFQUFHQSxFQUFPSixFQUFNSSxJQUM1RkYsRUFBS0UsRUFBTyxHQUFLSCxVQUFVRyxHQUczQnZQLEtBQUtpUCxVQUFVNUQsSUFDZnJMLEtBQUtpUCxVQUFVNUQsR0FBTW1FLFFBQVEsU0FBVU4sR0FDbkMsT0FBT0EsRUFBR08sV0FBTUMsRUFBV0wsUUFLdkMvUCxJQUFLLE1BQ0xwQixNQUFPLFNBQWFtTixFQUFNNkQsR0FDakJBLEVBR0RsUCxLQUFLaVAsVUFBVTVELEdBQVFyTCxLQUFLaVAsVUFBVTVELEdBQU1yQyxPQUFPLFNBQVUyRyxHQUN6RCxRQUFTVCxJQUFPUyxZQUhiM1AsS0FBS2lQLFVBQVU1RCxNQVE5Qi9MLElBQUssT0FDTHBCLE1BQU8sU0FBY21OLEVBQU02RCxHQUN2QmxQLEtBQUsrQixHQUFHc0osRUFHUixXQUNJNkQsRUFBR08sV0FBTUMsRUFBV04sa0JBQ2IzTSxFQUFLd00sVUFBVTVELEtBSjFCLElBQUk1SSxFQUFPekMsU0FTWmdQLEVBbERJLEdBcURmclIsRUFBUVEsUUFBVTZRLE9BRVpZLElBQUksU0FBU3ZTLEVBQVFVLEVBQU9KLEdBQ2xDLGFBRUFLLE9BQU9DLGVBQWVOLEVBQVMsY0FDM0JPLE9BQU8sSUFHWCxJQUFJWSxFQUFlLFdBQWMsU0FBU0MsRUFBaUJDLEVBQVFDLEdBQVMsSUFBSyxJQUFJM0IsRUFBSSxFQUFHQSxFQUFJMkIsRUFBTXBCLE9BQVFQLElBQUssQ0FBRSxJQUFJNEIsRUFBYUQsRUFBTTNCLEdBQUk0QixFQUFXQyxXQUFhRCxFQUFXQyxhQUFjLEVBQU9ELEVBQVdFLGNBQWUsRUFBVSxVQUFXRixJQUFZQSxFQUFXRyxVQUFXLEdBQU1yQixPQUFPQyxlQUFlZSxFQUFRRSxFQUFXSSxJQUFLSixJQUFpQixPQUFPLFNBQVVLLEVBQWFDLEVBQVlDLEdBQWlKLE9BQTlIRCxHQUFZVCxFQUFpQlEsRUFBWUcsVUFBV0YsR0FBaUJDLEdBQWFWLEVBQWlCUSxFQUFhRSxHQUFxQkYsR0FBN2dCLEdBSW5CLElBQUlzUSxFQUFTLFdBQ1QsU0FBU0EsSUFDTCxJQUFJMU0sRUFBUW5ELEtBRVI4UCxFQUFVVixVQUFVdlIsT0FBUyxRQUFzQjZSLElBQWpCTixVQUFVLEdBQW1CQSxVQUFVLE9BTnJGLFNBQXlCdlAsRUFBVU4sR0FBZSxLQUFNTSxhQUFvQk4sR0FBZ0IsTUFBTSxJQUFJTyxVQUFVLHFDQVF4R0MsQ0FBZ0JDLEtBQU02UCxHQUV0QjdQLEtBQUtvTCxPQUFTMEUsRUFBUTFFLE9BQ3RCZixPQUFPbkosaUJBQWlCLGFBQWMsV0FDbEMsT0FBT2lDLEVBQU00TSxVQUFVMUYsT0FBT0MsU0FBU0MsUUFFM0N2SyxLQUFLK1AsVUFBVTFGLE9BQU9DLFNBQVNDLE1Bb0VuQyxPQWpFQXpMLEVBQWErUSxJQUNUdlEsSUFBSyxlQUNMcEIsTUFBTyxTQUFzQnFNLEdBQ3pCLElBQUl5RixPQUFRLEVBQ1J2TixFQUFPekMsS0FDWCxHQUFLQSxLQUFLb0wsT0FFSCxPQUEyQixJQUF2QnBMLEtBQUtvTCxPQUFPdk4sT0FDWm1DLEtBQUtpUSxVQUFVMUYsRUFBTXZLLEtBQUtvTCxPQUFPLEtBRXhDcEwsS0FBS29MLE9BQU9vRSxRQUFRLFNBQVVVLEdBQzFCLEdBQUl6TixFQUFLd04sVUFBVTFGLEVBQU0yRixHQUNyQixPQUFPRixFQUFRRSxJQUlwQkYsTUFHWDFRLElBQUssWUFDTHBCLE1BQU8sU0FBbUJxTSxFQUFNNEYsR0FDNUIsR0FBMEIsaUJBQWZBLEVBQUs3RSxPQUFzQmYsSUFBUzRGLEVBQUs3RSxPQUErQixtQkFBZjZFLEVBQUs3RSxPQUF3QjZFLEVBQUs3RSxNQUFNZixJQUFTNEYsRUFBSzdFLGlCQUFpQjhFLFFBQVU3RixFQUFLZSxNQUFNNkUsRUFBSzdFLE9BQ2pLLE9BQU82RSxLQUlmN1EsSUFBSyxZQUNMcEIsTUFBTyxTQUFtQnFNLEdBQ3RCLElBQUloSCxFQUFTdkQsS0FFYnVLLEVBQU9BLEVBQUs4RixNQUFNLEdBQ2xCLElBQUlDLEVBQVd0USxLQUFLdVEsWUFDaEJDLEVBQVd4USxLQUFLeVEsYUFBYWxHLEdBRTVCaUcsSUFFZ0MsaUJBQW5CQSxFQUFTbEYsTUFDdkJ0TCxLQUFLMFEsWUFBY0YsRUFBU2xGLE1BQ3JCa0YsRUFBU2xGLGlCQUFpQjhFLE9BQ2pDcFEsS0FBSzBRLFlBQWNuRyxFQUFLZSxNQUFNa0YsRUFBU2xGLE9BQU8sR0FDYixtQkFBbkJrRixFQUFTbEYsUUFDdkJ0TCxLQUFLMFEsWUFBY0YsRUFBU2xGLE1BQU1mLElBR3RDb0csUUFBUUMsVUFBVUMsS0FBSyxXQUNmUCxHQUFZQSxFQUFTekUsVUFDckJ0SSxFQUFPdU4sZUFBaUJSLEVBQVN6RSxRQUFRdEksRUFBT3VOLGdCQUFrQlIsRUFBU3pFLGFBRWhGZ0YsS0FBSyxXQUNBTCxHQUFZQSxFQUFTOUUsZ0JBQ3JCbkksRUFBT21OLFlBQWNGLEVBQVM5RSxjQUFjbkksRUFBT21OLGFBQWVGLEVBQVM5RSxtQkFFaEZtRixLQUFLLFdBQ0FMLEdBQVlBLEVBQVNqRixVQUNyQmhJLEVBQU9tTixZQUFjRixFQUFTakYsUUFBUWhJLEVBQU9tTixhQUFlRixFQUFTakYsYUFFMUVzRixLQUFLLFdBQ0p0TixFQUFPZ04sWUFBY0MsRUFDckJqTixFQUFPdU4sZUFBaUJ2TixFQUFPbU4sY0FDaENLLE1BQU0sU0FBVUMsR0FDZkMsUUFBUUMsSUFBSUYsVUFLakJuQixFQWhGRSxHQW1GYmxTLEVBQVFRLFFBQVUwUixZQUVQIiwiZmlsZSI6Im1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5mdW5jdGlvbiBhZGRBYm91dCgpIHtcbiAgICB2YXIgYWJvdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Fib3V0RGl2XCIpO1xuICAgIGlmICghYWJvdXQpIHtcbiAgICAgICAgdmFyIF9hYm91dERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIF9hYm91dERpdi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImFib3V0RGl2XCIpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKF9hYm91dERpdik7XG4gICAgfVxuXG4gICAgYWJvdXREaXYuaW5uZXJIVE1MID0gXCI8cD5cXHUwNDEwXFx1MDQ0MFxcdTA0M0FcXHUwNDM0XFx1MDQzRFxcdTA0MzBcXHUwNDRGIFxcdTA0MzhcXHUwNDMzXFx1MDQ0MFxcdTA0MzAgXFx1MDQzMVxcdTA0NEJcXHUwNDNCXFx1MDQzMCBcXHUwNDQxXFx1MDQzRVxcdTA0MzdcXHUwNDM0XFx1MDQzMFxcdTA0M0RcXHUwNDMwIFxcdTA0MUFcXHUwNDQzXFx1MDQzQlxcdTA0MzVcXHUwNDQ4XFx1MDQzRVxcdTA0MzJcXHUwNDRCXFx1MDQzQyBcXHUwNDEyXFx1MDQzQlxcdTA0MzBcXHUwNDM0XFx1MDQzOFxcdTA0M0NcXHUwNDM4XFx1MDQ0MFxcdTA0M0VcXHUwNDNDPC9wPlxcbjxwPjxhIGhyZWY9J2h0dHBzOi8vdmsuY29tL3Z2a3VsZXNob3YnIHRhcmdldD0nX2JsYW5rJz5cXHUwNDEyXFx1MDQxQVxcdTA0M0VcXHUwNDNEXFx1MDQ0MlxcdTA0MzBcXHUwNDNBXFx1MDQ0MlxcdTA0MzU8L2E+PC9wPlxcbjxwPjxhIGhyZWY9J2h0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi92bGFkaW1pci1rdWxlc2hvdi0yNzMyNTcxMmEvJyB0YXJnZXQ9J19ibGFuayc+TGlua2VkSW48L2E+PC9wPlxcbjxwPlxcdTA0MThcXHUwNDMzXFx1MDQ0MFxcdTA0MzAgXFx1MDQzMVxcdTA0NEJcXHUwNDNCXFx1MDQzMCBcXHUwNDQxXFx1MDQzRVxcdTA0MzdcXHUwNDM0XFx1MDQzMFxcdTA0M0RcXHUwNDMwIFxcdTA0M0ZcXHUwNDNFIFxcdTA0MjJcXHUwNDE3IFxcdTA0M0VcXHUwNDNGXFx1MDQzOFxcdTA0NDFcXHUwNDMwXFx1MDQzRFxcdTA0M0RcXHUwNDNFXFx1MDQzQ1xcdTA0NDMgXFx1MDQ0MlxcdTA0NDNcXHUwNDQyOiA8YSBocmVmPSdodHRwczovL2dpdGh1Yi5jb20vdnZzY29kZS9qcy0tYmFzZS1jb3Vyc2UvdHJlZS9tYXN0ZXIvMDkvaHQnIHRhcmdldD0nX2JsYW5rJz5cXHUwNDIyXFx1MDQxNyBcXHUwNDM0XFx1MDQzQlxcdTA0NEYgXFx1MDQzOFxcdTA0MzNcXHUwNDQwXFx1MDQ0QjwvYT48L3A+XCI7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGFkZEFib3V0O1xuXG59LHt9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgUGVyc29uID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBlcnNvbihldmVudEJ1cykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGVyc29uKTtcblxuICAgICAgICB0aGlzLmNvbnRhaW5lcldpZHRoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICAgICAgICB0aGlzLmNvbnRhaW5lckhlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgIHRoaXMuZXZlbnRCdXMgPSBldmVudEJ1cztcbiAgICAgICAgdGhpcy5kaWUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zeCA9IDA7XG4gICAgICAgIHRoaXMuc3kgPSAwO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhQZXJzb24sIFt7XG4gICAgICAgIGtleTogJ3NldFJhbmRvbVBvc2l0aW9ucycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRSYW5kb21Qb3NpdGlvbnMoKSB7XG4gICAgICAgICAgICB0aGlzLnggPSB0aGlzLmdldFJhbmRvbUludCgwLCB0aGlzLmNvbnRhaW5lcldpZHRoKTtcbiAgICAgICAgICAgIHRoaXMueSA9IHRoaXMuZ2V0UmFuZG9tSW50KDAsIHRoaXMuY29udGFpbmVySGVpZ2h0KTtcblxuICAgICAgICAgICAgdmFyIGMgPSB0aGlzLmdldFJlc3VsdFB5dGhhZ29yZWFuVGhlb3JlbSgpO1xuICAgICAgICAgICAgaWYgKGMgPCB0aGlzLlNVQkpFQ1RfU0laRSAqIDUpIHRoaXMuc2V0UmFuZG9tUG9zaXRpb25zKCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3N1YnNjcmliZVRvTW92ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzdWJzY3JpYmVUb01vdmUoKSB7XG4gICAgICAgICAgICB2YXIgd3JhcHBlck1vdmVQZXJzb24gPSB0aGlzLm1vdmVQZXJzb24uYmluZCh0aGlzKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHdyYXBwZXJNb3ZlUGVyc29uKTtcbiAgICAgICAgICAgIHZhciB3cmFwcGVyTW92ZUNoYXJhY3Rlck9uTW9iaWxlID0gdGhpcy5tb3ZlQ2hhcmFjdGVyT25Nb2JpbGUuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2JpbGVDb250cm9scycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgd3JhcHBlck1vdmVDaGFyYWN0ZXJPbk1vYmlsZSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ21vdmVDaGFyYWN0ZXJPbk1vYmlsZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3ZlQ2hhcmFjdGVyT25Nb2JpbGUoZXYpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBldi50YXJnZXQ7XG4gICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IHRhcmdldC52YWx1ZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbW92ZVBlcnNvbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3ZlUGVyc29uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgVE9QX0FSUk9XX0tFWSA9IDM4O1xuICAgICAgICAgICAgdmFyIEJPVFRPTV9BUlJPV19LRVkgPSA0MDtcbiAgICAgICAgICAgIHZhciBSSUdIVF9BUlJPV19LRVkgPSAzOTtcbiAgICAgICAgICAgIHZhciBMRUZUX0FSUk9XX0tFWSA9IDM3O1xuICAgICAgICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBUT1BfQVJST1dfS0VZOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9ICdtb3ZlRm9yd2FyZCc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgQk9UVE9NX0FSUk9XX0tFWTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSAnYmFja3dhcmQnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFJJR0hUX0FSUk9XX0tFWTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSAnbW92ZVJpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBMRUZUX0FSUk9XX0tFWTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSAnbW92ZUxlZnQnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbW92ZUluUmFuZG9tRGlyZWN0aW9uJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdmVJblJhbmRvbURpcmVjdGlvbigpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5nZXRSYW5kb21JbnQoMSwgNCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uID0gJ21vdmVGb3J3YXJkJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9ICdiYWNrd2FyZCc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSAnbW92ZVJpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9ICdtb3ZlTGVmdCc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdGFydE1vdmUoKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0UmFuZG9tSW50JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJhbmRvbUludChtaW4sIG1heCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NldEV2ZW50QnVzRGlyZWN0aW9uJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEV2ZW50QnVzRGlyZWN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5ldmVudEJ1cy5vbignbW92ZVJpZ2h0QW5kRG93bicsIHRoaXMubW92ZVJpZ2h0QW5kRG93bik7XG4gICAgICAgICAgICB0aGlzLmV2ZW50QnVzLm9uKCdtb3ZlTGVmdEFuZERvd24nLCB0aGlzLm1vdmVMZWZ0QW5kRG93bik7XG4gICAgICAgICAgICB0aGlzLmV2ZW50QnVzLm9uKCdtb3ZlUmlnaHRBbmRBVXAnLCB0aGlzLm1vdmVSaWdodEFuZEFVcCk7XG4gICAgICAgICAgICB0aGlzLmV2ZW50QnVzLm9uKCdtb3ZlTGVmdEFuZEFVcCcsIHRoaXMubW92ZUxlZnRBbmRBVXApO1xuICAgICAgICAgICAgdGhpcy5ldmVudEJ1cy5vbignbW92ZUZvcndhcmQnLCB0aGlzLm1vdmVGb3J3YXJkKTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRCdXMub24oJ21vdmVSaWdodCcsIHRoaXMubW92ZVJpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRCdXMub24oJ21vdmVMZWZ0JywgdGhpcy5tb3ZlTGVmdCk7XG4gICAgICAgICAgICB0aGlzLmV2ZW50QnVzLm9uKCdiYWNrd2FyZCcsIHRoaXMuYmFja3dhcmQpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdwdXJzdWVDaGFyYWN0ZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHVyc3VlQ2hhcmFjdGVyKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJleS54ID4gdGhpcy54ICYmIHRoaXMucHJleS55ID4gdGhpcy55KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSAnbW92ZVJpZ2h0QW5kRG93bic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJleS54IDwgdGhpcy54ICYmIHRoaXMucHJleS55ID4gdGhpcy55KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSAnbW92ZUxlZnRBbmREb3duJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV5LnggPiB0aGlzLnggJiYgdGhpcy5wcmV5LnkgPCB0aGlzLnkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9ICdtb3ZlUmlnaHRBbmRBVXAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXkueCA8IHRoaXMueCAmJiB0aGlzLnByZXkueSA8IHRoaXMueSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uID0gJ21vdmVMZWZ0QW5kQVVwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV5LnggPCB0aGlzLngpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9ICdtb3ZlTGVmdCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJleS54ID4gdGhpcy54KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSAnbW92ZVJpZ2h0JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV5LnkgPiB0aGlzLnkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9ICdiYWNrd2FyZCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJleS55IDwgdGhpcy55KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSAnbW92ZUZvcndhcmQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdtb3ZlRm9yd2FyZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3ZlRm9yd2FyZChzZWxmKSB7XG4gICAgICAgICAgICBzZWxmLnkgPSBzZWxmLnkgLSAyO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdiYWNrd2FyZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBiYWNrd2FyZChzZWxmKSB7XG4gICAgICAgICAgICBzZWxmLnkgPSBzZWxmLnkgKyAyO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdtb3ZlUmlnaHQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZVJpZ2h0KHNlbGYpIHtcbiAgICAgICAgICAgIHNlbGYueCA9IHNlbGYueCArIDI7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ21vdmVMZWZ0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdmVMZWZ0KHNlbGYpIHtcbiAgICAgICAgICAgIHNlbGYueCA9IHNlbGYueCAtIDI7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ21vdmVMZWZ0QW5kQVVwJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdmVMZWZ0QW5kQVVwKHNlbGYpIHtcbiAgICAgICAgICAgIC0tc2VsZi54O1xuICAgICAgICAgICAgLS1zZWxmLnk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ21vdmVSaWdodEFuZEFVcCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3ZlUmlnaHRBbmRBVXAoc2VsZikge1xuICAgICAgICAgICAgKytzZWxmLng7XG4gICAgICAgICAgICAtLXNlbGYueTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbW92ZUxlZnRBbmREb3duJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdmVMZWZ0QW5kRG93bihzZWxmKSB7XG4gICAgICAgICAgICAtLXNlbGYueDtcbiAgICAgICAgICAgICsrc2VsZi55O1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdtb3ZlUmlnaHRBbmREb3duJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdmVSaWdodEFuZERvd24oc2VsZikge1xuICAgICAgICAgICAgKytzZWxmLng7XG4gICAgICAgICAgICArK3NlbGYueTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0UmVzdWx0UHl0aGFnb3JlYW5UaGVvcmVtJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlc3VsdFB5dGhhZ29yZWFuVGhlb3JlbSgpIHtcbiAgICAgICAgICAgIHZhciBhID0gdGhpcy5wcmV5LnggLSB0aGlzLlNVQkpFQ1RfU0laRSAvIDIgLSAodGhpcy54IC0gdGhpcy5TVUJKRUNUX1NJWkUgLyAyKTtcbiAgICAgICAgICAgIHZhciBiID0gdGhpcy5wcmV5LnkgLSB0aGlzLlNVQkpFQ1RfU0laRSAvIDIgLSAodGhpcy55IC0gdGhpcy5TVUJKRUNUX1NJWkUgLyAyKTtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NoZWNrT3V0VGhlRWRnZU9mVGhlQ2hhcmFjdGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoZWNrT3V0VGhlRWRnZU9mVGhlQ2hhcmFjdGVyKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMueCA8IDAgLSB0aGlzLlNVQkpFQ1RfU0laRSkge1xuICAgICAgICAgICAgICAgIHRoaXMueCA9IHRoaXMuY29udGFpbmVyV2lkdGg7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMueCA+IHRoaXMuY29udGFpbmVyV2lkdGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnggPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnkgPCAwIC0gdGhpcy5TVUJKRUNUX1NJWkUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnkgPSB0aGlzLmNvbnRhaW5lckhlaWdodDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy55ID4gdGhpcy5jb250YWluZXJIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnkgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjYXRjaFVwV2l0aFRoZVBsYXllcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjYXRjaFVwV2l0aFRoZVBsYXllcigpIHtcbiAgICAgICAgICAgIHZhciBjID0gdGhpcy5nZXRSZXN1bHRQeXRoYWdvcmVhblRoZW9yZW0oKTtcblxuICAgICAgICAgICAgaWYgKGMgPCB0aGlzLlNVQkpFQ1RfU0laRSAvIDEuNSAmJiB0aGlzLnR5cGUgPT09ICdtdXNocm9vbScgJiYgIXRoaXMuZGllKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnByZXkuYXRlTXVzaHJvb20pIHRoaXMucGxheWVyQ2F0Y2hNdXNocm9vbSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGllID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnByZXkuYXRlTXVzaHJvb20gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMucHJleS5tdXNocm9vbVRpbWVyICs9IDE1O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjIDwgdGhpcy5TVUJKRUNUX1NJWkUgLyAxLjUgJiYgdGhpcy5wcmV5LmF0ZU11c2hyb29tKSB0aGlzLmRpZSA9IHRydWU7ZWxzZSBpZiAoYyA8IHRoaXMuU1VCSkVDVF9TSVpFIC8gMS41ICYmICF0aGlzLmRpZSkgdGhpcy5wcmV5Lmh1bWFuTGlmZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjaGVja0ZvckNoYXJhY3Rlck9jY3VycmVuY2VzSW5SYWRpdXMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tGb3JDaGFyYWN0ZXJPY2N1cnJlbmNlc0luUmFkaXVzKCkge1xuICAgICAgICAgICAgdmFyIGMgPSB0aGlzLmdldFJlc3VsdFB5dGhhZ29yZWFuVGhlb3JlbSgpO1xuICAgICAgICAgICAgaWYgKGMgPCB0aGlzLlNVQkpFQ1RfU0laRSAqIDIuNykge1xuICAgICAgICAgICAgICAgIHRoaXMucHVyc3VlQ2hhcmFjdGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3BsYXllckNhdGNoTXVzaHJvb20nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcGxheWVyQ2F0Y2hNdXNocm9vbSgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciB0aW1lID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC0tX3RoaXMucHJleS5tdXNocm9vbVRpbWVyO1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcmV5Lm11c2hyb29tVGltZXIgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcmV5LmF0ZU11c2hyb29tID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3N0YXJ0TW92ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydE1vdmUoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIHRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzMi5jaGVja091dFRoZUVkZ2VPZlRoZUNoYXJhY3RlcigpO1xuICAgICAgICAgICAgICAgIGlmIChfdGhpczIudHlwZSA9PT0gJ2h1bnQyJykge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczIuZXZlbnRCdXMudHJpZ2dlcihfdGhpczIuZGlyZWN0aW9uLCBfdGhpczIpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpczIuY2F0Y2hVcFdpdGhUaGVQbGF5ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyLmNoZWNrRm9yQ2hhcmFjdGVyT2NjdXJyZW5jZXNJblJhZGl1cygpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzMi5ldmVudEJ1cy50cmlnZ2VyKF90aGlzMi5kaXJlY3Rpb24sIF90aGlzMik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczIudHlwZSAhPT0gJ2h1bWFuJykgX3RoaXMyLmNhdGNoVXBXaXRoVGhlUGxheWVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzMi5hYm9ydEludGVydmFsKHRpbWVyKTtcbiAgICAgICAgICAgIH0sIHRoaXMuc3BlZWQgKiA0KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc3RhcnRVcGRhdGVTcHJpdGVzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0VXBkYXRlU3ByaXRlcygpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNwcml0ZXNUaW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpczMudXBkYXRlU3ByaXRlKCk7XG4gICAgICAgICAgICB9LCB0aGlzLnNwZWVkICogMTgpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdhYm9ydEludGVydmFsJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFib3J0SW50ZXJ2YWwodGltZXIpIHtcbiAgICAgICAgICAgIGlmICgodGhpcy50eXBlID09PSAnaHVudDInIHx8IHRoaXMudHlwZSA9PT0gJ2h1bnQxJykgJiYgIXRoaXMucHJleS5odW1hbkxpZmUpIHtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMudXBkYXRlU3ByaXRlc1RpbWVyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50eXBlID09PSAnaHVtYW4nICYmICF0aGlzLmh1bWFuTGlmZSkge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy51cGRhdGVTcHJpdGVzVGltZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFBlcnNvbjtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUGVyc29uO1xuXG59LHt9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfY2hhcmFjdGVycyA9IHJlcXVpcmUoJy4uL2NoYXJhY3RlcnMnKTtcblxudmFyIF9jaGFyYWN0ZXJzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NoYXJhY3RlcnMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBIdW1hbiA9IGZ1bmN0aW9uIChfUGVyc29uKSB7XG4gICAgX2luaGVyaXRzKEh1bWFuLCBfUGVyc29uKTtcblxuICAgIGZ1bmN0aW9uIEh1bWFuKGV2ZW50QnVzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIdW1hbik7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEh1bWFuLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSHVtYW4pKS5jYWxsKHRoaXMsIGV2ZW50QnVzKSk7XG5cbiAgICAgICAgX3RoaXMuU1VCSkVDVF9TSVpFID0gX3RoaXMuY29udGFpbmVySGVpZ2h0IC8gMTU7XG4gICAgICAgIF90aGlzLnggPSBNYXRoLnJvdW5kKF90aGlzLmNvbnRhaW5lcldpZHRoIC8gMiAtIF90aGlzLlNVQkpFQ1RfU0laRSAvIDIpO1xuICAgICAgICBfdGhpcy55ID0gTWF0aC5yb3VuZChfdGhpcy5jb250YWluZXJIZWlnaHQgLyAyIC0gX3RoaXMuU1VCSkVDVF9TSVpFIC8gMik7XG4gICAgICAgIF90aGlzLnNwZWVkID0gNTtcbiAgICAgICAgX3RoaXMudHlwZSA9ICdodW1hbic7XG4gICAgICAgIF90aGlzLmh1bWFuTGlmZSA9IHRydWU7XG4gICAgICAgIF90aGlzLmF0ZU11c2hyb29tID0gZmFsc2U7XG4gICAgICAgIF90aGlzLm11c2hyb29tVGltZXIgPSAwO1xuICAgICAgICBfdGhpcy5pbml0KCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoSHVtYW4sIFt7XG4gICAgICAgIGtleTogJ2luaXQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RXZlbnRCdXNEaXJlY3Rpb24oKTtcbiAgICAgICAgICAgIHRoaXMubW92ZUluUmFuZG9tRGlyZWN0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZVRvTW92ZSgpO1xuICAgICAgICAgICAgdGhpcy5zdGFydFVwZGF0ZVNwcml0ZXMoKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAndXBkYXRlU3ByaXRlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVNwcml0ZSgpIHtcbiAgICAgICAgICAgIHZhciBNT1ZFX0ZPUldBUkRfU1BSSVRFX0xJTkUgPSAyMDc7XG4gICAgICAgICAgICB2YXIgTU9WRV9CQUNLV0FSRF9TUFJJVEVfTElORSA9IDA7XG4gICAgICAgICAgICB2YXIgTU9WRV9SSUdIVF9TUFJJVEVfTElORSA9IDEzODtcbiAgICAgICAgICAgIHZhciBNT1ZFX0xFRlRfU1BSSVRFX0xJTkUgPSA2OTtcbiAgICAgICAgICAgIHZhciBDSEFSQUNURVJfU1RFUCA9IDY0O1xuICAgICAgICAgICAgdmFyIEZJUlNUX0NIQVJBQ1RFUl9TVEVQID0gMDtcbiAgICAgICAgICAgIHZhciBFTkRfT0ZfVEhFX1NQUklURSA9IDI1MDtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdtb3ZlRm9yd2FyZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnbW92ZUxlZnRBbmRBVXAnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ21vdmVSaWdodEFuZEFVcCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3kgPSBNT1ZFX0ZPUldBUkRfU1BSSVRFX0xJTkU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2JhY2t3YXJkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdtb3ZlTGVmdEFuZERvd24nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ21vdmVSaWdodEFuZERvd24nOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN5ID0gTU9WRV9CQUNLV0FSRF9TUFJJVEVfTElORTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW92ZVJpZ2h0JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zeSA9IE1PVkVfUklHSFRfU1BSSVRFX0xJTkU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21vdmVMZWZ0JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zeSA9IE1PVkVfTEVGVF9TUFJJVEVfTElORTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnN4ICs9IENIQVJBQ1RFUl9TVEVQO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3ggPj0gRU5EX09GX1RIRV9TUFJJVEUpIHRoaXMuc3ggPSBGSVJTVF9DSEFSQUNURVJfU1RFUDtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBIdW1hbjtcbn0oX2NoYXJhY3RlcnMyLmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBIdW1hbjtcblxufSx7XCIuLi9jaGFyYWN0ZXJzXCI6Mn1dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9jaGFyYWN0ZXJzID0gcmVxdWlyZShcIi4uL2NoYXJhY3RlcnNcIik7XG5cbnZhciBfY2hhcmFjdGVyczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jaGFyYWN0ZXJzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgSHVudDEgPSBmdW5jdGlvbiAoX1BlcnNvbikge1xuICAgIF9pbmhlcml0cyhIdW50MSwgX1BlcnNvbik7XG5cbiAgICBmdW5jdGlvbiBIdW50MShwcmV5LCBldmVudEJ1cykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSHVudDEpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChIdW50MS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEh1bnQxKSkuY2FsbCh0aGlzLCBldmVudEJ1cykpO1xuXG4gICAgICAgIF90aGlzLnByZXkgPSBwcmV5O1xuICAgICAgICBfdGhpcy5TVUJKRUNUX1NJWkUgPSBfdGhpcy5jb250YWluZXJIZWlnaHQgLyAxNTtcbiAgICAgICAgX3RoaXMuc3BlZWQgPSBfdGhpcy5nZXRSYW5kb21JbnQoMywgMTApO1xuICAgICAgICBfdGhpcy50eXBlID0gXCJodW50MVwiO1xuICAgICAgICBfdGhpcy5pbml0KCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoSHVudDEsIFt7XG4gICAgICAgIGtleTogXCJpbml0XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAgICAgdGhpcy5zZXRSYW5kb21Qb3NpdGlvbnMoKTtcbiAgICAgICAgICAgIHRoaXMubW92ZUluUmFuZG9tRGlyZWN0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0VXBkYXRlU3ByaXRlcygpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwidXBkYXRlU3ByaXRlXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVTcHJpdGUoKSB7XG4gICAgICAgICAgICB2YXIgTU9WRV9GT1JXQVJEX1NQUklURV9MSU5FID0gMTQ1O1xuICAgICAgICAgICAgdmFyIE1PVkVfQkFDS1dBUkRfU1BSSVRFX0xJTkUgPSAwO1xuICAgICAgICAgICAgdmFyIE1PVkVfUklHSFRfU1BSSVRFX0xJTkUgPSA5NjtcbiAgICAgICAgICAgIHZhciBNT1ZFX0xFRlRfU1BSSVRFX0xJTkUgPSA0ODtcbiAgICAgICAgICAgIHZhciBGSVJTVF9DSEFSQUNURVJfU1RFUCA9IDA7XG4gICAgICAgICAgICB2YXIgQ0hBUkFDVEVSX1NURVAgPSA0NjtcbiAgICAgICAgICAgIHZhciBFTkRfT0ZfVEhFX1NQUklURSA9IDEzMDtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwibW92ZUZvcndhcmRcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwibW92ZUxlZnRBbmRBVXBcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwibW92ZVJpZ2h0QW5kQVVwXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3kgPSBNT1ZFX0ZPUldBUkRfU1BSSVRFX0xJTkU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJiYWNrd2FyZFwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJtb3ZlTGVmdEFuZERvd25cIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwibW92ZVJpZ2h0QW5kRG93blwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN5ID0gTU9WRV9CQUNLV0FSRF9TUFJJVEVfTElORTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1vdmVSaWdodFwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN5ID0gTU9WRV9SSUdIVF9TUFJJVEVfTElORTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1vdmVMZWZ0XCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3kgPSBNT1ZFX0xFRlRfU1BSSVRFX0xJTkU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zeCArPSBDSEFSQUNURVJfU1RFUDtcbiAgICAgICAgICAgIGlmICh0aGlzLnN4ID49IEVORF9PRl9USEVfU1BSSVRFKSB0aGlzLnN4ID0gRklSU1RfQ0hBUkFDVEVSX1NURVA7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gSHVudDE7XG59KF9jaGFyYWN0ZXJzMi5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gSHVudDE7XG5cbn0se1wiLi4vY2hhcmFjdGVyc1wiOjJ9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfY2hhcmFjdGVycyA9IHJlcXVpcmUoXCIuLi9jaGFyYWN0ZXJzXCIpO1xuXG52YXIgX2NoYXJhY3RlcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhcmFjdGVycyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEh1bnQyID0gZnVuY3Rpb24gKF9QZXJzb24pIHtcbiAgICBfaW5oZXJpdHMoSHVudDIsIF9QZXJzb24pO1xuXG4gICAgZnVuY3Rpb24gSHVudDIocHJleSwgZXZlbnRCdXMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEh1bnQyKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoSHVudDIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihIdW50MikpLmNhbGwodGhpcywgZXZlbnRCdXMpKTtcblxuICAgICAgICBfdGhpcy5wcmV5ID0gcHJleTtcbiAgICAgICAgX3RoaXMuU1VCSkVDVF9TSVpFID0gX3RoaXMuY29udGFpbmVySGVpZ2h0IC8gMTI7XG4gICAgICAgIF90aGlzLnNwZWVkID0gX3RoaXMuZ2V0UmFuZG9tSW50KDUsIDEyKTtcbiAgICAgICAgX3RoaXMudHlwZSA9IFwiaHVudDJcIjtcbiAgICAgICAgX3RoaXMuaW5pdCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEh1bnQyLCBbe1xuICAgICAgICBrZXk6IFwiaW5pdFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0UmFuZG9tUG9zaXRpb25zKCk7XG4gICAgICAgICAgICB0aGlzLm1vdmVJblJhbmRvbURpcmVjdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5zdGFydFVwZGF0ZVNwcml0ZXMoKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInVwZGF0ZVNwcml0ZVwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlU3ByaXRlKCkge1xuICAgICAgICAgICAgdmFyIE1PVkVfRk9SV0FSRF9TUFJJVEVfTElORSA9IDI4ODtcbiAgICAgICAgICAgIHZhciBNT1ZFX0JBQ0tXQVJEX1NQUklURV9MSU5FID0gMDtcbiAgICAgICAgICAgIHZhciBNT1ZFX1JJR0hUX1NQUklURV9MSU5FID0gMTkyO1xuICAgICAgICAgICAgdmFyIE1PVkVfTEVGVF9TUFJJVEVfTElORSA9IDk2O1xuICAgICAgICAgICAgdmFyIEZJUlNUX0NIQVJBQ1RFUl9TVEVQID0gMDtcbiAgICAgICAgICAgIHZhciBDSEFSQUNURVJfU1RFUCA9IDE0MztcbiAgICAgICAgICAgIHZhciBFTkRfT0ZfVEhFX1NQUklURSA9IDQyNTtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwibW92ZUZvcndhcmRcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwibW92ZUxlZnRBbmRBVXBcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwibW92ZVJpZ2h0QW5kQVVwXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3kgPSBNT1ZFX0ZPUldBUkRfU1BSSVRFX0xJTkU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJiYWNrd2FyZFwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJtb3ZlTGVmdEFuZERvd25cIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwibW92ZVJpZ2h0QW5kRG93blwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN5ID0gTU9WRV9CQUNLV0FSRF9TUFJJVEVfTElORTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1vdmVSaWdodFwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN5ID0gTU9WRV9SSUdIVF9TUFJJVEVfTElORTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1vdmVMZWZ0XCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3kgPSBNT1ZFX0xFRlRfU1BSSVRFX0xJTkU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zeCArPSBDSEFSQUNURVJfU1RFUDtcbiAgICAgICAgICAgIGlmICh0aGlzLnN4ID49IEVORF9PRl9USEVfU1BSSVRFKSB0aGlzLnN4ID0gRklSU1RfQ0hBUkFDVEVSX1NURVA7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gSHVudDI7XG59KF9jaGFyYWN0ZXJzMi5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gSHVudDI7XG5cbn0se1wiLi4vY2hhcmFjdGVyc1wiOjJ9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfY2hhcmFjdGVycyA9IHJlcXVpcmUoXCIuLi9jaGFyYWN0ZXJzXCIpO1xuXG52YXIgX2NoYXJhY3RlcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhcmFjdGVycyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIE11c2hyb29tID0gZnVuY3Rpb24gKF9QZXJzb24pIHtcbiAgICBfaW5oZXJpdHMoTXVzaHJvb20sIF9QZXJzb24pO1xuXG4gICAgZnVuY3Rpb24gTXVzaHJvb20ocHJleSwgZXZlbnRCdXMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE11c2hyb29tKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTXVzaHJvb20uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihNdXNocm9vbSkpLmNhbGwodGhpcywgZXZlbnRCdXMpKTtcblxuICAgICAgICBfdGhpcy5wcmV5ID0gcHJleTtcbiAgICAgICAgX3RoaXMuU1VCSkVDVF9TSVpFID0gX3RoaXMuY29udGFpbmVySGVpZ2h0IC8gMTU7XG4gICAgICAgIF90aGlzLnNwZWVkID0gX3RoaXMuZ2V0UmFuZG9tSW50KDcsIDE0KTtcbiAgICAgICAgX3RoaXMudHlwZSA9IFwibXVzaHJvb21cIjtcbiAgICAgICAgX3RoaXMuaW5pdCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKE11c2hyb29tLCBbe1xuICAgICAgICBrZXk6IFwiaW5pdFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0UmFuZG9tUG9zaXRpb25zKCk7XG4gICAgICAgICAgICB0aGlzLm1vdmVJblJhbmRvbURpcmVjdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5zdGFydFVwZGF0ZVNwcml0ZXMoKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInVwZGF0ZVNwcml0ZVwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlU3ByaXRlKCkge1xuICAgICAgICAgICAgdmFyIE1PVkVfRk9SV0FSRF9TUFJJVEVfTElORSA9IDE1MDtcbiAgICAgICAgICAgIHZhciBNT1ZFX0JBQ0tXQVJEX1NQUklURV9MSU5FID0gMDtcbiAgICAgICAgICAgIHZhciBNT1ZFX1JJR0hUX1NQUklURV9MSU5FID0gMTAwO1xuICAgICAgICAgICAgdmFyIE1PVkVfTEVGVF9TUFJJVEVfTElORSA9IDUwO1xuICAgICAgICAgICAgdmFyIEZJUlNUX0NIQVJBQ1RFUl9TVEVQID0gMDtcbiAgICAgICAgICAgIHZhciBDSEFSQUNURVJfU1RFUCA9IDUwO1xuICAgICAgICAgICAgdmFyIEVORF9PRl9USEVfU1BSSVRFID0gMTQwO1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJtb3ZlRm9yd2FyZFwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJtb3ZlTGVmdEFuZEFVcFwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJtb3ZlUmlnaHRBbmRBVXBcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zeSA9IE1PVkVfRk9SV0FSRF9TUFJJVEVfTElORTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImJhY2t3YXJkXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1vdmVMZWZ0QW5kRG93blwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJtb3ZlUmlnaHRBbmREb3duXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3kgPSBNT1ZFX0JBQ0tXQVJEX1NQUklURV9MSU5FO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibW92ZVJpZ2h0XCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3kgPSBNT1ZFX1JJR0hUX1NQUklURV9MSU5FO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibW92ZUxlZnRcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zeSA9IE1PVkVfTEVGVF9TUFJJVEVfTElORTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnN4ICs9IENIQVJBQ1RFUl9TVEVQO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3ggPj0gRU5EX09GX1RIRV9TUFJJVEUpIHRoaXMuc3ggPSBGSVJTVF9DSEFSQUNURVJfU1RFUDtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBNdXNocm9vbTtcbn0oX2NoYXJhY3RlcnMyLmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBNdXNocm9vbTtcblxufSx7XCIuLi9jaGFyYWN0ZXJzXCI6Mn1dLDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9IdW1hbiA9IHJlcXVpcmUoXCIuL2NoYXJhY3RlcnMvSHVtYW5cIik7XG5cbnZhciBfSHVtYW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSHVtYW4pO1xuXG52YXIgX0h1bnQgPSByZXF1aXJlKFwiLi9jaGFyYWN0ZXJzL0h1bnQxXCIpO1xuXG52YXIgX0h1bnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSHVudCk7XG5cbnZhciBfSHVudDMgPSByZXF1aXJlKFwiLi9jaGFyYWN0ZXJzL0h1bnQyXCIpO1xuXG52YXIgX0h1bnQ0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSHVudDMpO1xuXG52YXIgX011c2hyb29tID0gcmVxdWlyZShcIi4vY2hhcmFjdGVycy9NdXNocm9vbVwiKTtcblxudmFyIF9NdXNocm9vbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NdXNocm9vbSk7XG5cbnZhciBfZXZlbnRCdXMgPSByZXF1aXJlKFwiLi4vdXRpbGl0aWVzL2V2ZW50QnVzXCIpO1xuXG52YXIgX2V2ZW50QnVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V2ZW50QnVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEdhbWVBcmVhID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEdhbWVBcmVhKGNvbnRhaW4sIHBlcnNvbmFnZSkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgR2FtZUFyZWEpO1xuXG4gICAgICAgIHRoaXMuY29udGFpbiA9IGNvbnRhaW47XG4gICAgICAgIHRoaXMucGxheWluZ0dhbWUgPSB0cnVlO1xuICAgICAgICB0aGlzLmdhbWVTdGFnZSA9IDE7XG4gICAgICAgIHRoaXMuZXZlbnRCdXMgPSBuZXcgX2V2ZW50QnVzMi5kZWZhdWx0KCk7XG4gICAgICAgIGlmICghcGVyc29uYWdlKSB7XG4gICAgICAgICAgICB0aGlzLmh1bWFuID0gbmV3IF9IdW1hbjIuZGVmYXVsdCh0aGlzLmV2ZW50QnVzKTtcbiAgICAgICAgICAgIHRoaXMudGltZVRvU3RhcnQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5wZXJzb25hZ2UgPSBbdGhpcy5odW1hbl07XG4gICAgICAgICAgICB0aGlzLmhpc3RvcnlTdGFnZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5leHBvcnRDaGFyYWN0ZXJEYXRhKCk7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0VGltZXIoKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQXJlYSgpO1xuICAgICAgICB9IGVsc2UgdGhpcy5nZXRDdXJyZW50UGVyc29uYWdlQXJyYXkocGVyc29uYWdlKTtcblxuICAgICAgICB0aGlzLmNyZWF0ZUNhbnZhc0FyZWEoKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoR2FtZUFyZWEsIFt7XG4gICAgICAgIGtleTogXCJnZXRDdXJyZW50UGVyc29uYWdlQXJyYXlcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEN1cnJlbnRQZXJzb25hZ2VBcnJheShwZXJzb25hZ2UpIHtcbiAgICAgICAgICAgIHRoaXMucGVyc29uYWdlID0gcGVyc29uYWdlW3RoaXMuZ2FtZVN0YWdlIC0gMV07XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJjcmVhdGVDYW52YXNBcmVhXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVDYW52YXNBcmVhKCkge1xuICAgICAgICAgICAgdGhpcy5hcmNhZGVHYW1lQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgICAgIHRoaXMuYXJjYWRlR2FtZUNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImdhbWVcIik7XG4gICAgICAgICAgICB0aGlzLmFyY2FkZUdhbWVDb250YWluZXIuaGVpZ2h0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgIHRoaXMuYXJjYWRlR2FtZUNvbnRhaW5lci53aWR0aCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgIHRoaXMuZHJhd0NhbnZhc0FyZWEoKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImRyYXdDYW52YXNBcmVhXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3Q2FudmFzQXJlYSgpIHtcbiAgICAgICAgICAgIHZhciBjdHggPSB0aGlzLmFyY2FkZUdhbWVDb250YWluZXIuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5hcmNhZGVHYW1lQ29udGFpbmVyLndpZHRoLCB0aGlzLmFyY2FkZUdhbWVDb250YWluZXIuaGVpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMuZHJhd0dhbWVCb2FyZChjdHgpO1xuICAgICAgICAgICAgdmFyIG51bWJlck9mQ2hhcmFjdGVycyA9IHRoaXMucGVyc29uYWdlLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyT2ZDaGFyYWN0ZXJzOyArK2kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdQZXJzb25hZ2UoY3R4LCB0aGlzLnBlcnNvbmFnZVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW4uYXBwZW5kQ2hpbGQodGhpcy5hcmNhZGVHYW1lQ29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImRyYXdHYW1lQm9hcmRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdHYW1lQm9hcmQoY3R4KSB7XG4gICAgICAgICAgICB2YXIgY3R4MSA9IGN0eDtcbiAgICAgICAgICAgIGN0eDEuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICB2YXIgYmFja2dyb3VuZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNiYWNrZ3JvdW5kJyk7XG4gICAgICAgICAgICBjdHgxLmRyYXdJbWFnZShiYWNrZ3JvdW5kLCAwLCAwLCB0aGlzLmFyY2FkZUdhbWVDb250YWluZXIud2lkdGgsIHRoaXMuYXJjYWRlR2FtZUNvbnRhaW5lci5oZWlnaHQpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZHJhd1BlcnNvbmFnZVwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1BlcnNvbmFnZShjdHgsIHBlcnNvbmFnZSkge1xuICAgICAgICAgICAgdmFyIHggPSBwZXJzb25hZ2UueDtcbiAgICAgICAgICAgIHZhciB5ID0gcGVyc29uYWdlLnk7XG4gICAgICAgICAgICB2YXIgc3ggPSAwO1xuICAgICAgICAgICAgdmFyIHN5ID0gMDtcblxuICAgICAgICAgICAgaWYgKHBlcnNvbmFnZS5zeCA+PSAwKSBzeCA9IHBlcnNvbmFnZS5zeDtcbiAgICAgICAgICAgIGlmIChwZXJzb25hZ2Uuc3kgPj0gMCkgc3kgPSBwZXJzb25hZ2Uuc3k7XG5cbiAgICAgICAgICAgIHZhciBzV2lkdGggPSB2b2lkIDAsXG4gICAgICAgICAgICAgICAgc0hlaWdodCA9IHZvaWQgMCxcbiAgICAgICAgICAgICAgICBzcHJpdGUgPSB2b2lkIDA7XG4gICAgICAgICAgICB2YXIgU1VCSkVDVF9TSVpFID0gcGVyc29uYWdlLlNVQkpFQ1RfU0laRSB8fCB0aGlzLmFyY2FkZUdhbWVDb250YWluZXIuaGVpZ2h0IC8gMTU7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcnNvbmFnZS50eXBlIHx8IHBlcnNvbmFnZS50KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImh1bWFuXCI6XG4gICAgICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgc1dpZHRoID0gNjMuNTtcbiAgICAgICAgICAgICAgICAgICAgc0hlaWdodCA9IDY4LjU7XG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwZXJzb24taW1nJyk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2Uoc3ByaXRlLCBzeCwgc3ksIHNXaWR0aCwgc0hlaWdodCwgeCwgeSwgU1VCSkVDVF9TSVpFLCBTVUJKRUNUX1NJWkUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiaHVudDFcIjpcbiAgICAgICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICBzV2lkdGggPSA0NS43O1xuICAgICAgICAgICAgICAgICAgICBzSGVpZ2h0ID0gNDcuNzU7XG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNodW50ZXIxLWltZycpO1xuICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKHNwcml0ZSwgc3gsIHN5LCBzV2lkdGgsIHNIZWlnaHQsIHgsIHksIFNVQkpFQ1RfU0laRSwgU1VCSkVDVF9TSVpFKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImh1bnQyXCI6XG4gICAgICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgc1dpZHRoID0gMTQyLjMzO1xuICAgICAgICAgICAgICAgICAgICBzSGVpZ2h0ID0gOTUuNzU7XG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNodW50ZXIyLWltZycpO1xuICAgICAgICAgICAgICAgICAgICBTVUJKRUNUX1NJWkUgPSBwZXJzb25hZ2UuU1VCSkVDVF9TSVpFIHx8IHRoaXMuYXJjYWRlR2FtZUNvbnRhaW5lci5oZWlnaHQgLyAxMjtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShzcHJpdGUsIHN4LCBzeSwgc1dpZHRoLCBzSGVpZ2h0LCB4LCB5LCBTVUJKRUNUX1NJWkUsIFNVQkpFQ1RfU0laRSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5hcmMoeCArIFNVQkpFQ1RfU0laRSAvIDIsIHkgKyBTVUJKRUNUX1NJWkUgLyAyLCBTVUJKRUNUX1NJWkUgKiAyLjUsIDAsIE1hdGguUEkgKiAyKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibXVzaHJvb21cIjpcbiAgICAgICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICBzV2lkdGggPSA1MDtcbiAgICAgICAgICAgICAgICAgICAgc0hlaWdodCA9IDUwO1xuICAgICAgICAgICAgICAgICAgICBzcHJpdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGlueXNocm9vbW1lbi1pbWcnKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShzcHJpdGUsIHN4LCBzeSwgc1dpZHRoLCBzSGVpZ2h0LCB4LCB5LCBTVUJKRUNUX1NJWkUsIFNVQkpFQ1RfU0laRSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwic3RhcnRUaW1lclwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnRUaW1lcigpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciB0aW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMucGxheWluZ0dhbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYWRkTmV3SHVudGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICsrX3RoaXMuZ2FtZVN0YWdlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIV90aGlzLmh1bWFuLmh1bWFuTGlmZSkgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gICAgICAgICAgICB9LCA1MDAwKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImNyZWF0ZUNoYXJhY3RlckRhdGFGb3JFeHBvcnRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUNoYXJhY3RlckRhdGFGb3JFeHBvcnQoKSB7XG4gICAgICAgICAgICB2YXIgYXJyID0gdGhpcy5wZXJzb25hZ2UubWFwKGZ1bmN0aW9uIChwZXJzb25hZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0ge1xuICAgICAgICAgICAgICAgICAgICB4OiBwZXJzb25hZ2UueCxcbiAgICAgICAgICAgICAgICAgICAgeTogcGVyc29uYWdlLnksXG4gICAgICAgICAgICAgICAgICAgIHN4OiBwZXJzb25hZ2Uuc3gsXG4gICAgICAgICAgICAgICAgICAgIHN5OiBwZXJzb25hZ2Uuc3ksXG4gICAgICAgICAgICAgICAgICAgIHQ6IHBlcnNvbmFnZS50eXBlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiYWRkTmV3SHVudGVyXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGROZXdIdW50ZXIoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5nYW1lU3RhZ2UgJSA1ID09PSAwKSB0aGlzLnBlcnNvbmFnZS5wdXNoKG5ldyBfSHVudDQuZGVmYXVsdCh0aGlzLmh1bWFuLCB0aGlzLmV2ZW50QnVzKSk7ZWxzZSB0aGlzLnBlcnNvbmFnZS5wdXNoKG5ldyBfSHVudDIuZGVmYXVsdCh0aGlzLmh1bWFuLCB0aGlzLmV2ZW50QnVzKSk7XG4gICAgICAgICAgICBpZiAodGhpcy5nYW1lU3RhZ2UgJSAxMCA9PT0gMCkgdGhpcy5wZXJzb25hZ2UucHVzaChuZXcgX011c2hyb29tMi5kZWZhdWx0KHRoaXMuaHVtYW4sIHRoaXMuZXZlbnRCdXMpKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInVwZGF0ZUFyZWFcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUFyZWEoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIHRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpczIuaHVtYW4uaHVtYW5MaWZlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzMi5yZW1vdmVEZWFkQ2hhcmFjdGVycygpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpczIuZHJhd0NhbnZhc0FyZWEoKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyLmNoZWNrTXVzaHJvb21UaW1lcigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIV90aGlzMi5odW1hbi5odW1hbkxpZmUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzMi5nYW1lT3ZlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImV4cG9ydENoYXJhY3RlckRhdGFcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGV4cG9ydENoYXJhY3RlckRhdGEoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIHRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzMy5oaXN0b3J5U3RhZ2UucHVzaChfdGhpczMuY3JlYXRlQ2hhcmFjdGVyRGF0YUZvckV4cG9ydCgpKTtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzMy5odW1hbi5odW1hbkxpZmUpIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICAgICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInJlbW92ZURlYWRDaGFyYWN0ZXJzXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVEZWFkQ2hhcmFjdGVycygpIHtcbiAgICAgICAgICAgIHRoaXMucGVyc29uYWdlID0gdGhpcy5wZXJzb25hZ2UuZmlsdGVyKGZ1bmN0aW9uIChjaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hhcmFjdGVyLmRpZSA9PT0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImNoZWNrTXVzaHJvb21UaW1lclwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tNdXNocm9vbVRpbWVyKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaHVtYW4ubXVzaHJvb21UaW1lciA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgbXVzaHJvb21UaW1lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbXVzaHJvb21UaW1lclwiKTtcbiAgICAgICAgICAgICAgICBpZiAoIW11c2hyb29tVGltZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgbXVzaHJvb21UaW1lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICAgICAgICAgICAgICBtdXNocm9vbVRpbWVyLnNldEF0dHJpYnV0ZShcImlkXCIsIFwibXVzaHJvb21UaW1lclwiKTtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChtdXNocm9vbVRpbWVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbXVzaHJvb21UaW1lci5pbm5lckhUTUwgPSBcIlxcdTA0MTJcXHUwNDQwXFx1MDQzNVxcdTA0M0NcXHUwNDRGIFxcdTA0MzRcXHUwNDM1XFx1MDQzOVxcdTA0NDFcXHUwNDQyXFx1MDQzMlxcdTA0MzhcXHUwNDRGIFxcdTA0MzJcXHUwNDNFXFx1MDQzQlxcdTA0NDhcXHUwNDM1XFx1MDQzMVxcdTA0M0RcXHUwNDNFXFx1MDQzM1xcdTA0M0UgXFx1MDQzM1xcdTA0NDBcXHUwNDM4XFx1MDQzMVxcdTA0MzA6IFwiICsgdGhpcy5odW1hbi5tdXNocm9vbVRpbWVyICsgXCIgXFx1MDQ0MVxcdTA0MzVcXHUwNDNBXFx1MDQ0M1xcdTA0M0RcXHUwNDM0XCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBfbXVzaHJvb21UaW1lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbXVzaHJvb21UaW1lclwiKTtcbiAgICAgICAgICAgICAgICBpZiAoX211c2hyb29tVGltZXIpIF9tdXNocm9vbVRpbWVyLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZ2FtZU92ZXJcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdhbWVPdmVyKCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRJdGVtID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHZhciBkaWZmZXJlbmNlSW5UaW1lID0gY3VycmVudEl0ZW0gLSB0aGlzLnRpbWVUb1N0YXJ0O1xuICAgICAgICAgICAgdmFyIG92ZXJUaW1lID0gbmV3IERhdGUoZGlmZmVyZW5jZUluVGltZSk7XG4gICAgICAgICAgICB2YXIgbWludXRlcyA9IG92ZXJUaW1lLmdldE1pbnV0ZXMoKTtcbiAgICAgICAgICAgIHZhciBzZWNvbmRzID0gb3ZlclRpbWUuZ2V0U2Vjb25kcygpO1xuICAgICAgICAgICAgdGhpcy5wbGF5aW5nR2FtZSA9IGZhbHNlO1xuICAgICAgICAgICAgc2V0VGltZW91dCh0aGlzLndyaXRlRmluaXRlVGltZShtaW51dGVzLCBzZWNvbmRzKSwgMTAwKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcIndyaXRlRmluaXRlVGltZVwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGVGaW5pdGVUaW1lKG1pbnV0ZXMsIHNlY29uZHMpIHtcbiAgICAgICAgICAgIHZhciBwbGF5ZXJOYW1lID0gcHJvbXB0KFwi0JrQvtC90LXRhiDQuNCz0YDRiy4g0JLQstC10LTQuNGC0LUg0JLQsNGIINC90LjQulwiLCBcIlVzZXJcIikgfHwgXCJVc2VyXCI7XG4gICAgICAgICAgICB2YXIgaGlzdG9yeVN0YWdlID0gdGhpcy5oaXN0b3J5U3RhZ2U7XG4gICAgICAgICAgICB2YXIgcGxheWVyID0gW3BsYXllck5hbWUsIG1pbnV0ZXMsIHNlY29uZHMsIGhpc3RvcnlTdGFnZV07XG4gICAgICAgICAgICBpZiAoIWxvY2FsU3RvcmFnZVtcInBsYXllcnNcIl0pIHtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2VbXCJwbGF5ZXJzXCJdID0gXCJcIjtcbiAgICAgICAgICAgICAgICB2YXIgcGxheWVyc0FycmF5ID0gW3BsYXllcl07XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlW1wicGxheWVyc1wiXSA9IEpTT04uc3RyaW5naWZ5KHBsYXllcnNBcnJheSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBfcGxheWVyc0FycmF5ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2VbXCJwbGF5ZXJzXCJdKTtcbiAgICAgICAgICAgICAgICBfcGxheWVyc0FycmF5LnB1c2gocGxheWVyKTtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2VbXCJwbGF5ZXJzXCJdID0gSlNPTi5zdHJpbmdpZnkoX3BsYXllcnNBcnJheSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gXCJ0aGVFbmRcIiArIHBsYXllck5hbWUgKyBcIjtcIiArIChtaW51dGVzICsgXCI6XCIgKyBzZWNvbmRzKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBHYW1lQXJlYTtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gR2FtZUFyZWE7XG5cbn0se1wiLi4vdXRpbGl0aWVzL2V2ZW50QnVzXCI6MTEsXCIuL2NoYXJhY3RlcnMvSHVtYW5cIjozLFwiLi9jaGFyYWN0ZXJzL0h1bnQxXCI6NCxcIi4vY2hhcmFjdGVycy9IdW50MlwiOjUsXCIuL2NoYXJhY3RlcnMvTXVzaHJvb21cIjo2fV0sODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yb3V0ZXIgPSByZXF1aXJlKFwiLi4vdXRpbGl0aWVzL3JvdXRlclwiKTtcblxudmFyIF9yb3V0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcm91dGVyKTtcblxudmFyIF9hYm91dFBhZ2UgPSByZXF1aXJlKFwiLi9hYm91dFBhZ2VcIik7XG5cbnZhciBfYWJvdXRQYWdlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Fib3V0UGFnZSk7XG5cbnZhciBfZ2FtZUFyZWEgPSByZXF1aXJlKFwiLi9nYW1lQXJlYVwiKTtcblxudmFyIF9nYW1lQXJlYTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nYW1lQXJlYSk7XG5cbnZhciBfcmVjb3JkcyA9IHJlcXVpcmUoXCIuL3JlY29yZHNcIik7XG5cbnZhciBfcmVjb3JkczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWNvcmRzKTtcblxudmFyIF9yZWNvcmRQbGF5YmFjayA9IHJlcXVpcmUoXCIuL3JlY29yZFBsYXliYWNrXCIpO1xuXG52YXIgX3JlY29yZFBsYXliYWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlY29yZFBsYXliYWNrKTtcblxudmFyIF9ldmVudEJ1cyA9IHJlcXVpcmUoXCIuLi91dGlsaXRpZXMvZXZlbnRCdXNcIik7XG5cbnZhciBfZXZlbnRCdXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXZlbnRCdXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZXZlbnRCdXMgPSBuZXcgX2V2ZW50QnVzMi5kZWZhdWx0KCk7XG5cbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJvdXRlciA9IG5ldyBfcm91dGVyMi5kZWZhdWx0KHtcbiAgICAgICAgcm91dGVzOiBbe1xuICAgICAgICAgICAgbmFtZTogJ2luZGV4JyxcbiAgICAgICAgICAgIG1hdGNoOiBcIlwiLFxuICAgICAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gb25FbnRlcigpIHtcbiAgICAgICAgICAgICAgICB2YXIgbW9iaWxlQ29udHJvbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vYmlsZUNvbnRyb2xzXCIpO1xuICAgICAgICAgICAgICAgIG1vYmlsZUNvbnRyb2xzLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAgbmFtZTogJ0dhbWUnLFxuICAgICAgICAgICAgbWF0Y2g6IC9HYW1lLyxcbiAgICAgICAgICAgIG9uQmVmb3JlRW50ZXI6IGZ1bmN0aW9uIG9uQmVmb3JlRW50ZXIoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lcldpZHRoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICAgICAgICAgICAgICAgIGlmIChjb250YWluZXJXaWR0aCA8IDEwMjQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vYmlsZUNvbnRyb2xzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2JpbGVDb250cm9sc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgbW9iaWxlQ29udHJvbHMuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gb25FbnRlcigpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFpblRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21haW5fdGV4dFwiKTtcbiAgICAgICAgICAgICAgICB2YXIgbmF2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIm5hdlwiKTtcbiAgICAgICAgICAgICAgICBtYWluVGV4dC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgbmF2LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICB2YXIgY29udGFpbkdhbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NvbnRhaW5cIik7XG4gICAgICAgICAgICAgICAgY29udGFpbkdhbWUuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgICAgICB2YXIgY29udGFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY29udGFpblwiKTtcbiAgICAgICAgICAgICAgICBuZXcgX2dhbWVBcmVhMi5kZWZhdWx0KGNvbnRhaW4pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIG9uTGVhdmUoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5HYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjb250YWluXCIpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5HYW1lLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAgbmFtZTogJ0dhbWVPdmVyJyxcbiAgICAgICAgICAgIG1hdGNoOiAvdGhlRW5kKC4rKS8sXG4gICAgICAgICAgICBvbkJlZm9yZUVudGVyOiBmdW5jdGlvbiBvbkJlZm9yZUVudGVyKCkge1xuICAgICAgICAgICAgICAgIHZhciBtb2JpbGVDb250cm9scyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9iaWxlQ29udHJvbHNcIik7XG4gICAgICAgICAgICAgICAgbW9iaWxlQ29udHJvbHMuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgIHZhciBtYWluVGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbWFpbl90ZXh0XCIpO1xuICAgICAgICAgICAgICAgIG1haW5UZXh0LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkVudGVyOiBmdW5jdGlvbiBvbkVudGVyKHBsYXllclRpbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGxheWVyID0gcGxheWVyVGltZS5zcGxpdChcIjtcIik7XG4gICAgICAgICAgICAgICAgdmFyIGZpbmFsVGltZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMlwiKTtcbiAgICAgICAgICAgICAgICBmaW5hbFRpbWUuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJmaW5hbFRpbWVcIik7XG4gICAgICAgICAgICAgICAgZmluYWxUaW1lLmlubmVySFRNTCA9IHBsYXllclswXSArIFwiLCBcXHUwNDEyXFx1MDQzMFxcdTA0NDhcXHUwNDM1IFxcdTA0MzJcXHUwNDQwXFx1MDQzNVxcdTA0M0NcXHUwNDRGIFxcdTA0MzhcXHUwNDMzXFx1MDQ0MFxcdTA0NEI6IFwiICsgcGxheWVyWzFdO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZmluYWxUaW1lKTtcbiAgICAgICAgICAgICAgICB2YXIgbmF2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIm5hdlwiKTtcbiAgICAgICAgICAgICAgICBuYXYuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkxlYXZlOiBmdW5jdGlvbiBvbkxlYXZlKCkge1xuICAgICAgICAgICAgICAgIHZhciBmaW5hbFRpbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2ZpbmFsVGltZVwiKTtcbiAgICAgICAgICAgICAgICBmaW5hbFRpbWUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBuYW1lOiAnUmVjb3JkcycsXG4gICAgICAgICAgICBtYXRjaDogL1JlY29yZHMvLFxuICAgICAgICAgICAgb25CZWZvcmVFbnRlcjogZnVuY3Rpb24gb25CZWZvcmVFbnRlcigpIHtcbiAgICAgICAgICAgICAgICB2YXIgbW9iaWxlQ29udHJvbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vYmlsZUNvbnRyb2xzXCIpO1xuICAgICAgICAgICAgICAgIG1vYmlsZUNvbnRyb2xzLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICB2YXIgbWFpblRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21haW5fdGV4dFwiKTtcbiAgICAgICAgICAgICAgICBtYWluVGV4dC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gb25FbnRlcigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFibGVDb250YWluID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0YWJsZUNvbnRhaW5cIik7XG4gICAgICAgICAgICAgICAgbmV3IF9yZWNvcmRzMi5kZWZhdWx0KHRhYmxlQ29udGFpbik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24gb25MZWF2ZSgpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3RhYmxlQ29udGFpblwiKS5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBuYW1lOiAncGxheWJhY2tVc2VyJyxcbiAgICAgICAgICAgIG1hdGNoOiAvcGxheWJhY2tVc2VyPSguKykvLFxuICAgICAgICAgICAgb25CZWZvcmVFbnRlcjogZnVuY3Rpb24gb25CZWZvcmVFbnRlcigpIHtcbiAgICAgICAgICAgICAgICB2YXIgbW9iaWxlQ29udHJvbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vYmlsZUNvbnRyb2xzXCIpO1xuICAgICAgICAgICAgICAgIG1vYmlsZUNvbnRyb2xzLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICB2YXIgbWFpblRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21haW5fdGV4dFwiKTtcbiAgICAgICAgICAgICAgICBtYWluVGV4dC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gb25FbnRlcihpbmRleCkge1xuICAgICAgICAgICAgICAgIG5ldyBfcmVjb3JkUGxheWJhY2syLmRlZmF1bHQoaW5kZXgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uTGVhdmU6IGZ1bmN0aW9uIG9uTGVhdmUoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRyb2xzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjb250cm9sc0RpdlwiKTtcbiAgICAgICAgICAgICAgICB2YXIgY29udGFpbkdhbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BheWJhY2tHYW1lXCIpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5HYW1lLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICBjb250cm9scy5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAgbmFtZTogJ0F1dGhvcicsXG4gICAgICAgICAgICBtYXRjaDogL0F1dGhvci8sXG4gICAgICAgICAgICBvbkJlZm9yZUVudGVyOiBmdW5jdGlvbiBvbkJlZm9yZUVudGVyKCkge1xuICAgICAgICAgICAgICAgIHZhciBtb2JpbGVDb250cm9scyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9iaWxlQ29udHJvbHNcIik7XG4gICAgICAgICAgICAgICAgbW9iaWxlQ29udHJvbHMuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgIHZhciBtYWluVGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbWFpbl90ZXh0XCIpO1xuICAgICAgICAgICAgICAgIG1haW5UZXh0LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkVudGVyOiBmdW5jdGlvbiBvbkVudGVyKCkge1xuICAgICAgICAgICAgICAgIHZhciBhYm91dERpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYWJvdXREaXZcIik7XG4gICAgICAgICAgICAgICAgaWYgKCFhYm91dERpdikge1xuICAgICAgICAgICAgICAgICAgICAoMCwgX2Fib3V0UGFnZTIuZGVmYXVsdCkoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhYm91dERpdi5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkxlYXZlOiBmdW5jdGlvbiBvbkxlYXZlKCkge1xuICAgICAgICAgICAgICAgIHZhciBhYm91dERpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYWJvdXREaXZcIik7XG4gICAgICAgICAgICAgICAgYWJvdXREaXYuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XVxuICAgIH0pO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZXZlbnRCdXM7XG5cbn0se1wiLi4vdXRpbGl0aWVzL2V2ZW50QnVzXCI6MTEsXCIuLi91dGlsaXRpZXMvcm91dGVyXCI6MTIsXCIuL2Fib3V0UGFnZVwiOjEsXCIuL2dhbWVBcmVhXCI6NyxcIi4vcmVjb3JkUGxheWJhY2tcIjo5LFwiLi9yZWNvcmRzXCI6MTB9XSw5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2FtZUFyZWEgPSByZXF1aXJlKFwiLi9nYW1lQXJlYVwiKTtcblxudmFyIF9nYW1lQXJlYTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nYW1lQXJlYSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBSZWNvcmRQbGF5YmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZWNvcmRQbGF5YmFjayhpbmRleCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVjb3JkUGxheWJhY2spO1xuXG4gICAgICAgIHRoaXMucGxheWJhY2tBcnJheSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlW1wicGxheWVyc1wiXSlbaW5kZXhdWzNdO1xuICAgICAgICB0aGlzLnBsYXliYWNrR2FtZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHRoaXMucGxheWJhY2tHYW1lQ29udGFpbmVyLnNldEF0dHJpYnV0ZShcImlkXCIsIFwicGF5YmFja0dhbWVcIik7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5wbGF5YmFja0dhbWVDb250YWluZXIpO1xuICAgICAgICB0aGlzLnBsYXlpbmdHYW1lID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pbml0UGxheWJhY2soKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoUmVjb3JkUGxheWJhY2ssIFt7XG4gICAgICAgIGtleTogXCJpbml0UGxheWJhY2tcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRQbGF5YmFjaygpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29udHJvbHMoKTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUGxheWJhY2tHYW1lQXJlYSgpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVQbGF5YmFja0dhbWVBcmVhKCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJjcmVhdGVDb250cm9sc1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQ29udHJvbHMoKSB7XG4gICAgICAgICAgICB2YXIgY29udHJvbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NvbnRyb2xzRGl2XCIpO1xuICAgICAgICAgICAgaWYgKGNvbnRyb2xzKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbHMuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sc0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sc0Rpdi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImNvbnRyb2xzRGl2XCIpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5jb250cm9sc0Rpdik7XG4gICAgICAgICAgICAgICAgdmFyIHNwZWVkQ29udHJvbGxlckxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgICAgICAgICAgICAgIHNwZWVkQ29udHJvbGxlckxhYmVsLmlubmVyVGV4dCA9IFwi0KDQtdCz0YPQu9GP0YLQvtGAINGB0LrQvtGA0L7RgdGC0Lg6XCI7XG4gICAgICAgICAgICAgICAgc3BlZWRDb250cm9sbGVyTGFiZWwuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJzcGVlZENvbnRyb2xsZXJMYWJlbFwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzRGl2LmFwcGVuZENoaWxkKHNwZWVkQ29udHJvbGxlckxhYmVsKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNwZWVkQ29udHJvbGxlciA9IHRoaXMuY3JlYXRlUmFuZ2Uoc3BlZWRDb250cm9sbGVyTGFiZWwsIFwic3BlZWRDb250cm9sbGVyXCIsIDUwKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNwZWVkQ29udHJvbGxlci5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBcIjI1XCIpO1xuICAgICAgICAgICAgICAgIHRoaXMucmV3aW5kQ29udHJvbGxlciA9IHRoaXMuY3JlYXRlUmFuZ2UodGhpcy5jb250cm9sc0RpdiwgXCJyZXdpbmRDb250cm9sbGVyXCIsIHRoaXMucGxheWJhY2tBcnJheS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVBsYXlCdXR0b24odGhpcy5jb250cm9sc0Rpdik7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzVG9DaGFuZ2VDb250cm9scygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiY3JlYXRlUmFuZ2VcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGNvbnRhaW4sIGlkLCBtYXhSYW5nZSkge1xuICAgICAgICAgICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICAgICAgcmFuZ2Uuc2V0QXR0cmlidXRlKFwiaWRcIiwgaWQpO1xuICAgICAgICAgICAgcmFuZ2Uuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInJhbmdlXCIpO1xuICAgICAgICAgICAgcmFuZ2Uuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgXCIxXCIpO1xuICAgICAgICAgICAgcmFuZ2Uuc2V0QXR0cmlidXRlKFwibWluXCIsIFwiMVwiKTtcbiAgICAgICAgICAgIHJhbmdlLnNldEF0dHJpYnV0ZShcIm1heFwiLCBtYXhSYW5nZSk7XG4gICAgICAgICAgICBjb250YWluLmFwcGVuZENoaWxkKHJhbmdlKTtcbiAgICAgICAgICAgIHJldHVybiByYW5nZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImNyZWF0ZVBsYXlCdXR0b25cIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVBsYXlCdXR0b24oKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXlCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgICAgICB0aGlzLnBsYXlCdXR0b24uc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJwbGF5QnV0dG9uXCIpO1xuICAgICAgICAgICAgdGhpcy5wbGF5QnV0dG9uLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJidXR0b25cIik7XG4gICAgICAgICAgICB0aGlzLnBsYXlCdXR0b24uc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgXCJzdG9wXCIpO1xuICAgICAgICAgICAgdGhpcy5jb250cm9sc0Rpdi5hcHBlbmRDaGlsZCh0aGlzLnBsYXlCdXR0b24pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwic3Vic1RvQ2hhbmdlQ29udHJvbHNcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN1YnNUb0NoYW5nZUNvbnRyb2xzKCkge1xuICAgICAgICAgICAgdmFyIHdyYXBwZXJDbGlja09uUGxheUJ1dHRvbiA9IHRoaXMuY2xpY2tPblBsYXlCdXR0b24uYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMucGxheUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGxheUJ1dHRvblwiKTtcbiAgICAgICAgICAgIHRoaXMucGxheUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgd3JhcHBlckNsaWNrT25QbGF5QnV0dG9uKTtcblxuICAgICAgICAgICAgdmFyIHdyYXBwZXJDaGFuZ2VSYW5nZSA9IHRoaXMuY2hhbmdlUmFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHNEaXYuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCB3cmFwcGVyQ2hhbmdlUmFuZ2UpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiY2hhbmdlUmFuZ2VcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVJhbmdlKGV2KSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZXYudGFyZ2V0O1xuICAgICAgICAgICAgaWYgKHRhcmdldC5jbG9zZXN0KFwiI3Jld2luZENvbnRyb2xsZXJcIikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXliYWNrLmdhbWVTdGFnZSA9ICt0YXJnZXQudmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5YmFjay5nZXRDdXJyZW50UGVyc29uYWdlQXJyYXkodGhpcy5wbGF5YmFja0FycmF5KTtcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXliYWNrLmRyYXdDYW52YXNBcmVhKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRhcmdldC5jbG9zZXN0KFwiI3NwZWVkQ29udHJvbGxlclwiKSAmJiB0aGlzLnBsYXliYWNrQXJyYXkubGVuZ3RoIC0gMSAhPT0gdGhpcy5wbGF5YmFjay5nYW1lU3RhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BQbGF5YmFja0dhbWVBcmVhKCk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVQbGF5YmFja0dhbWVBcmVhKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJjbGlja09uUGxheUJ1dHRvblwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xpY2tPblBsYXlCdXR0b24oZXYpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBldi50YXJnZXQ7XG4gICAgICAgICAgICBpZiAodGFyZ2V0LnZhbHVlID09PSBcInN0b3BcIikge1xuICAgICAgICAgICAgICAgIHRhcmdldC52YWx1ZSA9IFwicGxheVwiO1xuICAgICAgICAgICAgICAgIHRhcmdldC5zdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb25YID0gXCIwXCI7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGltZXIpIHRoaXMuc3RvcFBsYXliYWNrR2FtZUFyZWEoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LnZhbHVlID09PSBcInBsYXlcIikge1xuICAgICAgICAgICAgICAgIHRhcmdldC52YWx1ZSA9IFwic3RvcFwiO1xuICAgICAgICAgICAgICAgIHRhcmdldC5zdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb25YID0gXCIxNyVcIjtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMudGltZXIpIHRoaXMudXBkYXRlUGxheWJhY2tHYW1lQXJlYSgpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsYXliYWNrQXJyYXkubGVuZ3RoIC0gMSA9PT0gdGhpcy5wbGF5YmFjay5nYW1lU3RhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXdpbmRDb250cm9sbGVyLnZhbHVlID0gMTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5YmFjay5nYW1lU3RhZ2UgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImNyZWF0ZVBsYXliYWNrR2FtZUFyZWFcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVBsYXliYWNrR2FtZUFyZWEoKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXliYWNrID0gbmV3IF9nYW1lQXJlYTIuZGVmYXVsdCh0aGlzLnBsYXliYWNrR2FtZUNvbnRhaW5lciwgdGhpcy5wbGF5YmFja0FycmF5KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInVwZGF0ZVBsYXliYWNrR2FtZUFyZWFcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVBsYXliYWNrR2FtZUFyZWEoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLnRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICsrX3RoaXMucGxheWJhY2suZ2FtZVN0YWdlO1xuICAgICAgICAgICAgICAgIGlmICgrX3RoaXMucmV3aW5kQ29udHJvbGxlci52YWx1ZSA9PT0gX3RoaXMucGxheWJhY2suZ2FtZVN0YWdlIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZXdpbmRDb250cm9sbGVyLnZhbHVlID0gX3RoaXMucGxheWJhY2suZ2FtZVN0YWdlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5wbGF5YmFjay5nZXRDdXJyZW50UGVyc29uYWdlQXJyYXkoX3RoaXMucGxheWJhY2tBcnJheSk7XG4gICAgICAgICAgICAgICAgX3RoaXMucGxheWJhY2suZHJhd0NhbnZhc0FyZWEoKTtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMucGxheWJhY2tBcnJheS5sZW5ndGggLSAxID09PSBfdGhpcy5wbGF5YmFjay5nYW1lU3RhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucGxheUJ1dHRvbi52YWx1ZSA9IFwicGxheVwiO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5wbGF5QnV0dG9uLnN0eWxlLmJhY2tncm91bmRQb3NpdGlvblggPSBcIjBcIjtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3RvcFBsYXliYWNrR2FtZUFyZWEoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzLnNwZWVkQ29udHJvbGxlci52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJzdG9wUGxheWJhY2tHYW1lQXJlYVwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcFBsYXliYWNrR2FtZUFyZWEoKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpO1xuICAgICAgICAgICAgdGhpcy50aW1lciA9IDA7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUmVjb3JkUGxheWJhY2s7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFJlY29yZFBsYXliYWNrO1xuXG59LHtcIi4vZ2FtZUFyZWFcIjo3fV0sMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFJlY29yZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVjb3Jkcyh0YWJsZUNvbnRhaW4pIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlY29yZHMpO1xuXG4gICAgICAgIHRoaXMudGFibGVDb250YWluID0gdGFibGVDb250YWluO1xuICAgICAgICB0aGlzLmNyZWF0ZVRhYmxlVGVtcGxhdGUoKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoUmVjb3JkcywgW3tcbiAgICAgICAga2V5OiBcImNyZWF0ZVRhYmxlVGVtcGxhdGVcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVRhYmxlVGVtcGxhdGUoKSB7XG4gICAgICAgICAgICB0aGlzLnRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRhYmxlXCIpO1xuICAgICAgICAgICAgdGhpcy50YWJsZS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInJlY29yZHNcIik7XG4gICAgICAgICAgICB0aGlzLnRhYmxlLmlubmVySFRNTCA9IFwiPHRyPjx0aD5cXHUwNDFEXFx1MDQzOFxcdTA0M0EgXFx1MDQzOFxcdTA0MzNcXHUwNDQwXFx1MDQzRVxcdTA0M0FcXHUwNDMwPC90aD48dGg+XFx1MDQxQ1xcdTA0MzhcXHUwNDNEXFx1MDQ0M1xcdTA0NDI8L3RoPjx0aD5cXHUwNDIxXFx1MDQzNVxcdTA0M0FcXHUwNDQzXFx1MDQzRFxcdTA0MzQ8L3RoPjx0aD5cXHUwNDEyXFx1MDQzRVxcdTA0NDFcXHUwNDNGXFx1MDQ0MFxcdTA0M0VcXHUwNDM4XFx1MDQzN1xcdTA0MzJcXHUwNDM1XFx1MDQ0MVxcdTA0NDJcXHUwNDM4IFxcdTA0MzdcXHUwNDMwXFx1MDQzRlxcdTA0MzhcXHUwNDQxXFx1MDQzMFxcdTA0M0RcXHUwNDNEXFx1MDQ0M1xcdTA0NEUgXFx1MDQzOFxcdTA0MzNcXHUwNDQwXFx1MDQ0MzwvdGg+PC90cj5cIjtcbiAgICAgICAgICAgIGlmIChsb2NhbFN0b3JhZ2VbXCJwbGF5ZXJzXCJdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXJzQXJyYXkgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZVtcInBsYXllcnNcIl0pO1xuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlVGFibGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImNyZWF0ZVRhYmxlXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVUYWJsZSgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5wbGF5ZXJzQXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIik7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLnBsYXllcnNBcnJheVtpXS5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqICE9PSB0aGlzLnBsYXllcnNBcnJheVtpXS5sZW5ndGggLSAxKSB0ZC5pbm5lclRleHQgPSB0aGlzLnBsYXllcnNBcnJheVtpXVtqXTtlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInBsYXlSZWNvcmRlZEdhbWVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKFwiaHJlZlwiLCBcIiNwbGF5YmFja1VzZXI9XCIgKyBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5pbm5lclRleHQgPSBcIlBsYXlcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRkLmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnRhYmxlLmFwcGVuZENoaWxkKHRyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudGFibGVDb250YWluLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgICAgICB0aGlzLnRhYmxlQ29udGFpbi5hcHBlbmRDaGlsZCh0aGlzLnRhYmxlKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBSZWNvcmRzO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBSZWNvcmRzO1xuXG59LHt9XSwxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEV2ZW50QnVzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV2ZW50QnVzKCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXZlbnRCdXMpO1xuXG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0ge307XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEV2ZW50QnVzLCBbe1xuICAgICAgICBrZXk6ICdvbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbihuYW1lLCBjYikge1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnNbbmFtZV0gPSB0aGlzLmxpc3RlbmVyc1tuYW1lXSB8fCBbXTtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzW25hbWVdLnB1c2goY2IpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICd0cmlnZ2VyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRyaWdnZXIobmFtZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGRhdGEgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICAgICAgZGF0YVtfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmxpc3RlbmVyc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzW25hbWVdLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYi5hcHBseSh1bmRlZmluZWQsIGRhdGEpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdvZmYnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb2ZmKG5hbWUsIGNiKSB7XG4gICAgICAgICAgICBpZiAoIWNiKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMubGlzdGVuZXJzW25hbWVdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlbmVyc1tuYW1lXSA9IHRoaXMubGlzdGVuZXJzW25hbWVdLmZpbHRlcihmdW5jdGlvbiAoYXJyYXlDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIShjYiA9PT0gYXJyYXlDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ29uY2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25jZShuYW1lLCBjYikge1xuICAgICAgICAgICAgdGhpcy5vbihuYW1lLCBvbmNlT2ZmKTtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgZnVuY3Rpb24gb25jZU9mZigpIHtcbiAgICAgICAgICAgICAgICBjYi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHNlbGYubGlzdGVuZXJzW25hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEV2ZW50QnVzO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBFdmVudEJ1cztcblxufSx7fV0sMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBSb3V0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUm91dGVyKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcblxuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGVyKTtcblxuICAgICAgICB0aGlzLnJvdXRlcyA9IG9wdGlvbnMucm91dGVzO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImhhc2hjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmhhc2hDaGVjayh3aW5kb3cubG9jYXRpb24uaGFzaCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmhhc2hDaGVjayh3aW5kb3cubG9jYXRpb24uaGFzaCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFJvdXRlciwgW3tcbiAgICAgICAga2V5OiAnZmluZE5ld1JvdXRlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmROZXdSb3V0ZShoYXNoKSB7XG4gICAgICAgICAgICB2YXIgcm91dGUgPSB2b2lkIDA7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoIXRoaXMucm91dGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJvdXRlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maW5kUm91dGUoaGFzaCwgdGhpcy5yb3V0ZXNbMF0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJvdXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChyb3V0ZUl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuZmluZFJvdXRlKGhhc2gsIHJvdXRlSXRlbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByb3V0ZSA9IHJvdXRlSXRlbTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJvdXRlO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdmaW5kUm91dGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmluZFJvdXRlKGhhc2gsIGl0ZW0pIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbS5tYXRjaCA9PT0gJ3N0cmluZycgJiYgaGFzaCA9PT0gaXRlbS5tYXRjaCB8fCB0eXBlb2YgaXRlbS5tYXRjaCA9PT0gJ2Z1bmN0aW9uJyAmJiBpdGVtLm1hdGNoKGhhc2gpIHx8IGl0ZW0ubWF0Y2ggaW5zdGFuY2VvZiBSZWdFeHAgJiYgaGFzaC5tYXRjaChpdGVtLm1hdGNoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYXNoQ2hlY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFzaENoZWNrKGhhc2gpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICBoYXNoID0gaGFzaC5zbGljZSgxKTtcbiAgICAgICAgICAgIHZhciBwcmVSb3V0ZSA9IHRoaXMuYWN0aXZlUm91dGU7XG4gICAgICAgICAgICB2YXIgbmV3Um91dGUgPSB0aGlzLmZpbmROZXdSb3V0ZShoYXNoKTtcblxuICAgICAgICAgICAgaWYgKCFuZXdSb3V0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5ld1JvdXRlLm1hdGNoID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRoaXMucm91dGVQYXJhbXMgPSBuZXdSb3V0ZS5tYXRjaDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobmV3Um91dGUubWF0Y2ggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJvdXRlUGFyYW1zID0gaGFzaC5tYXRjaChuZXdSb3V0ZS5tYXRjaClbMV07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBuZXdSb3V0ZS5tYXRjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMucm91dGVQYXJhbXMgPSBuZXdSb3V0ZS5tYXRjaChoYXNoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByZVJvdXRlICYmIHByZVJvdXRlLm9uTGVhdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnByZVJvdXRlUGFyYW1zID8gcHJlUm91dGUub25MZWF2ZShfdGhpczIucHJlUm91dGVQYXJhbXMpIDogcHJlUm91dGUub25MZWF2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdSb3V0ZSAmJiBuZXdSb3V0ZS5vbkJlZm9yZUVudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzMi5yb3V0ZVBhcmFtcyA/IG5ld1JvdXRlLm9uQmVmb3JlRW50ZXIoX3RoaXMyLnJvdXRlUGFyYW1zKSA6IG5ld1JvdXRlLm9uQmVmb3JlRW50ZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3Um91dGUgJiYgbmV3Um91dGUub25FbnRlcikge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczIucm91dGVQYXJhbXMgPyBuZXdSb3V0ZS5vbkVudGVyKF90aGlzMi5yb3V0ZVBhcmFtcykgOiBuZXdSb3V0ZS5vbkVudGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMyLmFjdGl2ZVJvdXRlID0gbmV3Um91dGU7XG4gICAgICAgICAgICAgICAgX3RoaXMyLnByZVJvdXRlUGFyYW1zID0gX3RoaXMyLnJvdXRlUGFyYW1zO1xuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUm91dGVyO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBSb3V0ZXI7XG5cbn0se31dfSx7fSxbOF0pXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5TFhCaFkyc3ZYM0J5Wld4MVpHVXVhbk1pTENKemNtTmNYR3BoZG1GelkzSnBjSFJ6WEZ4amIyMXdiMjVsYm5SelhGeGhZbTkxZEZCaFoyVXVhbk1pTENKemNtTmNYR3BoZG1GelkzSnBjSFJ6WEZ4amIyMXdiMjVsYm5SelhGeGphR0Z5WVdOMFpYSnpMbXB6SWl3aWMzSmpYRnhxWVhaaGMyTnlhWEIwYzF4Y1kyOXRjRzl1Wlc1MGMxeGNZMmhoY21GamRHVnljMXhjU0hWdFlXNHVhbk1pTENKemNtTmNYR3BoZG1GelkzSnBjSFJ6WEZ4amIyMXdiMjVsYm5SelhGeGphR0Z5WVdOMFpYSnpYRnhJZFc1ME1TNXFjeUlzSW5OeVkxeGNhbUYyWVhOamNtbHdkSE5jWEdOdmJYQnZibVZ1ZEhOY1hHTm9ZWEpoWTNSbGNuTmNYRWgxYm5ReUxtcHpJaXdpYzNKalhGeHFZWFpoYzJOeWFYQjBjMXhjWTI5dGNHOXVaVzUwYzF4Y1kyaGhjbUZqZEdWeWMxeGNUWFZ6YUhKdmIyMHVhbk1pTENKemNtTmNYR3BoZG1GelkzSnBjSFJ6WEZ4amIyMXdiMjVsYm5SelhGeG5ZVzFsUVhKbFlTNXFjeUlzSW5OeVkxeGNhbUYyWVhOamNtbHdkSE5jWEdOdmJYQnZibVZ1ZEhOY1hHMWhhVzR1YW5NaUxDSnpjbU5jWEdwaGRtRnpZM0pwY0hSelhGeGpiMjF3YjI1bGJuUnpYRnh5WldOdmNtUlFiR0Y1WW1GamF5NXFjeUlzSW5OeVkxeGNhbUYyWVhOamNtbHdkSE5jWEdOdmJYQnZibVZ1ZEhOY1hISmxZMjl5WkhNdWFuTWlMQ0p6Y21OY1hHcGhkbUZ6WTNKcGNIUnpYRngxZEdsc2FYUnBaWE5jWEdWMlpXNTBRblZ6TG1weklpd2ljM0pqWEZ4cVlYWmhjMk55YVhCMGMxeGNkWFJwYkdsMGFXVnpYRnh5YjNWMFpYSXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN096czdPenRCUTBGQkxGTkJRVk1zVVVGQlZDeEhRVUZ2UWp0QlFVTm9RaXhSUVVGSkxGRkJRVkVzVTBGQlV5eGhRVUZVTEVOQlFYVkNMRmRCUVhaQ0xFTkJRVm83UVVGRFFTeFJRVUZKTEVOQlFVTXNTMEZCVEN4RlFVRlpPMEZCUTFJc1dVRkJTU3haUVVGWExGTkJRVk1zWVVGQlZDeERRVUYxUWl4TFFVRjJRaXhEUVVGbU8wRkJRMEVzYTBKQlFWTXNXVUZCVkN4RFFVRnpRaXhKUVVGMFFpeEZRVUUwUWl4VlFVRTFRanRCUVVOQkxHbENRVUZUTEVsQlFWUXNRMEZCWXl4WFFVRmtMRU5CUVRCQ0xGTkJRVEZDTzBGQlEwZzdPMEZCUlVRc1lVRkJVeXhUUVVGVU8wRkJTVWc3TzJ0Q1FVVmpMRkU3T3p0QlEyUm1PenM3T3pzN096czdPMGxCUTAwc1RUdEJRVU5HTEc5Q1FVRlpMRkZCUVZvc1JVRkJjMEk3UVVGQlFUczdRVUZEYkVJc1lVRkJTeXhqUVVGTUxFZEJRWE5DTEZOQlFWTXNaVUZCVkN4RFFVRjVRaXhYUVVFdlF6dEJRVU5CTEdGQlFVc3NaVUZCVEN4SFFVRjFRaXhUUVVGVExHVkJRVlFzUTBGQmVVSXNXVUZCYUVRN1FVRkRRU3hoUVVGTExGRkJRVXdzUjBGQlowSXNVVUZCYUVJN1FVRkRRU3hoUVVGTExFZEJRVXdzUjBGQlZ5eExRVUZZTzBGQlEwRXNZVUZCU3l4RlFVRk1MRWRCUVZVc1EwRkJWanRCUVVOQkxHRkJRVXNzUlVGQlRDeEhRVUZWTEVOQlFWWTdRVUZEU0RzN096czJRMEZGYjBJN1FVRkRha0lzYVVKQlFVc3NRMEZCVEN4SFFVRlRMRXRCUVVzc1dVRkJUQ3hEUVVGclFpeERRVUZzUWl4RlFVRnhRaXhMUVVGTExHTkJRVEZDTEVOQlFWUTdRVUZEUVN4cFFrRkJTeXhEUVVGTUxFZEJRVk1zUzBGQlN5eFpRVUZNTEVOQlFXdENMRU5CUVd4Q0xFVkJRWEZDTEV0QlFVc3NaVUZCTVVJc1EwRkJWRHM3UVVGRlFTeG5Ra0ZCU1N4SlFVRkpMRXRCUVVzc01rSkJRVXdzUlVGQlVqdEJRVU5CTEdkQ1FVRkpMRWxCUVVrc1MwRkJTeXhaUVVGTUxFZEJRVzlDTEVOQlFUVkNMRVZCUVN0Q0xFdEJRVXNzYTBKQlFVdzdRVUZEYkVNN096c3dRMEZGYVVJN1FVRkRaQ3huUWtGQlNTeHZRa0ZCYjBJc1MwRkJTeXhWUVVGTUxFTkJRV2RDTEVsQlFXaENMRU5CUVhGQ0xFbEJRWEpDTEVOQlFYaENPMEZCUTBFc2NVSkJRVk1zU1VGQlZDeERRVUZqTEdkQ1FVRmtMRU5CUVN0Q0xGTkJRUzlDTEVWQlFUQkRMR2xDUVVFeFF6dEJRVU5CTEdkQ1FVRkpMQ3RDUVVFclFpeExRVUZMTEhGQ1FVRk1MRU5CUVRKQ0xFbEJRVE5DTEVOQlF5OUNMRWxCUkN0Q0xFTkJRVzVETzBGQlJVRXNjVUpCUVZNc1lVRkJWQ3hEUVVGMVFpeHBRa0ZCZGtJc1JVRkRTU3huUWtGRVNpeERRVU54UWl4UFFVUnlRaXhGUVVNNFFpdzBRa0ZFT1VJN1FVRkZTRHM3T3poRFFVVnhRaXhGTEVWQlFVazdRVUZEZEVJc1owSkJRVWtzVTBGQlV5eEhRVUZITEUxQlFXaENPMEZCUTBFc2FVSkJRVXNzVTBGQlRDeEhRVUZwUWl4UFFVRlBMRXRCUVhoQ08wRkJRMGc3T3p0dFEwRkZWU3hMTEVWQlFVODdRVUZEWkN4blFrRkJTU3huUWtGQlowSXNSVUZCY0VJN1FVRkRRU3huUWtGQlNTeHRRa0ZCYlVJc1JVRkJka0k3UVVGRFFTeG5Ra0ZCU1N4clFrRkJhMElzUlVGQmRFSTdRVUZEUVN4blFrRkJTU3hwUWtGQmFVSXNSVUZCY2tJN1FVRkRRU3h2UWtGQlVTeE5RVUZOTEU5QlFXUTdRVUZEU1N4eFFrRkJTeXhoUVVGTU8wRkJRMGtzZVVKQlFVc3NVMEZCVEN4SFFVRnBRaXhoUVVGcVFqdEJRVU5CTzBGQlEwb3NjVUpCUVVzc1owSkJRVXc3UVVGRFNTeDVRa0ZCU3l4VFFVRk1MRWRCUVdsQ0xGVkJRV3BDTzBGQlEwRTdRVUZEU2l4eFFrRkJTeXhsUVVGTU8wRkJRMGtzZVVKQlFVc3NVMEZCVEN4SFFVRnBRaXhYUVVGcVFqdEJRVU5CTzBGQlEwb3NjVUpCUVVzc1kwRkJURHRCUVVOSkxIbENRVUZMTEZOQlFVd3NSMEZCYVVJc1ZVRkJha0k3UVVGRFFUdEJRVnBTTzBGQlkwZzdPenRuUkVGRmRVSTdRVUZEY0VJc2IwSkJRVkVzUzBGQlN5eFpRVUZNTEVOQlFXdENMRU5CUVd4Q0xFVkJRWEZDTEVOQlFYSkNMRU5CUVZJN1FVRkRTU3h4UWtGQlN5eERRVUZNTzBGQlEwa3NlVUpCUVVzc1UwRkJUQ3hIUVVGcFFpeGhRVUZxUWp0QlFVTkJPMEZCUTBvc2NVSkJRVXNzUTBGQlREdEJRVU5KTEhsQ1FVRkxMRk5CUVV3c1IwRkJhVUlzVlVGQmFrSTdRVUZEUVR0QlFVTktMSEZDUVVGTExFTkJRVXc3UVVGRFNTeDVRa0ZCU3l4VFFVRk1MRWRCUVdsQ0xGZEJRV3BDTzBGQlEwRTdRVUZEU2l4eFFrRkJTeXhEUVVGTU8wRkJRMGtzZVVKQlFVc3NVMEZCVEN4SFFVRnBRaXhWUVVGcVFqdEJRVU5CTzBGQldsSTdRVUZqUVN4cFFrRkJTeXhUUVVGTU8wRkJRMGc3T3p0eFEwRkZXU3hITEVWQlFVc3NSeXhGUVVGTE8wRkJRMjVDTEcxQ1FVRlBMRXRCUVVzc1MwRkJUQ3hEUVVGWExFdEJRVXNzVFVGQlRDeE5RVUZwUWl4TlFVRk5MRWRCUVU0c1IwRkJXU3hEUVVFM1FpeERRVUZZTEVsQlFUaERMRWRCUVhKRU8wRkJRMGc3T3pzclEwRkZjMEk3UVVGRGJrSXNhVUpCUVVzc1VVRkJUQ3hEUVVGakxFVkJRV1FzUTBGQmFVSXNhMEpCUVdwQ0xFVkJRWEZETEV0QlFVc3NaMEpCUVRGRE8wRkJRMEVzYVVKQlFVc3NVVUZCVEN4RFFVRmpMRVZCUVdRc1EwRkJhVUlzYVVKQlFXcENMRVZCUVc5RExFdEJRVXNzWlVGQmVrTTdRVUZEUVN4cFFrRkJTeXhSUVVGTUxFTkJRV01zUlVGQlpDeERRVUZwUWl4cFFrRkJha0lzUlVGQmIwTXNTMEZCU3l4bFFVRjZRenRCUVVOQkxHbENRVUZMTEZGQlFVd3NRMEZCWXl4RlFVRmtMRU5CUVdsQ0xHZENRVUZxUWl4RlFVRnRReXhMUVVGTExHTkJRWGhETzBGQlEwRXNhVUpCUVVzc1VVRkJUQ3hEUVVGakxFVkJRV1FzUTBGQmFVSXNZVUZCYWtJc1JVRkJaME1zUzBGQlN5eFhRVUZ5UXp0QlFVTkJMR2xDUVVGTExGRkJRVXdzUTBGQll5eEZRVUZrTEVOQlFXbENMRmRCUVdwQ0xFVkJRVGhDTEV0QlFVc3NVMEZCYmtNN1FVRkRRU3hwUWtGQlN5eFJRVUZNTEVOQlFXTXNSVUZCWkN4RFFVRnBRaXhWUVVGcVFpeEZRVUUyUWl4TFFVRkxMRkZCUVd4RE8wRkJRMEVzYVVKQlFVc3NVVUZCVEN4RFFVRmpMRVZCUVdRc1EwRkJhVUlzVlVGQmFrSXNSVUZCTmtJc1MwRkJTeXhSUVVGc1F6dEJRVU5JT3pzN01FTkJSV2xDTzBGQlEyUXNaMEpCUVVrc1MwRkJTeXhKUVVGTUxFTkJRVlVzUTBGQlZpeEhRVUZqTEV0QlFVc3NRMEZCYmtJc1NVRkJkMElzUzBGQlN5eEpRVUZNTEVOQlFWVXNRMEZCVml4SFFVRmpMRXRCUVVzc1EwRkJMME1zUlVGQmEwUTdRVUZET1VNc2NVSkJRVXNzVTBGQlRDeEhRVUZwUWl4clFrRkJha0k3UVVGRFNDeGhRVVpFTEUxQlIwc3NTVUZCU1N4TFFVRkxMRWxCUVV3c1EwRkJWU3hEUVVGV0xFZEJRV01zUzBGQlN5eERRVUZ1UWl4SlFVRjNRaXhMUVVGTExFbEJRVXdzUTBGQlZTeERRVUZXTEVkQlFXTXNTMEZCU3l4RFFVRXZReXhGUVVGclJEdEJRVU51UkN4eFFrRkJTeXhUUVVGTUxFZEJRV2xDTEdsQ1FVRnFRanRCUVVOSUxHRkJSa2tzVFVGSFFTeEpRVUZKTEV0QlFVc3NTVUZCVEN4RFFVRlZMRU5CUVZZc1IwRkJZeXhMUVVGTExFTkJRVzVDTEVsQlFYZENMRXRCUVVzc1NVRkJUQ3hEUVVGVkxFTkJRVllzUjBGQll5eExRVUZMTEVOQlFTOURMRVZCUVd0RU8wRkJRMjVFTEhGQ1FVRkxMRk5CUVV3c1IwRkJhVUlzYVVKQlFXcENPMEZCUTBnc1lVRkdTU3hOUVVkQkxFbEJRVWtzUzBGQlN5eEpRVUZNTEVOQlFWVXNRMEZCVml4SFFVRmpMRXRCUVVzc1EwRkJia0lzU1VGQmQwSXNTMEZCU3l4SlFVRk1MRU5CUVZVc1EwRkJWaXhIUVVGakxFdEJRVXNzUTBGQkwwTXNSVUZCYTBRN1FVRkRia1FzY1VKQlFVc3NVMEZCVEN4SFFVRnBRaXhuUWtGQmFrSTdRVUZEU0N4aFFVWkpMRTFCUjBFc1NVRkJTU3hMUVVGTExFbEJRVXdzUTBGQlZTeERRVUZXTEVkQlFXTXNTMEZCU3l4RFFVRjJRaXhGUVVFd1FqdEJRVU16UWl4eFFrRkJTeXhUUVVGTUxFZEJRV2xDTEZWQlFXcENPMEZCUTBnc1lVRkdTU3hOUVVkQkxFbEJRVWtzUzBGQlN5eEpRVUZNTEVOQlFWVXNRMEZCVml4SFFVRmpMRXRCUVVzc1EwRkJka0lzUlVGQk1FSTdRVUZETTBJc2NVSkJRVXNzVTBGQlRDeEhRVUZwUWl4WFFVRnFRanRCUVVOSUxHRkJSa2tzVFVGSFFTeEpRVUZKTEV0QlFVc3NTVUZCVEN4RFFVRlZMRU5CUVZZc1IwRkJZeXhMUVVGTExFTkJRWFpDTEVWQlFUQkNPMEZCUXpOQ0xIRkNRVUZMTEZOQlFVd3NSMEZCYVVJc1ZVRkJha0k3UVVGRFNDeGhRVVpKTEUxQlIwRXNTVUZCU1N4TFFVRkxMRWxCUVV3c1EwRkJWU3hEUVVGV0xFZEJRV01zUzBGQlN5eERRVUYyUWl4RlFVRXdRanRCUVVNelFpeHhRa0ZCU3l4VFFVRk1MRWRCUVdsQ0xHRkJRV3BDTzBGQlEwZzdRVUZEU2pzN08yOURRVVZYTEVrc1JVRkJUVHRCUVVOa0xHbENRVUZMTEVOQlFVd3NSMEZCVXl4TFFVRkxMRU5CUVV3c1IwRkJVeXhEUVVGc1FqdEJRVU5JT3pzN2FVTkJSVkVzU1N4RlFVRk5PMEZCUTFnc2FVSkJRVXNzUTBGQlRDeEhRVUZUTEV0QlFVc3NRMEZCVEN4SFFVRlRMRU5CUVd4Q08wRkJRMGc3T3p0clEwRkZVeXhKTEVWQlFVMDdRVUZEV2l4cFFrRkJTeXhEUVVGTUxFZEJRVk1zUzBGQlN5eERRVUZNTEVkQlFWTXNRMEZCYkVJN1FVRkRTRHM3TzJsRFFVVlJMRWtzUlVGQlRUdEJRVU5ZTEdsQ1FVRkxMRU5CUVV3c1IwRkJVeXhMUVVGTExFTkJRVXdzUjBGQlV5eERRVUZzUWp0QlFVTklPenM3ZFVOQlJXTXNTU3hGUVVGTk8wRkJRMnBDTEdOQlFVVXNTMEZCU3l4RFFVRlFPMEZCUTBFc1kwRkJSU3hMUVVGTExFTkJRVkE3UVVGRFNEczdPM2REUVVWbExFa3NSVUZCVFR0QlFVTnNRaXhqUVVGRkxFdEJRVXNzUTBGQlVEdEJRVU5CTEdOQlFVVXNTMEZCU3l4RFFVRlFPMEZCUTBnN096dDNRMEZGWlN4SkxFVkJRVTA3UVVGRGJFSXNZMEZCUlN4TFFVRkxMRU5CUVZBN1FVRkRRU3hqUVVGRkxFdEJRVXNzUTBGQlVEdEJRVU5JT3pzN2VVTkJSV2RDTEVrc1JVRkJUVHRCUVVOdVFpeGpRVUZGTEV0QlFVc3NRMEZCVUR0QlFVTkJMR05CUVVVc1MwRkJTeXhEUVVGUU8wRkJRMGc3T3p0elJFRkZOa0k3UVVGRE1VSXNaMEpCUVVrc1NVRkJTeXhMUVVGTExFbEJRVXdzUTBGQlZTeERRVUZXTEVkQlFXTXNTMEZCU3l4WlFVRk1MRWRCUVc5Q0xFTkJRVzVETEVsQlEwZ3NTMEZCU3l4RFFVRk1MRWRCUVZNc1MwRkJTeXhaUVVGTUxFZEJRVzlDTEVOQlJERkNMRU5CUVZJN1FVRkZRU3huUWtGQlNTeEpRVUZMTEV0QlFVc3NTVUZCVEN4RFFVRlZMRU5CUVZZc1IwRkJZeXhMUVVGTExGbEJRVXdzUjBGQmIwSXNRMEZCYmtNc1NVRkRTQ3hMUVVGTExFTkJRVXdzUjBGQlV5eExRVUZMTEZsQlFVd3NSMEZCYjBJc1EwRkVNVUlzUTBGQlVqdEJRVVZCTEcxQ1FVRlBMRXRCUVVzc1NVRkJUQ3hEUVVGVkxFbEJRVWtzUTBGQlNpeEhRVUZSTEVsQlFVa3NRMEZCZEVJc1EwRkJVRHRCUVVOSU96czdkMFJCUlN0Q08wRkJRelZDTEdkQ1FVRkpMRXRCUVVzc1EwRkJUQ3hIUVVGVExFbEJRVWtzUzBGQlN5eFpRVUYwUWl4RlFVRnZRenRCUVVOb1F5eHhRa0ZCU3l4RFFVRk1MRWRCUVZNc1MwRkJTeXhqUVVGa08wRkJRMGdzWVVGR1JDeE5RVVZQTEVsQlFVa3NTMEZCU3l4RFFVRk1MRWRCUVZNc1MwRkJTeXhqUVVGc1FpeEZRVUZyUXp0QlFVTnlReXh4UWtGQlN5eERRVUZNTEVkQlFWTXNRMEZCVkR0QlFVTklMR0ZCUmswc1RVRkZRU3hKUVVGSkxFdEJRVXNzUTBGQlRDeEhRVUZUTEVsQlFVa3NTMEZCU3l4WlFVRjBRaXhGUVVGdlF6dEJRVU4yUXl4eFFrRkJTeXhEUVVGTUxFZEJRVk1zUzBGQlN5eGxRVUZrTzBGQlEwZ3NZVUZHVFN4TlFVVkJMRWxCUVVrc1MwRkJTeXhEUVVGTUxFZEJRVk1zUzBGQlN5eGxRVUZzUWl4RlFVRnRRenRCUVVOMFF5eHhRa0ZCU3l4RFFVRk1MRWRCUVZNc1EwRkJWRHRCUVVOSU8wRkJRMG83T3pzclEwRkZjMEk3UVVGRGJrSXNaMEpCUVVrc1NVRkJTU3hMUVVGTExESkNRVUZNTEVWQlFWSTdPMEZCUlVFc1owSkJRVWtzU1VGQlNTeExRVUZMTEZsQlFVd3NSMEZCYjBJc1IwRkJlRUlzU1VGQkswSXNTMEZCU3l4SlFVRk1MRXRCUVdNc1ZVRkJOME1zU1VGRFFTeERRVUZETEV0QlFVc3NSMEZFVml4RlFVTmxPMEZCUTFnc2IwSkJRVWtzUTBGQlF5eExRVUZMTEVsQlFVd3NRMEZCVlN4WFFVRm1MRVZCUVRSQ0xFdEJRVXNzYlVKQlFVdzdRVUZETlVJc2NVSkJRVXNzUjBGQlRDeEhRVUZYTEVsQlFWZzdRVUZEUVN4eFFrRkJTeXhKUVVGTUxFTkJRVlVzVjBGQlZpeEhRVUYzUWl4SlFVRjRRanRCUVVOQkxIRkNRVUZMTEVsQlFVd3NRMEZCVlN4aFFVRldMRWxCUVRKQ0xFVkJRVE5DTzBGQlEwZ3NZVUZPUkN4TlFVOUxMRWxCUVVrc1NVRkJTU3hMUVVGTExGbEJRVXdzUjBGQmIwSXNSMEZCZUVJc1NVRkRUQ3hMUVVGTExFbEJRVXdzUTBGQlZTeFhRVVJVTEVWQlEzTkNMRXRCUVVzc1IwRkJUQ3hIUVVGWExFbEJRVmdzUTBGRWRFSXNTMEZGUVN4SlFVRkpMRWxCUVVrc1MwRkJTeXhaUVVGTUxFZEJRVzlDTEVkQlFYaENMRWxCUTB3c1EwRkJReXhMUVVGTExFZEJSRXdzUlVGRFZTeExRVUZMTEVsQlFVd3NRMEZCVlN4VFFVRldMRWRCUVhOQ0xFdEJRWFJDTzBGQlEyeENPenM3SzBSQlJYTkRPMEZCUTI1RExHZENRVUZKTEVsQlFVa3NTMEZCU3l3eVFrRkJUQ3hGUVVGU08wRkJRMEVzWjBKQlFVa3NTVUZCU1N4TFFVRkxMRmxCUVV3c1IwRkJiMElzUjBGQk5VSXNSVUZCYVVNN1FVRkROMElzY1VKQlFVc3NaVUZCVER0QlFVTklPMEZCUTBvN096czRRMEZGY1VJN1FVRkJRVHM3UVVGRGJFSXNaMEpCUVVrc1QwRkJUeXhaUVVGWkxGbEJRVTA3UVVGRGVrSXNhMEpCUVVVc1RVRkJTeXhKUVVGTUxFTkJRVlVzWVVGQldqdEJRVU5CTEc5Q1FVRkpMRTFCUVVzc1NVRkJUQ3hEUVVGVkxHRkJRVllzU1VGQk1rSXNRMEZCTDBJc1JVRkJhME03UVVGRE9VSXNNRUpCUVVzc1NVRkJUQ3hEUVVGVkxGZEJRVllzUjBGQmQwSXNTMEZCZUVJN1FVRkRRU3hyUTBGQll5eEpRVUZrTzBGQlEwZzdRVUZEU2l4aFFVNVZMRVZCVFZJc1NVRk9VU3hEUVVGWU8wRkJUMGc3T3p0dlEwRkZWenRCUVVGQk96dEJRVU5TTEdkQ1FVRkpMRkZCUVZFc1dVRkJXU3haUVVGTk8wRkJRekZDTEhWQ1FVRkxMRFpDUVVGTU8wRkJRMEVzYjBKQlFVa3NUMEZCU3l4SlFVRk1MRXRCUVdNc1QwRkJiRUlzUlVGQk1rSTdRVUZEZGtJc01rSkJRVXNzVVVGQlRDeERRVUZqTEU5QlFXUXNRMEZCYzBJc1QwRkJTeXhUUVVFelFqdEJRVU5CTERKQ1FVRkxMRzlDUVVGTU8wRkJRMEVzTWtKQlFVc3NiME5CUVV3N1FVRkRTQ3hwUWtGS1JDeE5RVXRMTzBGQlEwUXNNa0pCUVVzc1VVRkJUQ3hEUVVGakxFOUJRV1FzUTBGQmMwSXNUMEZCU3l4VFFVRXpRanRCUVVOQkxIZENRVUZKTEU5QlFVc3NTVUZCVEN4TFFVRmpMRTlCUVd4Q0xFVkJRVEpDTEU5QlFVc3NiMEpCUVV3N1FVRkRPVUk3UVVGRFJDeDFRa0ZCU3l4aFFVRk1MRU5CUVcxQ0xFdEJRVzVDTzBGQlEwZ3NZVUZhVnl4RlFWbFVMRXRCUVVzc1MwRkJUQ3hIUVVGaExFTkJXa29zUTBGQldqdEJRV0ZJT3pzN05rTkJSVzlDTzBGQlFVRTdPMEZCUTJwQ0xHbENRVUZMTEd0Q1FVRk1MRWRCUVRCQ0xGbEJRVmtzV1VGQlRUdEJRVU40UXl4MVFrRkJTeXhaUVVGTU8wRkJRMGdzWVVGR2VVSXNSVUZGZGtJc1MwRkJTeXhMUVVGTUxFZEJRV0VzUlVGR1ZTeERRVUV4UWp0QlFVZElPenM3YzBOQlJXRXNTeXhGUVVGUE8wRkJRMnBDTEdkQ1FVRkpMRU5CUVVNc1MwRkJTeXhKUVVGTUxFdEJRV01zVDBGQlpDeEpRVUY1UWl4TFFVRkxMRWxCUVV3c1MwRkJZeXhQUVVGNFF5eExRVU5CTEVOQlFVTXNTMEZCU3l4SlFVRk1MRU5CUVZVc1UwRkVaaXhGUVVNd1FqdEJRVU4wUWl3NFFrRkJZeXhMUVVGa08wRkJRMEVzT0VKQlFXTXNTMEZCU3l4clFrRkJia0k3UVVGRFNDeGhRVXBFTEUxQlNVOHNTVUZCU1N4TFFVRkxMRWxCUVV3c1MwRkJZeXhQUVVGa0xFbEJRWGxDTEVOQlFVTXNTMEZCU3l4VFFVRnVReXhGUVVFNFF6dEJRVU5xUkN3NFFrRkJZeXhMUVVGa08wRkJRMEVzT0VKQlFXTXNTMEZCU3l4clFrRkJia0k3UVVGRFNEdEJRVU5LT3pzN096czdhMEpCUjFVc1RUczdPMEZETjA5bU96czdPenM3T3p0QlFVTkJPenM3T3pzN096czdPenM3U1VGRlRTeExPenM3UVVGRFJpeHRRa0ZCV1N4UlFVRmFMRVZCUVhOQ08wRkJRVUU3TzBGQlFVRXNhMGhCUTFvc1VVRkVXVHM3UVVGRmJFSXNZMEZCU3l4WlFVRk1MRWRCUVc5Q0xFMUJRVXNzWlVGQlRDeEhRVUYxUWl4RlFVRXpRenRCUVVOQkxHTkJRVXNzUTBGQlRDeEhRVUZUTEV0QlFVc3NTMEZCVEN4RFFVRlhMRTFCUVVzc1kwRkJUQ3hIUVVGelFpeERRVUYwUWl4SFFVRXdRaXhOUVVGTExGbEJRVXdzUjBGQmIwSXNRMEZCZWtRc1EwRkJWRHRCUVVOQkxHTkJRVXNzUTBGQlRDeEhRVUZUTEV0QlFVc3NTMEZCVEN4RFFVRlhMRTFCUVVzc1pVRkJUQ3hIUVVGMVFpeERRVUYyUWl4SFFVRXlRaXhOUVVGTExGbEJRVXdzUjBGQmIwSXNRMEZCTVVRc1EwRkJWRHRCUVVOQkxHTkJRVXNzUzBGQlRDeEhRVUZoTEVOQlFXSTdRVUZEUVN4alFVRkxMRWxCUVV3c1IwRkJXU3hQUVVGYU8wRkJRMEVzWTBGQlN5eFRRVUZNTEVkQlFXbENMRWxCUVdwQ08wRkJRMEVzWTBGQlN5eFhRVUZNTEVkQlFXMUNMRXRCUVc1Q08wRkJRMEVzWTBGQlN5eGhRVUZNTEVkQlFYRkNMRU5CUVhKQ08wRkJRMEVzWTBGQlN5eEpRVUZNTzBGQlZtdENPMEZCVjNKQ096czdPeXRDUVVWTk8wRkJRMGdzYVVKQlFVc3NiMEpCUVV3N1FVRkRRU3hwUWtGQlN5eHhRa0ZCVER0QlFVTkJMR2xDUVVGTExHVkJRVXc3UVVGRFFTeHBRa0ZCU3l4clFrRkJURHRCUVVOSU96czdkVU5CUldNN1FVRkRXQ3huUWtGQlNTd3lRa0ZCTWtJc1IwRkJMMEk3UVVGRFFTeG5Ra0ZCU1N3MFFrRkJORUlzUTBGQmFFTTdRVUZEUVN4blFrRkJTU3g1UWtGQmVVSXNSMEZCTjBJN1FVRkRRU3huUWtGQlNTeDNRa0ZCZDBJc1JVRkJOVUk3UVVGRFFTeG5Ra0ZCU1N4cFFrRkJhVUlzUlVGQmNrSTdRVUZEUVN4blFrRkJTU3gxUWtGQmRVSXNRMEZCTTBJN1FVRkRRU3huUWtGQlNTeHZRa0ZCYjBJc1IwRkJlRUk3UVVGRFFTeHZRa0ZCVVN4TFFVRkxMRk5CUVdJN1FVRkRTU3h4UWtGQlN5eGhRVUZNTzBGQlEwRXNjVUpCUVVzc1owSkJRVXc3UVVGRFFTeHhRa0ZCU3l4cFFrRkJURHRCUVVOSkxIbENRVUZMTEVWQlFVd3NSMEZCVlN4M1FrRkJWanRCUVVOQk8wRkJRMG9zY1VKQlFVc3NWVUZCVER0QlFVTkJMSEZDUVVGTExHbENRVUZNTzBGQlEwRXNjVUpCUVVzc2EwSkJRVXc3UVVGRFNTeDVRa0ZCU3l4RlFVRk1MRWRCUVZVc2VVSkJRVlk3UVVGRFFUdEJRVU5LTEhGQ1FVRkxMRmRCUVV3N1FVRkRTU3g1UWtGQlN5eEZRVUZNTEVkQlFWVXNjMEpCUVZZN1FVRkRRVHRCUVVOS0xIRkNRVUZMTEZWQlFVdzdRVUZEU1N4NVFrRkJTeXhGUVVGTUxFZEJRVlVzY1VKQlFWWTdRVUZEUVR0QlFXaENVanRCUVd0Q1FTeHBRa0ZCU3l4RlFVRk1MRWxCUVZjc1kwRkJXRHRCUVVOQkxHZENRVUZKTEV0QlFVc3NSVUZCVEN4SlFVRlhMR2xDUVVGbUxFVkJRV3RETEV0QlFVc3NSVUZCVEN4SFFVRlZMRzlDUVVGV08wRkJRM0pET3pzN096czdhMEpCUjFVc1N6czdPMEZEZGtSbU96czdPenM3T3p0QlFVTkJPenM3T3pzN096czdPenM3U1VGRlRTeExPenM3UVVGRFJpeHRRa0ZCV1N4SlFVRmFMRVZCUVdsQ0xGRkJRV3BDTEVWQlFUSkNPMEZCUVVFN08wRkJRVUVzYTBoQlEycENMRkZCUkdsQ096dEJRVVYyUWl4alFVRkxMRWxCUVV3c1IwRkJXU3hKUVVGYU8wRkJRMEVzWTBGQlN5eFpRVUZNTEVkQlFXOUNMRTFCUVVzc1pVRkJUQ3hIUVVGMVFpeEZRVUV6UXp0QlFVTkJMR05CUVVzc1MwRkJUQ3hIUVVGaExFMUJRVXNzV1VGQlRDeERRVUZyUWl4RFFVRnNRaXhGUVVGeFFpeEZRVUZ5UWl4RFFVRmlPMEZCUTBFc1kwRkJTeXhKUVVGTUxFZEJRVmtzVDBGQldqdEJRVU5CTEdOQlFVc3NTVUZCVER0QlFVNTFRanRCUVU4eFFqczdPenNyUWtGRlRUdEJRVU5JTEdsQ1FVRkxMR3RDUVVGTU8wRkJRMEVzYVVKQlFVc3NjVUpCUVV3N1FVRkRRU3hwUWtGQlN5eHJRa0ZCVER0QlFVTklPenM3ZFVOQlJXTTdRVUZEV0N4blFrRkJTU3d5UWtGQk1rSXNSMEZCTDBJN1FVRkRRU3huUWtGQlNTdzBRa0ZCTkVJc1EwRkJhRU03UVVGRFFTeG5Ra0ZCU1N4NVFrRkJlVUlzUlVGQk4wSTdRVUZEUVN4blFrRkJTU3gzUWtGQmQwSXNSVUZCTlVJN1FVRkRRU3huUWtGQlNTeDFRa0ZCZFVJc1EwRkJNMEk3UVVGRFFTeG5Ra0ZCU1N4cFFrRkJhVUlzUlVGQmNrSTdRVUZEUVN4blFrRkJTU3h2UWtGQmIwSXNSMEZCZUVJN1FVRkRRU3h2UWtGQlVTeExRVUZMTEZOQlFXSTdRVUZEU1N4eFFrRkJTeXhoUVVGTU8wRkJRMEVzY1VKQlFVc3NaMEpCUVV3N1FVRkRRU3h4UWtGQlN5eHBRa0ZCVER0QlFVTkpMSGxDUVVGTExFVkJRVXdzUjBGQlZTeDNRa0ZCVmp0QlFVTkJPMEZCUTBvc2NVSkJRVXNzVlVGQlREdEJRVU5CTEhGQ1FVRkxMR2xDUVVGTU8wRkJRMEVzY1VKQlFVc3NhMEpCUVV3N1FVRkRTU3g1UWtGQlN5eEZRVUZNTEVkQlFWVXNlVUpCUVZZN1FVRkRRVHRCUVVOS0xIRkNRVUZMTEZkQlFVdzdRVUZEU1N4NVFrRkJTeXhGUVVGTUxFZEJRVlVzYzBKQlFWWTdRVUZEUVR0QlFVTktMSEZDUVVGTExGVkJRVXc3UVVGRFNTeDVRa0ZCU3l4RlFVRk1MRWRCUVZVc2NVSkJRVlk3UVVGRFFUdEJRV2hDVWp0QlFXdENRU3hwUWtGQlN5eEZRVUZNTEVsQlFWY3NZMEZCV0R0QlFVTkJMR2RDUVVGSkxFdEJRVXNzUlVGQlRDeEpRVUZYTEdsQ1FVRm1MRVZCUVd0RExFdEJRVXNzUlVGQlRDeEhRVUZWTEc5Q1FVRldPMEZCUTNKRE96czdPenM3YTBKQlIxVXNTenM3TzBGRGJFUm1PenM3T3pzN096dEJRVU5CT3pzN096czdPenM3T3pzN1NVRkZUU3hMT3pzN1FVRkRSaXh0UWtGQldTeEpRVUZhTEVWQlFXbENMRkZCUVdwQ0xFVkJRVEpDTzBGQlFVRTdPMEZCUVVFc2EwaEJRMnBDTEZGQlJHbENPenRCUVVWMlFpeGpRVUZMTEVsQlFVd3NSMEZCV1N4SlFVRmFPMEZCUTBFc1kwRkJTeXhaUVVGTUxFZEJRVzlDTEUxQlFVc3NaVUZCVEN4SFFVRjFRaXhGUVVFelF6dEJRVU5CTEdOQlFVc3NTMEZCVEN4SFFVRmhMRTFCUVVzc1dVRkJUQ3hEUVVGclFpeERRVUZzUWl4RlFVRnhRaXhGUVVGeVFpeERRVUZpTzBGQlEwRXNZMEZCU3l4SlFVRk1MRWRCUVZrc1QwRkJXanRCUVVOQkxHTkJRVXNzU1VGQlREdEJRVTUxUWp0QlFVOHhRanM3T3pzclFrRkZUVHRCUVVOSUxHbENRVUZMTEd0Q1FVRk1PMEZCUTBFc2FVSkJRVXNzY1VKQlFVdzdRVUZEUVN4cFFrRkJTeXhyUWtGQlREdEJRVU5JT3pzN2RVTkJSV003UVVGRFdDeG5Ra0ZCU1N3eVFrRkJNa0lzUjBGQkwwSTdRVUZEUVN4blFrRkJTU3cwUWtGQk5FSXNRMEZCYUVNN1FVRkRRU3huUWtGQlNTeDVRa0ZCZVVJc1IwRkJOMEk3UVVGRFFTeG5Ra0ZCU1N4M1FrRkJkMElzUlVGQk5VSTdRVUZEUVN4blFrRkJTU3gxUWtGQmRVSXNRMEZCTTBJN1FVRkRRU3huUWtGQlNTeHBRa0ZCYVVJc1IwRkJja0k3UVVGRFFTeG5Ra0ZCU1N4dlFrRkJiMElzUjBGQmVFSTdRVUZEUVN4dlFrRkJVU3hMUVVGTExGTkJRV0k3UVVGRFNTeHhRa0ZCU3l4aFFVRk1PMEZCUTBFc2NVSkJRVXNzWjBKQlFVdzdRVUZEUVN4eFFrRkJTeXhwUWtGQlREdEJRVU5KTEhsQ1FVRkxMRVZCUVV3c1IwRkJWU3gzUWtGQlZqdEJRVU5CTzBGQlEwb3NjVUpCUVVzc1ZVRkJURHRCUVVOQkxIRkNRVUZMTEdsQ1FVRk1PMEZCUTBFc2NVSkJRVXNzYTBKQlFVdzdRVUZEU1N4NVFrRkJTeXhGUVVGTUxFZEJRVlVzZVVKQlFWWTdRVUZEUVR0QlFVTktMSEZDUVVGTExGZEJRVXc3UVVGRFNTeDVRa0ZCU3l4RlFVRk1MRWRCUVZVc2MwSkJRVlk3UVVGRFFUdEJRVU5LTEhGQ1FVRkxMRlZCUVV3N1FVRkRTU3g1UWtGQlN5eEZRVUZNTEVkQlFWVXNjVUpCUVZZN1FVRkRRVHRCUVdoQ1VqdEJRV3RDUVN4cFFrRkJTeXhGUVVGTUxFbEJRVmNzWTBGQldEdEJRVU5CTEdkQ1FVRkpMRXRCUVVzc1JVRkJUQ3hKUVVGWExHbENRVUZtTEVWQlFXdERMRXRCUVVzc1JVRkJUQ3hIUVVGVkxHOUNRVUZXTzBGQlEzSkRPenM3T3pzN2EwSkJSMVVzU3pzN08wRkRiRVJtT3pzN096czdPenRCUVVOQk96czdPenM3T3pzN096czdTVUZGVFN4Uk96czdRVUZEUml4elFrRkJXU3hKUVVGYUxFVkJRV2xDTEZGQlFXcENMRVZCUVRKQ08wRkJRVUU3TzBGQlFVRXNkMGhCUTJwQ0xGRkJSR2xDT3p0QlFVVjJRaXhqUVVGTExFbEJRVXdzUjBGQldTeEpRVUZhTzBGQlEwRXNZMEZCU3l4WlFVRk1MRWRCUVc5Q0xFMUJRVXNzWlVGQlRDeEhRVUYxUWl4RlFVRXpRenRCUVVOQkxHTkJRVXNzUzBGQlRDeEhRVUZoTEUxQlFVc3NXVUZCVEN4RFFVRnJRaXhEUVVGc1FpeEZRVUZ4UWl4RlFVRnlRaXhEUVVGaU8wRkJRMEVzWTBGQlN5eEpRVUZNTEVkQlFWa3NWVUZCV2p0QlFVTkJMR05CUVVzc1NVRkJURHRCUVU1MVFqdEJRVTh4UWpzN096c3JRa0ZGVFR0QlFVTklMR2xDUVVGTExHdENRVUZNTzBGQlEwRXNhVUpCUVVzc2NVSkJRVXc3UVVGRFFTeHBRa0ZCU3l4clFrRkJURHRCUVVOSU96czdkVU5CUldNN1FVRkRXQ3huUWtGQlNTd3lRa0ZCTWtJc1IwRkJMMEk3UVVGRFFTeG5Ra0ZCU1N3MFFrRkJORUlzUTBGQmFFTTdRVUZEUVN4blFrRkJTU3g1UWtGQmVVSXNSMEZCTjBJN1FVRkRRU3huUWtGQlNTeDNRa0ZCZDBJc1JVRkJOVUk3UVVGRFFTeG5Ra0ZCU1N4MVFrRkJkVUlzUTBGQk0wSTdRVUZEUVN4blFrRkJTU3hwUWtGQmFVSXNSVUZCY2tJN1FVRkRRU3huUWtGQlNTeHZRa0ZCYjBJc1IwRkJlRUk3UVVGRFFTeHZRa0ZCVVN4TFFVRkxMRk5CUVdJN1FVRkRTU3h4UWtGQlN5eGhRVUZNTzBGQlEwRXNjVUpCUVVzc1owSkJRVXc3UVVGRFFTeHhRa0ZCU3l4cFFrRkJURHRCUVVOSkxIbENRVUZMTEVWQlFVd3NSMEZCVlN4M1FrRkJWanRCUVVOQk8wRkJRMG9zY1VKQlFVc3NWVUZCVER0QlFVTkJMSEZDUVVGTExHbENRVUZNTzBGQlEwRXNjVUpCUVVzc2EwSkJRVXc3UVVGRFNTeDVRa0ZCU3l4RlFVRk1MRWRCUVZVc2VVSkJRVlk3UVVGRFFUdEJRVU5LTEhGQ1FVRkxMRmRCUVV3N1FVRkRTU3g1UWtGQlN5eEZRVUZNTEVkQlFWVXNjMEpCUVZZN1FVRkRRVHRCUVVOS0xIRkNRVUZMTEZWQlFVdzdRVUZEU1N4NVFrRkJTeXhGUVVGTUxFZEJRVlVzY1VKQlFWWTdRVUZEUVR0QlFXaENVanRCUVd0Q1FTeHBRa0ZCU3l4RlFVRk1MRWxCUVZjc1kwRkJXRHRCUVVOQkxHZENRVUZKTEV0QlFVc3NSVUZCVEN4SlFVRlhMR2xDUVVGbUxFVkJRV3RETEV0QlFVc3NSVUZCVEN4SFFVRlZMRzlDUVVGV08wRkJRM0pET3pzN096czdhMEpCUjFVc1VUczdPMEZEYkVSbU96czdPenM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenRCUVVOQk96czdPMEZCUTBFN096czdPenM3TzBsQlJVMHNVVHRCUVVOR0xITkNRVUZaTEU5QlFWb3NSVUZCY1VJc1UwRkJja0lzUlVGQlowTTdRVUZCUVRzN1FVRkROVUlzWVVGQlN5eFBRVUZNTEVkQlFXVXNUMEZCWmp0QlFVTkJMR0ZCUVVzc1YwRkJUQ3hIUVVGdFFpeEpRVUZ1UWp0QlFVTkJMR0ZCUVVzc1UwRkJUQ3hIUVVGcFFpeERRVUZxUWp0QlFVTkJMR0ZCUVVzc1VVRkJUQ3hIUVVGblFpeDNRa0ZCYUVJN1FVRkRRU3haUVVGSkxFTkJRVU1zVTBGQlRDeEZRVUZuUWp0QlFVTmFMR2xDUVVGTExFdEJRVXdzUjBGQllTeHZRa0ZCVlN4TFFVRkxMRkZCUVdZc1EwRkJZanRCUVVOQkxHbENRVUZMTEZkQlFVd3NSMEZCYlVJc1NVRkJTU3hKUVVGS0xFVkJRVzVDTzBGQlEwRXNhVUpCUVVzc1UwRkJUQ3hIUVVGcFFpeERRVUZETEV0QlFVc3NTMEZCVGl4RFFVRnFRanRCUVVOQkxHbENRVUZMTEZsQlFVd3NSMEZCYjBJc1JVRkJjRUk3UVVGRFFTeHBRa0ZCU3l4dFFrRkJURHRCUVVOQkxHbENRVUZMTEZWQlFVdzdRVUZEUVN4cFFrRkJTeXhWUVVGTU8wRkJRMGdzVTBGU1JDeE5RVkZQTEV0QlFVc3NkMEpCUVV3c1EwRkJPRUlzVTBGQk9VSTdPMEZCUlZBc1lVRkJTeXhuUWtGQlREdEJRVU5JT3pzN08ybEVRVVYzUWl4VExFVkJRVmM3UVVGRGFFTXNhVUpCUVVzc1UwRkJUQ3hIUVVGcFFpeFZRVUZWTEV0QlFVc3NVMEZCVEN4SFFVRnBRaXhEUVVFelFpeERRVUZxUWp0QlFVTklPenM3TWtOQlJXdENPMEZCUTJZc2FVSkJRVXNzYlVKQlFVd3NSMEZCTWtJc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEZGQlFYWkNMRU5CUVROQ08wRkJRMEVzYVVKQlFVc3NiVUpCUVV3c1EwRkJlVUlzV1VGQmVrSXNRMEZCYzBNc1NVRkJkRU1zUlVGQk5FTXNUVUZCTlVNN1FVRkRRU3hwUWtGQlN5eHRRa0ZCVEN4RFFVRjVRaXhOUVVGNlFpeEhRVUZyUXl4VFFVRlRMR1ZCUVZRc1EwRkJlVUlzV1VGQk0wUTdRVUZEUVN4cFFrRkJTeXh0UWtGQlRDeERRVUY1UWl4TFFVRjZRaXhIUVVGcFF5eFRRVUZUTEdWQlFWUXNRMEZCZVVJc1YwRkJNVVE3UVVGRFFTeHBRa0ZCU3l4alFVRk1PMEZCUTBnN096dDVRMEZGWjBJN1FVRkRZaXhuUWtGQlNTeE5RVUZOTEV0QlFVc3NiVUpCUVV3c1EwRkJlVUlzVlVGQmVrSXNRMEZCYjBNc1NVRkJjRU1zUTBGQlZqdEJRVU5CTEdkQ1FVRkpMRk5CUVVvc1EwRkJZeXhEUVVGa0xFVkJRV2xDTEVOQlFXcENMRVZCUVc5Q0xFdEJRVXNzYlVKQlFVd3NRMEZCZVVJc1MwRkJOME1zUlVGQmIwUXNTMEZCU3l4dFFrRkJUQ3hEUVVGNVFpeE5RVUUzUlR0QlFVTkJMR2xDUVVGTExHRkJRVXdzUTBGQmJVSXNSMEZCYmtJN1FVRkRRU3huUWtGQlNTeHhRa0ZCY1VJc1MwRkJTeXhUUVVGTUxFTkJRV1VzVFVGQmVFTTdRVUZEUVN4cFFrRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4SlFVRkpMR3RDUVVGd1FpeEZRVUYzUXl4RlFVRkZMRU5CUVRGRExFVkJRVFpETzBGQlEzcERMSEZDUVVGTExHRkJRVXdzUTBGQmJVSXNSMEZCYmtJc1JVRkJkMElzUzBGQlN5eFRRVUZNTEVOQlFXVXNRMEZCWml4RFFVRjRRanRCUVVOSU8wRkJRMFFzYVVKQlFVc3NUMEZCVEN4RFFVRmhMRmRCUVdJc1EwRkJlVUlzUzBGQlN5eHRRa0ZCT1VJN1FVRkRTRHM3TzNORFFVVmhMRWNzUlVGQlN6dEJRVU5tTEdkQ1FVRkpMRTlCUVU4c1IwRkJXRHRCUVVOQkxHbENRVUZMTEZOQlFVdzdRVUZEUVN4blFrRkJTU3hoUVVGaExGTkJRVk1zWVVGQlZDeERRVUYxUWl4aFFVRjJRaXhEUVVGcVFqdEJRVU5CTEdsQ1FVRkxMRk5CUVV3c1EwRkJaU3hWUVVGbUxFVkJRVEpDTEVOQlFUTkNMRVZCUVRoQ0xFTkJRVGxDTEVWQlFXbERMRXRCUVVzc2JVSkJRVXdzUTBGQmVVSXNTMEZCTVVRc1JVRkJhVVVzUzBGQlN5eHRRa0ZCVEN4RFFVRjVRaXhOUVVFeFJqdEJRVU5JT3pzN2MwTkJSV0VzUnl4RlFVRkxMRk1zUlVGQlZ6dEJRVU14UWl4blFrRkJTU3hKUVVGSkxGVkJRVlVzUTBGQmJFSTdRVUZEUVN4blFrRkJTU3hKUVVGSkxGVkJRVlVzUTBGQmJFSTdRVUZEUVN4blFrRkJTU3hMUVVGTExFTkJRVlE3UVVGRFFTeG5Ra0ZCU1N4TFFVRkxMRU5CUVZRN08wRkJSVUVzWjBKQlFVa3NWVUZCVlN4RlFVRldMRWxCUVdkQ0xFTkJRWEJDTEVWQlFYVkNMRXRCUVVzc1ZVRkJWU3hGUVVGbU8wRkJRM1pDTEdkQ1FVRkpMRlZCUVZVc1JVRkJWaXhKUVVGblFpeERRVUZ3UWl4RlFVRjFRaXhMUVVGTExGVkJRVlVzUlVGQlpqczdRVUZGZGtJc1owSkJRVWtzWlVGQlNqdEJRVUZCTEdkQ1FVRlpMR2RDUVVGYU8wRkJRVUVzWjBKQlFYRkNMR1ZCUVhKQ08wRkJRMEVzWjBKQlFVa3NaVUZCWlN4VlFVRlZMRmxCUVZZc1NVRkJNRUlzUzBGQlN5eHRRa0ZCVEN4RFFVRjVRaXhOUVVGNlFpeEhRVUZyUXl4RlFVRXZSVHRCUVVOQkxHOUNRVUZSTEZWQlFWVXNTVUZCVml4SlFVRnJRaXhWUVVGVkxFTkJRWEJETzBGQlEwa3NjVUpCUVVzc1QwRkJURHRCUVVOSkxIZENRVUZKTEZOQlFVbzdRVUZEUVN3MlFrRkJVeXhKUVVGVU8wRkJRMEVzT0VKQlFWVXNTVUZCVmp0QlFVTkJMRFpDUVVGVExGTkJRVk1zWVVGQlZDeERRVUYxUWl4aFFVRjJRaXhEUVVGVU8wRkJRMEVzZDBKQlFVa3NVMEZCU2l4RFFVRmpMRTFCUVdRc1JVRkJjMElzUlVGQmRFSXNSVUZCTUVJc1JVRkJNVUlzUlVGQk9FSXNUVUZCT1VJc1JVRkJjME1zVDBGQmRFTXNSVUZCSzBNc1EwRkJMME1zUlVGQmEwUXNRMEZCYkVRc1JVRkJjVVFzV1VGQmNrUXNSVUZCYlVVc1dVRkJia1U3UVVGRFFUdEJRVU5LTEhGQ1FVRkxMRTlCUVV3N1FVRkRTU3gzUWtGQlNTeFRRVUZLTzBGQlEwRXNOa0pCUVZNc1NVRkJWRHRCUVVOQkxEaENRVUZWTEV0QlFWWTdRVUZEUVN3MlFrRkJVeXhUUVVGVExHRkJRVlFzUTBGQmRVSXNZMEZCZGtJc1EwRkJWRHRCUVVOQkxIZENRVUZKTEZOQlFVb3NRMEZCWXl4TlFVRmtMRVZCUVhOQ0xFVkJRWFJDTEVWQlFUQkNMRVZCUVRGQ0xFVkJRVGhDTEUxQlFUbENMRVZCUVhORExFOUJRWFJETEVWQlFTdERMRU5CUVM5RExFVkJRV3RFTEVOQlFXeEVMRVZCUVhGRUxGbEJRWEpFTEVWQlFXMUZMRmxCUVc1Rk8wRkJRMEU3UVVGRFNpeHhRa0ZCU3l4UFFVRk1PMEZCUTBrc2QwSkJRVWtzVTBGQlNqdEJRVU5CTERaQ1FVRlRMRTFCUVZRN1FVRkRRU3c0UWtGQlZTeExRVUZXTzBGQlEwRXNOa0pCUVZNc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEdOQlFYWkNMRU5CUVZRN1FVRkRRU3h0UTBGQlpTeFZRVUZWTEZsQlFWWXNTVUZCTUVJc1MwRkJTeXh0UWtGQlRDeERRVUY1UWl4TlFVRjZRaXhIUVVGclF5eEZRVUV6UlR0QlFVTkJMSGRDUVVGSkxGTkJRVW9zUTBGQll5eE5RVUZrTEVWQlFYTkNMRVZCUVhSQ0xFVkJRVEJDTEVWQlFURkNMRVZCUVRoQ0xFMUJRVGxDTEVWQlFYTkRMRTlCUVhSRExFVkJRU3RETEVOQlFTOURMRVZCUVd0RUxFTkJRV3hFTEVWQlFYRkVMRmxCUVhKRUxFVkJRVzFGTEZsQlFXNUZPMEZCUTBFc2QwSkJRVWtzUjBGQlNpeERRVUZSTEVsQlFVc3NaVUZCWlN4RFFVRTFRaXhGUVVGblF5eEpRVUZMTEdWQlFXVXNRMEZCY0VRc1JVRkJkMFFzWlVGQlpTeEhRVUYyUlN4RlFVRTBSU3hEUVVFMVJTeEZRVUVyUlN4TFFVRkxMRVZCUVV3c1IwRkJWU3hEUVVGNlJqdEJRVU5CTEhkQ1FVRkpMRTFCUVVvN1FVRkRRVHRCUVVOS0xIRkNRVUZMTEZWQlFVdzdRVUZEU1N4M1FrRkJTU3hUUVVGS08wRkJRMEVzTmtKQlFWTXNSVUZCVkR0QlFVTkJMRGhDUVVGVkxFVkJRVlk3UVVGRFFTdzJRa0ZCVXl4VFFVRlRMR0ZCUVZRc1EwRkJkVUlzYjBKQlFYWkNMRU5CUVZRN1FVRkRRU3gzUWtGQlNTeFRRVUZLTEVOQlFXTXNUVUZCWkN4RlFVRnpRaXhGUVVGMFFpeEZRVUV3UWl4RlFVRXhRaXhGUVVFNFFpeE5RVUU1UWl4RlFVRnpReXhQUVVGMFF5eEZRVUVyUXl4RFFVRXZReXhGUVVGclJDeERRVUZzUkN4RlFVRnhSQ3haUVVGeVJDeEZRVUZ0UlN4WlFVRnVSVHRCUVVOQk8wRkJMMEpTTzBGQmFVTklPenM3Y1VOQlJWazdRVUZCUVRzN1FVRkRWQ3huUWtGQlNTeFJRVUZSTEZsQlFWa3NXVUZCVFR0QlFVTXhRaXh2UWtGQlNTeE5RVUZMTEZkQlFWUXNSVUZCYzBJN1FVRkRiRUlzTUVKQlFVc3NXVUZCVER0QlFVTkJMSE5DUVVGRkxFMUJRVXNzVTBGQlVEdEJRVU5JTEdsQ1FVaEVMRTFCUjA4c1NVRkJTU3hEUVVGRExFMUJRVXNzUzBGQlRDeERRVUZYTEZOQlFXaENMRVZCUVRKQ0xHTkJRV01zUzBGQlpEdEJRVU55UXl4aFFVeFhMRVZCUzFRc1NVRk1VeXhEUVVGYU8wRkJUVWc3T3p0MVJFRkZPRUk3UVVGRE0wSXNaMEpCUVVrc1RVRkJUU3hMUVVGTExGTkJRVXdzUTBGQlpTeEhRVUZtTEVOQlFXMUNMRlZCUVVNc1UwRkJSQ3hGUVVGbE8wRkJRM2hETEc5Q1FVRkpMRTFCUVUwN1FVRkRUaXgxUWtGQlJ5eFZRVUZWTEVOQlJGQTdRVUZGVGl4MVFrRkJSeXhWUVVGVkxFTkJSbEE3UVVGSFRpeDNRa0ZCU1N4VlFVRlZMRVZCU0ZJN1FVRkpUaXgzUWtGQlNTeFZRVUZWTEVWQlNsSTdRVUZMVGl4MVFrRkJSeXhWUVVGVk8wRkJURkFzYVVKQlFWWTdRVUZQUVN4MVFrRkJUeXhIUVVGUU8wRkJRMGdzWVVGVVV5eERRVUZXTzBGQlZVRXNiVUpCUVU4c1IwRkJVRHRCUVVOSU96czdkVU5CUldNN1FVRkRXQ3huUWtGQlNTeExRVUZMTEZOQlFVd3NSMEZCYVVJc1EwRkJha0lzUzBGQmRVSXNRMEZCTTBJc1JVRkJPRUlzUzBGQlN5eFRRVUZNTEVOQlFXVXNTVUZCWml4RFFVRnZRaXh0UWtGQlZTeExRVUZMTEV0QlFXWXNSVUZCY1VJc1MwRkJTeXhSUVVFeFFpeERRVUZ3UWl4RlFVRTVRaXhMUVVOTExFdEJRVXNzVTBGQlRDeERRVUZsTEVsQlFXWXNRMEZCYjBJc2JVSkJRVlVzUzBGQlN5eExRVUZtTEVWQlFYRkNMRXRCUVVzc1VVRkJNVUlzUTBGQmNFSTdRVUZEVEN4blFrRkJTU3hMUVVGTExGTkJRVXdzUjBGQmFVSXNSVUZCYWtJc1MwRkJkMElzUTBGQk5VSXNSVUZCSzBJc1MwRkJTeXhUUVVGTUxFTkJRV1VzU1VGQlppeERRVUZ2UWl4MVFrRkJZU3hMUVVGTExFdEJRV3hDTEVWQlFYZENMRXRCUVVzc1VVRkJOMElzUTBGQmNFSTdRVUZEYkVNN096dHhRMEZGV1R0QlFVRkJPenRCUVVOVUxHZENRVUZKTEZGQlFWRXNXVUZCV1N4WlFVRk5PMEZCUXpGQ0xHOUNRVUZKTEU5QlFVc3NTMEZCVEN4RFFVRlhMRk5CUVdZc1JVRkJNRUk3UVVGRGRFSXNNa0pCUVVzc2IwSkJRVXc3UVVGRFFTd3lRa0ZCU3l4alFVRk1PMEZCUTBFc01rSkJRVXNzYTBKQlFVdzdRVUZEU0N4cFFrRktSQ3hOUVVsUExFbEJRVWtzUTBGQlF5eFBRVUZMTEV0QlFVd3NRMEZCVnl4VFFVRm9RaXhGUVVFeVFqdEJRVU01UWl4clEwRkJZeXhMUVVGa08wRkJRMEVzTWtKQlFVc3NVVUZCVER0QlFVTklPMEZCUTBvc1lVRlVWeXhGUVZOVUxFVkJWRk1zUTBGQldqdEJRVlZJT3pzN09FTkJSWEZDTzBGQlFVRTdPMEZCUTJ4Q0xHZENRVUZKTEZGQlFWRXNXVUZCV1N4WlFVRk5PMEZCUXpGQ0xIVkNRVUZMTEZsQlFVd3NRMEZCYTBJc1NVRkJiRUlzUTBGQmRVSXNUMEZCU3l3MFFrRkJUQ3hGUVVGMlFqdEJRVU5CTEc5Q1FVRkpMRU5CUVVNc1QwRkJTeXhMUVVGTUxFTkJRVmNzVTBGQmFFSXNSVUZCTWtJc1kwRkJZeXhMUVVGa08wRkJRemxDTEdGQlNGY3NSVUZIVkN4SFFVaFRMRU5CUVZvN1FVRkpTRHM3T3l0RFFVVnpRanRCUVVOdVFpeHBRa0ZCU3l4VFFVRk1MRWRCUVdsQ0xFdEJRVXNzVTBGQlRDeERRVUZsTEUxQlFXWXNRMEZCYzBJc1ZVRkJReXhUUVVGRUxFVkJRV1U3UVVGRGJFUXNkVUpCUVU4c1ZVRkJWU3hIUVVGV0xFdEJRV3RDTEV0QlFYcENPMEZCUTBnc1lVRkdaMElzUTBGQmFrSTdRVUZIU0RzN096WkRRVVZ2UWp0QlFVTnFRaXhuUWtGQlNTeExRVUZMTEV0QlFVd3NRMEZCVnl4aFFVRllMRWRCUVRKQ0xFTkJRUzlDTEVWQlFXdERPMEZCUXpsQ0xHOUNRVUZKTEdkQ1FVRm5RaXhUUVVGVExHRkJRVlFzUTBGQmRVSXNaMEpCUVhaQ0xFTkJRWEJDTzBGQlEwRXNiMEpCUVVrc1EwRkJReXhoUVVGTUxFVkJRVzlDTzBGQlEyaENMRzlEUVVGblFpeFRRVUZUTEdGQlFWUXNRMEZCZFVJc1IwRkJka0lzUTBGQmFFSTdRVUZEUVN4clEwRkJZeXhaUVVGa0xFTkJRVEpDTEVsQlFUTkNMRVZCUVdsRExHVkJRV3BETzBGQlEwRXNOa0pCUVZNc1NVRkJWQ3hEUVVGakxGZEJRV1FzUTBGQk1FSXNZVUZCTVVJN1FVRkRTRHRCUVVORUxEaENRVUZqTEZOQlFXUXNjVXhCUVRoRUxFdEJRVXNzUzBGQlRDeERRVUZYTEdGQlFYcEZPMEZCUTBnc1lVRlNSQ3hOUVZGUE8wRkJRMGdzYjBKQlFVa3NhVUpCUVdkQ0xGTkJRVk1zWVVGQlZDeERRVUYxUWl4blFrRkJka0lzUTBGQmNFSTdRVUZEUVN4dlFrRkJTU3hqUVVGS0xFVkJRVzFDTEdWQlFXTXNUVUZCWkR0QlFVTjBRanRCUVVOS096czdiVU5CUlZVN1FVRkRVQ3huUWtGQlNTeGpRVUZqTEVsQlFVa3NTVUZCU2l4RlFVRnNRanRCUVVOQkxHZENRVUZKTEcxQ1FVRnRRaXhqUVVGakxFdEJRVXNzVjBGQk1VTTdRVUZEUVN4blFrRkJTU3hYUVVGWExFbEJRVWtzU1VGQlNpeERRVUZUTEdkQ1FVRlVMRU5CUVdZN1FVRkRRU3huUWtGQlNTeFZRVUZWTEZOQlFWTXNWVUZCVkN4RlFVRmtPMEZCUTBFc1owSkJRVWtzVlVGQlZTeFRRVUZUTEZWQlFWUXNSVUZCWkR0QlFVTkJMR2xDUVVGTExGZEJRVXdzUjBGQmJVSXNTMEZCYmtJN1FVRkRRU3gxUWtGQlZ5eExRVUZMTEdWQlFVd3NRMEZCY1VJc1QwRkJja0lzUlVGQk9FSXNUMEZCT1VJc1EwRkJXQ3hGUVVGdFJDeEhRVUZ1UkR0QlFVTklPenM3ZDBOQlJXVXNUeXhGUVVGVExFOHNSVUZCVXp0QlFVTTVRaXhuUWtGQlNTeGhRVUZoTEU5QlFVOHNOa0pCUVZBc1JVRkJjME1zVFVGQmRFTXNTMEZCYVVRc1RVRkJiRVU3UVVGRFFTeG5Ra0ZCU1N4bFFVRmxMRXRCUVVzc1dVRkJlRUk3UVVGRFFTeG5Ra0ZCU1N4VFFVRlRMRU5CUVVNc1ZVRkJSQ3hGUVVGaExFOUJRV0lzUlVGQmMwSXNUMEZCZEVJc1JVRkJLMElzV1VGQkwwSXNRMEZCWWp0QlFVTkJMR2RDUVVGSkxFTkJRVU1zWVVGQllTeFRRVUZpTEVOQlFVd3NSVUZCT0VJN1FVRkRNVUlzTmtKQlFXRXNVMEZCWWl4SlFVRXdRaXhGUVVFeFFqdEJRVU5CTEc5Q1FVRkpMR1ZCUVdVc1EwRkJReXhOUVVGRUxFTkJRVzVDTzBGQlEwRXNOa0pCUVdFc1UwRkJZaXhKUVVFd1FpeExRVUZMTEZOQlFVd3NRMEZCWlN4WlFVRm1MRU5CUVRGQ08wRkJRMGdzWVVGS1JDeE5RVWxQTzBGQlEwZ3NiMEpCUVVrc1owSkJRV1VzUzBGQlN5eExRVUZNTEVOQlFWY3NZVUZCWVN4VFFVRmlMRU5CUVZnc1EwRkJia0k3UVVGRFFTdzRRa0ZCWVN4SlFVRmlMRU5CUVd0Q0xFMUJRV3hDTzBGQlEwRXNOa0pCUVdFc1UwRkJZaXhKUVVFd1FpeExRVUZMTEZOQlFVd3NRMEZCWlN4aFFVRm1MRU5CUVRGQ08wRkJRMGc3TzBGQlJVUXNiVUpCUVU4c1VVRkJVQ3hEUVVGblFpeEpRVUZvUWl4alFVRm5ReXhWUVVGb1F5eFZRVUU0UXl4VlFVRlZMRWRCUVZZc1IwRkJaMElzVDBGQk9VUTdRVUZEU0RzN096czdPMnRDUVVkVkxGRTdPenRCUTNoTlpqczdPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenRCUVVOQk96czdPMEZCUTBFN096czdRVUZEUVRzN096dEJRVU5CT3pzN096czdRVUZGUVN4SlFVRkpMRmRCUVZjc2QwSkJRV1k3TzBGQlJVRXNUMEZCVHl4TlFVRlFMRWRCUVdkQ0xGbEJRVTA3UVVGRGJFSXNVVUZCU1N4VFFVRlRMSEZDUVVGWE8wRkJRM0JDTEdkQ1FVRlJMRU5CUVVNN1FVRkRUQ3hyUWtGQlRTeFBRVVJFTzBGQlJVd3NiVUpCUVU4c1JVRkdSanRCUVVkTUxIRkNRVUZUTEcxQ1FVRk5PMEZCUTFnc2IwSkJRVWtzYVVKQlFXbENMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeHBRa0ZCZGtJc1EwRkJja0k3UVVGRFFTd3JRa0ZCWlN4TFFVRm1MRU5CUVhGQ0xFOUJRWEpDTEVkQlFTdENMRTFCUVM5Q08wRkJRMGc3UVVGT1NTeFRRVUZFTEVWQlQwNDdRVUZEUlN4clFrRkJUU3hOUVVSU08wRkJSVVVzYlVKQlFVOHNUVUZHVkR0QlFVZEZMREpDUVVGbExIbENRVUZOTzBGQlEycENMRzlDUVVGSkxHbENRVUZwUWl4VFFVRlRMR1ZCUVZRc1EwRkJlVUlzVjBGQk9VTTdRVUZEUVN4dlFrRkJTU3hwUWtGQmFVSXNTVUZCY2tJc1JVRkJNa0k3UVVGRGRrSXNkMEpCUVVrc2FVSkJRV2xDTEZOQlFWTXNZVUZCVkN4RFFVRjFRaXhwUWtGQmRrSXNRMEZCY2tJN1FVRkRRU3h0UTBGQlpTeExRVUZtTEVOQlFYRkNMRTlCUVhKQ0xFZEJRU3RDTEU5QlFTOUNPMEZCUTBnN1FVRkRTaXhoUVZSSU8wRkJWVVVzY1VKQlFWTXNiVUpCUVUwN1FVRkRXQ3h2UWtGQlNTeFhRVUZYTEZOQlFWTXNZVUZCVkN4RFFVRjFRaXhaUVVGMlFpeERRVUZtTzBGQlEwRXNiMEpCUVVrc1RVRkJUU3hUUVVGVExHRkJRVlFzUTBGQmRVSXNTMEZCZGtJc1EwRkJWanRCUVVOQkxIbENRVUZUTEV0QlFWUXNRMEZCWlN4UFFVRm1MRWRCUVhsQ0xFMUJRWHBDTzBGQlEwRXNiMEpCUVVrc1MwRkJTaXhEUVVGVkxFOUJRVllzUjBGQmIwSXNUVUZCY0VJN1FVRkRRU3h2UWtGQlNTeGpRVUZqTEZOQlFWTXNZVUZCVkN4RFFVRjFRaXhWUVVGMlFpeERRVUZzUWp0QlFVTkJMRFJDUVVGWkxFdEJRVm9zUTBGQmEwSXNUMEZCYkVJc1IwRkJORUlzVDBGQk5VSTdRVUZEUVN4dlFrRkJTU3hWUVVGVkxGTkJRVk1zWVVGQlZDeERRVUYxUWl4VlFVRjJRaXhEUVVGa08wRkJRMEVzZFVOQlFXRXNUMEZCWWp0QlFVTklMR0ZCYmtKSU8wRkJiMEpGTEhGQ1FVRlRMRzFDUVVGTk8wRkJRMWdzYjBKQlFVa3NZMEZCWXl4VFFVRlRMR0ZCUVZRc1EwRkJkVUlzVlVGQmRrSXNRMEZCYkVJN1FVRkRRU3cwUWtGQldTeExRVUZhTEVOQlFXdENMRTlCUVd4Q0xFZEJRVFJDTEUxQlFUVkNPMEZCUTBnN1FVRjJRa2dzVTBGUVRTeEZRU3RDVGp0QlFVTkZMR3RDUVVGTkxGVkJSRkk3UVVGRlJTeHRRa0ZCVHl4WlFVWlVPMEZCUjBVc01rSkJRV1VzZVVKQlFVMDdRVUZEYWtJc2IwSkJRVWtzYVVKQlFXbENMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeHBRa0ZCZGtJc1EwRkJja0k3UVVGRFFTd3JRa0ZCWlN4TFFVRm1MRU5CUVhGQ0xFOUJRWEpDTEVkQlFTdENMRTFCUVM5Q08wRkJRMEVzYjBKQlFVa3NWMEZCVnl4VFFVRlRMR0ZCUVZRc1EwRkJkVUlzV1VGQmRrSXNRMEZCWmp0QlFVTkJMSGxDUVVGVExFdEJRVlFzUTBGQlpTeFBRVUZtTEVkQlFYbENMRTFCUVhwQ08wRkJRMGdzWVVGU1NEdEJRVk5GTEhGQ1FVRlRMR2xDUVVGRExGVkJRVVFzUlVGQlowSTdRVUZEY2tJc2IwSkJRVWtzVTBGQlV5eFhRVUZYTEV0QlFWZ3NRMEZCYVVJc1IwRkJha0lzUTBGQllqdEJRVU5CTEc5Q1FVRkpMRmxCUVZrc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEVsQlFYWkNMRU5CUVdoQ08wRkJRMEVzTUVKQlFWVXNXVUZCVml4RFFVRjFRaXhKUVVGMlFpeEZRVUUwUWl4WFFVRTFRanRCUVVOQkxEQkNRVUZWTEZOQlFWWXNSMEZCZVVJc1QwRkJUeXhEUVVGUUxFTkJRWHBDTERSR1FVRjNSQ3hQUVVGUExFTkJRVkFzUTBGQmVFUTdRVUZEUVN4NVFrRkJVeXhKUVVGVUxFTkJRV01zVjBGQlpDeERRVUV3UWl4VFFVRXhRanRCUVVOQkxHOUNRVUZKTEUxQlFVMHNVMEZCVXl4aFFVRlVMRU5CUVhWQ0xFdEJRWFpDTEVOQlFWWTdRVUZEUVN4dlFrRkJTU3hMUVVGS0xFTkJRVlVzVDBGQlZpeEhRVUZ2UWl4UFFVRndRanRCUVVOSUxHRkJha0pJTzBGQmEwSkZMSEZDUVVGVExHMUNRVUZOTzBGQlExZ3NiMEpCUVVrc1dVRkJXU3hUUVVGVExHRkJRVlFzUTBGQmRVSXNXVUZCZGtJc1EwRkJhRUk3UVVGRFFTd3dRa0ZCVlN4TFFVRldMRU5CUVdkQ0xFOUJRV2hDTEVkQlFUQkNMRTFCUVRGQ08wRkJRMGc3UVVGeVFrZ3NVMEV2UWswc1JVRnhSRXc3UVVGRFF5eHJRa0ZCVFN4VFFVUlFPMEZCUlVNc2JVSkJRVThzVTBGR1VqdEJRVWRETERKQ1FVRmxMSGxDUVVGTk8wRkJRMnBDTEc5Q1FVRkpMR2xDUVVGcFFpeFRRVUZUTEdGQlFWUXNRMEZCZFVJc2FVSkJRWFpDTEVOQlFYSkNPMEZCUTBFc0swSkJRV1VzUzBGQlppeERRVUZ4UWl4UFFVRnlRaXhIUVVFclFpeE5RVUV2UWp0QlFVTkJMRzlDUVVGSkxGZEJRVmNzVTBGQlV5eGhRVUZVTEVOQlFYVkNMRmxCUVhaQ0xFTkJRV1k3UVVGRFFTeDVRa0ZCVXl4TFFVRlVMRU5CUVdVc1QwRkJaaXhIUVVGNVFpeE5RVUY2UWp0QlFVTklMR0ZCVWtZN1FVRlRReXh4UWtGQlV5eHRRa0ZCVFR0QlFVTllMRzlDUVVGSkxHVkJRV1VzVTBGQlV5eGhRVUZVTEVOQlFYVkNMR1ZCUVhaQ0xFTkJRVzVDTzBGQlEwRXNjME5CUVZrc1dVRkJXanRCUVVOSUxHRkJXa1k3UVVGaFF5eHhRa0ZCVXl4dFFrRkJUVHRCUVVOWUxIbENRVUZUTEdGQlFWUXNRMEZCZFVJc1pVRkJka0lzUlVGQmQwTXNVMEZCZUVNc1IwRkJiMFFzUlVGQmNFUTdRVUZEU0R0QlFXWkdMRk5CY2tSTExFVkJjVVZNTzBGQlEwTXNhMEpCUVUwc1kwRkVVRHRCUVVWRExHMUNRVUZQTEcxQ1FVWlNPMEZCUjBNc01rSkJRV1VzZVVKQlFVMDdRVUZEYWtJc2IwSkJRVWtzYVVKQlFXbENMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeHBRa0ZCZGtJc1EwRkJja0k3UVVGRFFTd3JRa0ZCWlN4TFFVRm1MRU5CUVhGQ0xFOUJRWEpDTEVkQlFTdENMRTFCUVM5Q08wRkJRMEVzYjBKQlFVa3NWMEZCVnl4VFFVRlRMR0ZCUVZRc1EwRkJkVUlzV1VGQmRrSXNRMEZCWmp0QlFVTkJMSGxDUVVGVExFdEJRVlFzUTBGQlpTeFBRVUZtTEVkQlFYbENMRTFCUVhwQ08wRkJRMGdzWVVGU1JqdEJRVk5ETEhGQ1FVRlRMR2xDUVVGRExFdEJRVVFzUlVGQlZ6dEJRVU5vUWl3MlEwRkJiVUlzUzBGQmJrSTdRVUZEU0N4aFFWaEdPMEZCV1VNc2NVSkJRVk1zYlVKQlFVMDdRVUZEV0N4dlFrRkJTU3hYUVVGWExGTkJRVk1zWVVGQlZDeERRVUYxUWl4alFVRjJRaXhEUVVGbU8wRkJRMEVzYjBKQlFVa3NZMEZCWXl4VFFVRlRMR0ZCUVZRc1EwRkJkVUlzWTBGQmRrSXNRMEZCYkVJN1FVRkRRU3cwUWtGQldTeExRVUZhTEVOQlFXdENMRTlCUVd4Q0xFZEJRVFJDTEUxQlFUVkNPMEZCUTBFc2VVSkJRVk1zVFVGQlZEdEJRVU5JTzBGQmFrSkdMRk5CY2tWTExFVkJkVVpNTzBGQlEwTXNhMEpCUVUwc1VVRkVVRHRCUVVWRExHMUNRVUZQTEZGQlJsSTdRVUZIUXl3eVFrRkJaU3g1UWtGQlRUdEJRVU5xUWl4dlFrRkJTU3hwUWtGQmFVSXNVMEZCVXl4aFFVRlVMRU5CUVhWQ0xHbENRVUYyUWl4RFFVRnlRanRCUVVOQkxDdENRVUZsTEV0QlFXWXNRMEZCY1VJc1QwRkJja0lzUjBGQkswSXNUVUZCTDBJN1FVRkRRU3h2UWtGQlNTeFhRVUZYTEZOQlFWTXNZVUZCVkN4RFFVRjFRaXhaUVVGMlFpeERRVUZtTzBGQlEwRXNlVUpCUVZNc1MwRkJWQ3hEUVVGbExFOUJRV1lzUjBGQmVVSXNUVUZCZWtJN1FVRkRTQ3hoUVZKR08wRkJVME1zY1VKQlFWTXNiVUpCUVUwN1FVRkRXQ3h2UWtGQlNTeFhRVUZYTEZOQlFWTXNZVUZCVkN4RFFVRjFRaXhYUVVGMlFpeERRVUZtTzBGQlEwRXNiMEpCUVVrc1EwRkJReXhSUVVGTUxFVkJRV1U3UVVGRFdEdEJRVU5JTEdsQ1FVWkVMRTFCUlU4N1FVRkRTQ3cyUWtGQlV5eExRVUZVTEVOQlFXVXNUMEZCWml4SFFVRjVRaXhQUVVGNlFqdEJRVU5JTzBGQlEwb3NZVUZvUWtZN1FVRnBRa01zY1VKQlFWTXNiVUpCUVUwN1FVRkRXQ3h2UWtGQlNTeFhRVUZYTEZOQlFWTXNZVUZCVkN4RFFVRjFRaXhYUVVGMlFpeERRVUZtTzBGQlEwRXNlVUpCUVZNc1MwRkJWQ3hEUVVGbExFOUJRV1lzUjBGQmVVSXNUVUZCZWtJN1FVRkRTRHRCUVhCQ1JpeFRRWFpHU3p0QlFVUlpMRXRCUVZnc1EwRkJZanRCUVdkSVNDeERRV3BJUkRzN2EwSkJiVWhsTEZFN096dEJRemRJWmpzN096czdPenM3UVVGRFFUczdPenM3T3pzN1NVRkZUU3hqTzBGQlEwWXNORUpCUVZrc1MwRkJXaXhGUVVGdFFqdEJRVUZCT3p0QlFVTm1MR0ZCUVVzc1lVRkJUQ3hIUVVGeFFpeExRVUZMTEV0QlFVd3NRMEZCVnl4aFFVRmhMRk5CUVdJc1EwRkJXQ3hGUVVGdlF5eExRVUZ3UXl4RlFVRXlReXhEUVVFelF5eERRVUZ5UWp0QlFVTkJMR0ZCUVVzc2NVSkJRVXdzUjBGQk5rSXNVMEZCVXl4aFFVRlVMRU5CUVhWQ0xFdEJRWFpDTEVOQlFUZENPMEZCUTBFc1lVRkJTeXh4UWtGQlRDeERRVUV5UWl4WlFVRXpRaXhEUVVGM1F5eEpRVUY0UXl4RlFVRTRReXhoUVVFNVF6dEJRVU5CTEdsQ1FVRlRMRWxCUVZRc1EwRkJZeXhYUVVGa0xFTkJRVEJDTEV0QlFVc3NjVUpCUVM5Q08wRkJRMEVzWVVGQlN5eFhRVUZNTEVkQlFXMUNMRWxCUVc1Q08wRkJRMEVzWVVGQlN5eFpRVUZNTzBGQlEwZzdPenM3ZFVOQlJXTTdRVUZEV0N4cFFrRkJTeXhqUVVGTU8wRkJRMEVzYVVKQlFVc3NjMEpCUVV3N1FVRkRRU3hwUWtGQlN5eHpRa0ZCVER0QlFVTklPenM3ZVVOQlJXVTdRVUZEV2l4blFrRkJTU3hYUVVGWExGTkJRVk1zWVVGQlZDeERRVUYxUWl4alFVRjJRaXhEUVVGbU8wRkJRMEVzWjBKQlFVa3NVVUZCU2l4RlFVRmhPMEZCUTFRc2VVSkJRVk1zUzBGQlZDeERRVUZsTEU5QlFXWXNSMEZCZVVJc1QwRkJla0k3UVVGRFNDeGhRVVpFTEUxQlJVODdRVUZEU0N4eFFrRkJTeXhYUVVGTUxFZEJRVzFDTEZOQlFWTXNZVUZCVkN4RFFVRjFRaXhMUVVGMlFpeERRVUZ1UWp0QlFVTkJMSEZDUVVGTExGZEJRVXdzUTBGQmFVSXNXVUZCYWtJc1EwRkJPRUlzU1VGQk9VSXNSVUZCYjBNc1lVRkJjRU03UVVGRFFTeDVRa0ZCVXl4SlFVRlVMRU5CUVdNc1YwRkJaQ3hEUVVFd1FpeExRVUZMTEZkQlFTOUNPMEZCUTBFc2IwSkJRVWtzZFVKQlFYVkNMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeFBRVUYyUWl4RFFVRXpRanRCUVVOQkxIRkRRVUZ4UWl4VFFVRnlRaXhIUVVGcFF5eHhRa0ZCYWtNN1FVRkRRU3h4UTBGQmNVSXNXVUZCY2tJc1EwRkJhME1zU1VGQmJFTXNSVUZCZFVNc2MwSkJRWFpETzBGQlEwRXNjVUpCUVVzc1YwRkJUQ3hEUVVGcFFpeFhRVUZxUWl4RFFVRTJRaXh2UWtGQk4wSTdRVUZEUVN4eFFrRkJTeXhsUVVGTUxFZEJRWFZDTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXh2UWtGQmFrSXNSVUZCYzBNc2FVSkJRWFJETEVWQlFYZEVMRVZCUVhoRUxFTkJRWFpDTzBGQlEwRXNjVUpCUVVzc1pVRkJUQ3hEUVVGeFFpeFpRVUZ5UWl4RFFVRnJReXhQUVVGc1F5eEZRVUV5UXl4SlFVRXpRenRCUVVOQkxIRkNRVUZMTEdkQ1FVRk1MRWRCUVhkQ0xFdEJRVXNzVjBGQlRDeERRVUZwUWl4TFFVRkxMRmRCUVhSQ0xFVkJRV3RETEd0Q1FVRnNReXhGUVVGeFJDeExRVUZMTEdGQlFVd3NRMEZCYlVJc1RVRkJia0lzUjBGQk5FSXNRMEZCYWtZc1EwRkJlRUk3UVVGRFFTeHhRa0ZCU3l4blFrRkJUQ3hEUVVGelFpeExRVUZMTEZkQlFUTkNPMEZCUTBFc2NVSkJRVXNzYjBKQlFVdzdRVUZEU0R0QlFVTktPenM3YjBOQlJWY3NUeXhGUVVGUkxFVXNSVUZCUnl4UkxFVkJRVlU3UVVGRE4wSXNaMEpCUVVrc1VVRkJVU3hUUVVGVExHRkJRVlFzUTBGQmRVSXNUMEZCZGtJc1EwRkJXanRCUVVOQkxHdENRVUZOTEZsQlFVNHNRMEZCYlVJc1NVRkJia0lzUlVGQmVVSXNSVUZCZWtJN1FVRkRRU3hyUWtGQlRTeFpRVUZPTEVOQlFXMUNMRTFCUVc1Q0xFVkJRVEpDTEU5QlFUTkNPMEZCUTBFc2EwSkJRVTBzV1VGQlRpeERRVUZ0UWl4UFFVRnVRaXhGUVVFMFFpeEhRVUUxUWp0QlFVTkJMR3RDUVVGTkxGbEJRVTRzUTBGQmJVSXNTMEZCYmtJc1JVRkJNRUlzUjBGQk1VSTdRVUZEUVN4clFrRkJUU3haUVVGT0xFTkJRVzFDTEV0QlFXNUNMRVZCUVRCQ0xGRkJRVEZDTzBGQlEwRXNiMEpCUVZFc1YwRkJVaXhEUVVGdlFpeExRVUZ3UWp0QlFVTkJMRzFDUVVGUExFdEJRVkE3UVVGRFNEczdPekpEUVVWcFFqdEJRVU5rTEdsQ1FVRkxMRlZCUVV3c1IwRkJhMElzVTBGQlV5eGhRVUZVTEVOQlFYVkNMRTlCUVhaQ0xFTkJRV3hDTzBGQlEwRXNhVUpCUVVzc1ZVRkJUQ3hEUVVGblFpeFpRVUZvUWl4RFFVRTJRaXhKUVVFM1FpeEZRVUZ0UXl4WlFVRnVRenRCUVVOQkxHbENRVUZMTEZWQlFVd3NRMEZCWjBJc1dVRkJhRUlzUTBGQk5rSXNUVUZCTjBJc1JVRkJjVU1zVVVGQmNrTTdRVUZEUVN4cFFrRkJTeXhWUVVGTUxFTkJRV2RDTEZsQlFXaENMRU5CUVRaQ0xFOUJRVGRDTEVWQlFYTkRMRTFCUVhSRE8wRkJRMEVzYVVKQlFVc3NWMEZCVEN4RFFVRnBRaXhYUVVGcVFpeERRVUUyUWl4TFFVRkxMRlZCUVd4RE8wRkJRMGc3T3pzclEwRkZjVUk3UVVGRGJFSXNaMEpCUVVrc01rSkJRVEpDTEV0QlFVc3NhVUpCUVV3c1EwRkJkVUlzU1VGQmRrSXNRMEZCTkVJc1NVRkJOVUlzUTBGQkwwSTdRVUZEUVN4cFFrRkJTeXhWUVVGTUxFZEJRV3RDTEZOQlFWTXNZVUZCVkN4RFFVRjFRaXhoUVVGMlFpeERRVUZzUWp0QlFVTkJMR2xDUVVGTExGVkJRVXdzUTBGQlowSXNaMEpCUVdoQ0xFTkJRV2xETEU5QlFXcERMRVZCUVhsRExIZENRVUY2UXpzN1FVRkZRU3huUWtGQlNTeHhRa0ZCY1VJc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEVsQlFXcENMRU5CUVhOQ0xFbEJRWFJDTEVOQlFYcENPMEZCUTBFc2FVSkJRVXNzVjBGQlRDeERRVUZwUWl4blFrRkJha0lzUTBGQmEwTXNVVUZCYkVNc1JVRkJNa01zYTBKQlFUTkRPMEZCUTBnN096dHZRMEZGVnl4RkxFVkJRVWM3UVVGRFdDeG5Ra0ZCU1N4VFFVRlRMRWRCUVVjc1RVRkJhRUk3UVVGRFFTeG5Ra0ZCU1N4UFFVRlBMRTlCUVZBc1EwRkJaU3h0UWtGQlppeERRVUZLTEVWQlFYbERPMEZCUTNKRExIRkNRVUZMTEZGQlFVd3NRMEZCWXl4VFFVRmtMRWRCUVRCQ0xFTkJRVU1zVDBGQlR5eExRVUZzUXp0QlFVTkJMSEZDUVVGTExGRkJRVXdzUTBGQll5eDNRa0ZCWkN4RFFVRjFReXhMUVVGTExHRkJRVFZETzBGQlEwRXNjVUpCUVVzc1VVRkJUQ3hEUVVGakxHTkJRV1E3UVVGRFNDeGhRVXBFTEUxQlNVOHNTVUZCU1N4UFFVRlBMRTlCUVZBc1EwRkJaU3hyUWtGQlppeExRVUZ6UXl4TFFVRkxMR0ZCUVV3c1EwRkJiVUlzVFVGQmJrSXNSMEZCTkVJc1EwRkJOVUlzUzBGQmEwTXNTMEZCU3l4UlFVRk1MRU5CUVdNc1UwRkJNVVlzUlVGQmNVYzdRVUZEZUVjc2NVSkJRVXNzYjBKQlFVdzdRVUZEUVN4eFFrRkJTeXh6UWtGQlREdEJRVU5JTzBGQlEwbzdPenN3UTBGRmFVSXNSU3hGUVVGSE8wRkJRMnBDTEdkQ1FVRkpMRk5CUVZNc1IwRkJSeXhOUVVGb1FqdEJRVU5CTEdkQ1FVRkpMRTlCUVU4c1MwRkJVQ3hMUVVGcFFpeE5RVUZ5UWl4RlFVRTJRanRCUVVONlFpeDFRa0ZCVHl4TFFVRlFMRWRCUVdVc1RVRkJaanRCUVVOQkxIVkNRVUZQTEV0QlFWQXNRMEZCWVN4dFFrRkJZaXhIUVVGdFF5eEhRVUZ1UXp0QlFVTkJMRzlDUVVGSkxFdEJRVXNzUzBGQlZDeEZRVUZuUWl4TFFVRkxMRzlDUVVGTU8wRkJRMjVDTEdGQlNrUXNUVUZMU3l4SlFVRkpMRTlCUVU4c1MwRkJVQ3hMUVVGcFFpeE5RVUZ5UWl4RlFVRTJRanRCUVVNNVFpeDFRa0ZCVHl4TFFVRlFMRWRCUVdVc1RVRkJaanRCUVVOQkxIVkNRVUZQTEV0QlFWQXNRMEZCWVN4dFFrRkJZaXhIUVVGdFF5eExRVUZ1UXp0QlFVTkJMRzlDUVVGSkxFTkJRVU1zUzBGQlN5eExRVUZXTEVWQlFXbENMRXRCUVVzc2MwSkJRVXc3UVVGRGFrSXNiMEpCUVVrc1MwRkJTeXhoUVVGTUxFTkJRVzFDTEUxQlFXNUNMRWRCUVRSQ0xFTkJRVFZDTEV0QlFXdERMRXRCUVVzc1VVRkJUQ3hEUVVGakxGTkJRWEJFTEVWQlFTdEVPMEZCUXpORUxIbENRVUZMTEdkQ1FVRk1MRU5CUVhOQ0xFdEJRWFJDTEVkQlFUaENMRU5CUVRsQ08wRkJRMEVzZVVKQlFVc3NVVUZCVEN4RFFVRmpMRk5CUVdRc1IwRkJNRUlzUTBGQk1VSTdRVUZEU0R0QlFVTktPMEZCUTBvN096dHBSRUZGZDBJN1FVRkRja0lzYVVKQlFVc3NVVUZCVEN4SFFVRm5RaXgxUWtGQllTeExRVUZMTEhGQ1FVRnNRaXhGUVVGNVF5eExRVUZMTEdGQlFUbERMRU5CUVdoQ08wRkJRMGc3T3p0cFJFRkZkMEk3UVVGQlFUczdRVUZEY2tJc2FVSkJRVXNzUzBGQlRDeEhRVUZoTEZsQlFWa3NXVUZCVFR0QlFVTXpRaXhyUWtGQlJTeE5RVUZMTEZGQlFVd3NRMEZCWXl4VFFVRm9RanRCUVVOQkxHOUNRVUZKTEVOQlFVTXNUVUZCU3l4blFrRkJUQ3hEUVVGelFpeExRVUYyUWl4TFFVRnBReXhOUVVGTExGRkJRVXdzUTBGQll5eFRRVUZrTEVkQlFUQkNMRU5CUVM5RUxFVkJRV3RGTzBGQlF6bEVMREJDUVVGTExHZENRVUZNTEVOQlFYTkNMRXRCUVhSQ0xFZEJRVGhDTEUxQlFVc3NVVUZCVEN4RFFVRmpMRk5CUVRWRE8wRkJRMGc3UVVGRFJDeHpRa0ZCU3l4UlFVRk1MRU5CUVdNc2QwSkJRV1FzUTBGQmRVTXNUVUZCU3l4aFFVRTFRenRCUVVOQkxITkNRVUZMTEZGQlFVd3NRMEZCWXl4alFVRmtPMEZCUTBFc2IwSkJRVWtzVFVGQlN5eGhRVUZNTEVOQlFXMUNMRTFCUVc1Q0xFZEJRVFJDTEVOQlFUVkNMRXRCUVd0RExFMUJRVXNzVVVGQlRDeERRVUZqTEZOQlFYQkVMRVZCUVN0RU8wRkJRek5FTERCQ1FVRkxMRlZCUVV3c1EwRkJaMElzUzBGQmFFSXNSMEZCZDBJc1RVRkJlRUk3UVVGRFFTd3dRa0ZCU3l4VlFVRk1MRU5CUVdkQ0xFdEJRV2hDTEVOQlFYTkNMRzFDUVVGMFFpeEhRVUUwUXl4SFFVRTFRenRCUVVOQkxEQkNRVUZMTEc5Q1FVRk1PMEZCUTBnN1FVRkRTaXhoUVZwWkxFVkJXVllzUzBGQlN5eGxRVUZNTEVOQlFYRkNMRXRCV2xnc1EwRkJZanRCUVdGSU96czdLME5CUlhGQ08wRkJRMnhDTERCQ1FVRmpMRXRCUVVzc1MwRkJia0k3UVVGRFFTeHBRa0ZCU3l4TFFVRk1MRWRCUVdFc1EwRkJZanRCUVVOSU96czdPenM3YTBKQlIxVXNZenM3TzBGRE0waG1PenM3T3pzN096czdPMGxCUTAwc1R6dEJRVU5HTEhGQ1FVRlpMRmxCUVZvc1JVRkJNRUk3UVVGQlFUczdRVUZEZEVJc1lVRkJTeXhaUVVGTUxFZEJRVzlDTEZsQlFYQkNPMEZCUTBFc1lVRkJTeXh0UWtGQlREdEJRVU5JT3pzN096aERRVVZ4UWp0QlFVTnNRaXhwUWtGQlN5eExRVUZNTEVkQlFXRXNVMEZCVXl4aFFVRlVMRU5CUVhWQ0xFOUJRWFpDTEVOQlFXSTdRVUZEUVN4cFFrRkJTeXhMUVVGTUxFTkJRVmNzV1VGQldDeERRVUYzUWl4SlFVRjRRaXhGUVVFNFFpeFRRVUU1UWp0QlFVTkJMR2xDUVVGTExFdEJRVXdzUTBGQlZ5eFRRVUZZTzBGQlEwRXNaMEpCUVVrc1lVRkJZU3hUUVVGaUxFTkJRVW9zUlVGQk5rSTdRVUZEZWtJc2NVSkJRVXNzV1VGQlRDeEhRVUZ2UWl4TFFVRkxMRXRCUVV3c1EwRkJWeXhoUVVGaExGTkJRV0lzUTBGQldDeERRVUZ3UWp0QlFVTkJMSEZDUVVGTExGZEJRVXc3UVVGRFNEdEJRVU5LT3pzN2MwTkJSV0U3UVVGRFZpeHBRa0ZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEV0QlFVc3NXVUZCVEN4RFFVRnJRaXhOUVVGMFF5eEZRVUU0UXl4RlFVRkZMRU5CUVdoRUxFVkJRVzFFTzBGQlF5OURMRzlDUVVGSkxFdEJRVXNzVTBGQlV5eGhRVUZVTEVOQlFYVkNMRWxCUVhaQ0xFTkJRVlE3UVVGRFFTeHhRa0ZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEV0QlFVc3NXVUZCVEN4RFFVRnJRaXhEUVVGc1FpeEZRVUZ4UWl4TlFVRjZReXhGUVVGcFJDeEZRVUZGTEVOQlFXNUVMRVZCUVhORU8wRkJRMnhFTEhkQ1FVRkpMRXRCUVVzc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEVsQlFYWkNMRU5CUVZRN1FVRkRRU3gzUWtGQlNTeE5RVUZOTEV0QlFVc3NXVUZCVEN4RFFVRnJRaXhEUVVGc1FpeEZRVUZ4UWl4TlFVRnlRaXhIUVVFNFFpeERRVUY0UXl4RlFVRXlReXhIUVVGSExGTkJRVWdzUjBGQlpTeExRVUZMTEZsQlFVd3NRMEZCYTBJc1EwRkJiRUlzUlVGQmNVSXNRMEZCY2tJc1EwRkJaaXhEUVVFelF5eExRVU5MTzBGQlEwUXNORUpCUVVrc1UwRkJVeXhUUVVGVExHRkJRVlFzUTBGQmRVSXNSMEZCZGtJc1EwRkJZanRCUVVOQkxDdENRVUZQTEZsQlFWQXNRMEZCYjBJc1QwRkJjRUlzUlVGQk5rSXNhMEpCUVRkQ08wRkJRMEVzSzBKQlFVOHNXVUZCVUN4RFFVRnZRaXhOUVVGd1FpeHhRa0ZCTmtNc1EwRkJOME03UVVGRFFTd3JRa0ZCVHl4VFFVRlFMRWRCUVcxQ0xFMUJRVzVDTzBGQlEwRXNNa0pCUVVjc1YwRkJTQ3hEUVVGbExFMUJRV1k3UVVGRFNEdEJRVU5FTEhWQ1FVRkhMRmRCUVVnc1EwRkJaU3hGUVVGbU8wRkJRMGc3UVVGRFJDeHhRa0ZCU3l4TFFVRk1MRU5CUVZjc1YwRkJXQ3hEUVVGMVFpeEZRVUYyUWp0QlFVTklPMEZCUTBRc2FVSkJRVXNzV1VGQlRDeERRVUZyUWl4VFFVRnNRaXhIUVVFNFFpeEZRVUU1UWp0QlFVTkJMR2xDUVVGTExGbEJRVXdzUTBGQmEwSXNWMEZCYkVJc1EwRkJPRUlzUzBGQlN5eExRVUZ1UXp0QlFVTklPenM3T3pzN2EwSkJSMVVzVHpzN08wRkRka05tT3pzN096czdPenM3TzBsQlEwMHNVVHRCUVVOR0xIZENRVUZoTzBGQlFVRTdPMEZCUTFRc1lVRkJTeXhUUVVGTUxFZEJRV2xDTEVWQlFXcENPMEZCUTBnN096czdNa0pCUlVVc1NTeEZRVUZOTEVVc1JVRkJTVHRCUVVOVUxHbENRVUZMTEZOQlFVd3NRMEZCWlN4SlFVRm1MRWxCUVhWQ0xFdEJRVXNzVTBGQlRDeERRVUZsTEVsQlFXWXNTMEZCZDBJc1JVRkJMME03UVVGRFFTeHBRa0ZCU3l4VFFVRk1MRU5CUVdVc1NVRkJaaXhGUVVGeFFpeEpRVUZ5UWl4RFFVRXdRaXhGUVVFeFFqdEJRVU5JT3pzN1owTkJSVThzU1N4RlFVRmxPMEZCUVVFc09FTkJRVTRzU1VGQlRUdEJRVUZPTEc5Q1FVRk5PMEZCUVVFN08wRkJRMjVDTEdkQ1FVRkpMRXRCUVVzc1UwRkJUQ3hEUVVGbExFbEJRV1lzUTBGQlNpeEZRVUV3UWp0QlFVTjBRaXh4UWtGQlN5eFRRVUZNTEVOQlFXVXNTVUZCWml4RlFVRnhRaXhQUVVGeVFpeERRVUUyUWp0QlFVRkJMREpDUVVGTkxHOUNRVUZOTEVsQlFVNHNRMEZCVGp0QlFVRkJMR2xDUVVFM1FqdEJRVU5JTzBGQlEwbzdPenMwUWtGRlJ5eEpMRVZCUVUwc1JTeEZRVUZKTzBGQlExWXNaMEpCUVVrc1EwRkJReXhGUVVGTUxFVkJRVk03UVVGRFRDeDFRa0ZCVHl4TFFVRkxMRk5CUVV3c1EwRkJaU3hKUVVGbUxFTkJRVkE3UVVGRFNDeGhRVVpFTEUxQlJVODdRVUZEU0N4eFFrRkJTeXhUUVVGTUxFTkJRV1VzU1VGQlppeEpRVUYxUWl4TFFVRkxMRk5CUVV3c1EwRkJaU3hKUVVGbUxFVkJRWEZDTEUxQlFYSkNMRU5CUVRSQ0xGVkJRVU1zWVVGQlJEdEJRVUZCTERKQ1FVRnRRaXhGUVVGRkxFOUJRVThzWVVGQlZDeERRVUZ1UWp0QlFVRkJMR2xDUVVFMVFpeERRVUYyUWp0QlFVTklPMEZCUTBvN096czJRa0ZGU1N4SkxFVkJRVTBzUlN4RlFVRkpPMEZCUTFnc2FVSkJRVXNzUlVGQlRDeERRVUZSTEVsQlFWSXNSVUZCWXl4UFFVRmtPMEZCUTBFc1owSkJRVWtzVDBGQlR5eEpRVUZZT3p0QlFVVkJMSEZDUVVGVExFOUJRVlFzUjBGQk1FSTdRVUZEZEVJN1FVRkRRU3gxUWtGQlR5eExRVUZMTEZOQlFVd3NRMEZCWlN4SlFVRm1MRU5CUVZBN1FVRkRTRHRCUVVOS096czdPenM3YTBKQlIxVXNVVHM3TzBGRGNFTm1PenM3T3pzN096czdPMGxCUTAwc1RUdEJRVU5HTEhOQ1FVRXdRanRCUVVGQk96dEJRVUZCTEZsQlFXUXNUMEZCWXl4MVJVRkJTaXhGUVVGSk96dEJRVUZCT3p0QlFVTjBRaXhoUVVGTExFMUJRVXdzUjBGQll5eFJRVUZSTEUxQlFYUkNPMEZCUTBFc1pVRkJUeXhuUWtGQlVDeERRVUYzUWl4WlFVRjRRaXhGUVVGelF6dEJRVUZCTEcxQ1FVRk5MRTFCUVVzc1UwRkJUQ3hEUVVGbExFOUJRVThzVVVGQlVDeERRVUZuUWl4SlFVRXZRaXhEUVVGT08wRkJRVUVzVTBGQmRFTTdRVUZEUVN4aFFVRkxMRk5CUVV3c1EwRkJaU3hQUVVGUExGRkJRVkFzUTBGQlowSXNTVUZCTDBJN1FVRkRTRHM3T3p0eFEwRkRXU3hKTEVWQlFVMDdRVUZEWml4blFrRkJTU3hqUVVGS08wRkJRMEVzWjBKQlFVa3NUMEZCVHl4SlFVRllPMEZCUTBFc1owSkJRVWtzUTBGQlF5eExRVUZMTEUxQlFWWXNSVUZCYTBJN1FVRkRaRHRCUVVOSUxHRkJSa1FzVFVGRlR5eEpRVUZKTEV0QlFVc3NUVUZCVEN4RFFVRlpMRTFCUVZvc1MwRkJkVUlzUTBGQk0wSXNSVUZCT0VJN1FVRkRha01zZFVKQlFVOHNTMEZCU3l4VFFVRk1MRU5CUVdVc1NVRkJaaXhGUVVGeFFpeExRVUZMTEUxQlFVd3NRMEZCV1N4RFFVRmFMRU5CUVhKQ0xFTkJRVkE3UVVGRFNDeGhRVVpOTEUxQlJVRTdRVUZEU0N4eFFrRkJTeXhOUVVGTUxFTkJRVmtzVDBGQldpeERRVUZ2UWl4VlFVRkRMRk5CUVVRc1JVRkJaVHRCUVVNdlFpeDNRa0ZCU1N4TFFVRkxMRk5CUVV3c1EwRkJaU3hKUVVGbUxFVkJRWEZDTEZOQlFYSkNMRU5CUVVvc1JVRkJjVU03UVVGRGFrTXNLMEpCUVU4c1VVRkJVU3hUUVVGbU8wRkJRMGc3UVVGRFNpeHBRa0ZLUkR0QlFVdElPMEZCUTBRc2JVSkJRVThzUzBGQlVEdEJRVU5JT3pzN2EwTkJSVk1zU1N4RlFVRk5MRWtzUlVGQlN6dEJRVU5xUWl4blFrRkJTU3hQUVVGUExFdEJRVXNzUzBGQldpeExRVUZ6UWl4UlFVRjBRaXhKUVVGclF5eFRRVUZUTEV0QlFVc3NTMEZCYUVRc1NVRkRRU3hQUVVGUExFdEJRVXNzUzBGQldpeExRVUZ6UWl4VlFVRjBRaXhKUVVGdlF5eExRVUZMTEV0QlFVd3NRMEZCVnl4SlFVRllMRU5CUkhCRExFbEJSVUVzUzBGQlN5eExRVUZNTEZsQlFYTkNMRTFCUVhSQ0xFbEJRV2RETEV0QlFVc3NTMEZCVEN4RFFVRlhMRXRCUVVzc1MwRkJhRUlzUTBGR2NFTXNSVUZGTkVRN1FVRkRlRVFzZFVKQlFVOHNTVUZCVUR0QlFVTklPMEZCUTBvN096dHJRMEZGVXl4SkxFVkJRVXM3UVVGQlFUczdRVUZEV0N4dFFrRkJUeXhMUVVGTExFdEJRVXdzUTBGQlZ5eERRVUZZTEVOQlFWQTdRVUZEUVN4blFrRkJTU3hYUVVGWExFdEJRVXNzVjBGQmNFSTdRVUZEUVN4blFrRkJTU3hYUVVGWExFdEJRVXNzV1VGQlRDeERRVUZyUWl4SlFVRnNRaXhEUVVGbU96dEJRVVZCTEdkQ1FVRkpMRU5CUVVNc1VVRkJUQ3hGUVVGbE8wRkJRMWc3UVVGRFNDeGhRVVpFTEUxQlJVOHNTVUZCU1N4UFFVRlBMRk5CUVZNc1MwRkJhRUlzUzBGQk1FSXNVVUZCT1VJc1JVRkJkME03UVVGRE0wTXNjVUpCUVVzc1YwRkJUQ3hIUVVGdFFpeFRRVUZUTEV0QlFUVkNPMEZCUTBnc1lVRkdUU3hOUVVWQkxFbEJRVWtzVTBGQlV5eExRVUZVTEZsQlFUQkNMRTFCUVRsQ0xFVkJRWE5ETzBGQlEzcERMSEZDUVVGTExGZEJRVXdzUjBGQmJVSXNTMEZCU3l4TFFVRk1MRU5CUVZjc1UwRkJVeXhMUVVGd1FpeEZRVUV5UWl4RFFVRXpRaXhEUVVGdVFqdEJRVU5JTEdGQlJrMHNUVUZGUVN4SlFVRkpMRTlCUVU4c1UwRkJVeXhMUVVGb1FpeExRVUV3UWl4VlFVRTVRaXhGUVVFd1F6dEJRVU0zUXl4eFFrRkJTeXhYUVVGTUxFZEJRVzFDTEZOQlFWTXNTMEZCVkN4RFFVRmxMRWxCUVdZc1EwRkJia0k3UVVGRFNEczdRVUZGUkN4dlFrRkJVU3hQUVVGU0xFZEJRMHNzU1VGRVRDeERRVU5WTEZsQlFVMDdRVUZEVWl4dlFrRkJTU3haUVVGWkxGTkJRVk1zVDBGQmVrSXNSVUZCYTBNN1FVRkRPVUlzTWtKQlFVc3NZMEZCVEN4SFFVRnpRaXhUUVVGVExFOUJRVlFzUTBGQmFVSXNUMEZCU3l4alFVRjBRaXhEUVVGMFFpeEhRVUU0UkN4VFFVRlRMRTlCUVZRc1JVRkJPVVE3UVVGRFNEdEJRVU5LTEdGQlRFd3NSVUZOU3l4SlFVNU1MRU5CVFZVc1dVRkJUVHRCUVVOU0xHOUNRVUZKTEZsQlFWa3NVMEZCVXl4aFFVRjZRaXhGUVVGM1F6dEJRVU53UXl3eVFrRkJTeXhYUVVGTUxFZEJRVzFDTEZOQlFWTXNZVUZCVkN4RFFVRjFRaXhQUVVGTExGZEJRVFZDTEVOQlFXNUNMRWRCUVRoRUxGTkJRVk1zWVVGQlZDeEZRVUU1UkR0QlFVTklPMEZCUTBvc1lVRldUQ3hGUVZkTExFbEJXRXdzUTBGWFZTeFpRVUZOTzBGQlExSXNiMEpCUVVrc1dVRkJXU3hUUVVGVExFOUJRWHBDTEVWQlFXdERPMEZCUXpsQ0xESkNRVUZMTEZkQlFVd3NSMEZCYlVJc1UwRkJVeXhQUVVGVUxFTkJRV2xDTEU5QlFVc3NWMEZCZEVJc1EwRkJia0lzUjBGQmQwUXNVMEZCVXl4UFFVRlVMRVZCUVhoRU8wRkJRMGc3UVVGRFNpeGhRV1pNTEVWQlowSkxMRWxCYUVKTUxFTkJaMEpWTEZsQlFVMDdRVUZEVWl4MVFrRkJTeXhYUVVGTUxFZEJRVzFDTEZGQlFXNUNPMEZCUTBFc2RVSkJRVXNzWTBGQlRDeEhRVUZ6UWl4UFFVRkxMRmRCUVROQ08wRkJRMGdzWVVGdVFrd3NSVUZ2UWtzc1MwRndRa3dzUTBGdlFsY3NWVUZCUXl4TFFVRkVMRVZCUVZjN1FVRkRaQ3gzUWtGQlVTeEhRVUZTTEVOQlFWa3NTMEZCV2p0QlFVTklMR0ZCZEVKTU8wRkJkVUpJT3pzN096czdhMEpCUjFVc1RTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpS0daMWJtTjBhVzl1SUdVb2RDeHVMSElwZTJaMWJtTjBhVzl1SUhNb2J5eDFLWHRwWmlnaGJsdHZYU2w3YVdZb0lYUmJiMTBwZTNaaGNpQmhQWFI1Y0dWdlppQnlaWEYxYVhKbFBUMWNJbVoxYm1OMGFXOXVYQ0ltSm5KbGNYVnBjbVU3YVdZb0lYVW1KbUVwY21WMGRYSnVJR0VvYnl3aE1DazdhV1lvYVNseVpYUjFjbTRnYVNodkxDRXdLVHQyWVhJZ1pqMXVaWGNnUlhKeWIzSW9YQ0pEWVc1dWIzUWdabWx1WkNCdGIyUjFiR1VnSjF3aUsyOHJYQ0luWENJcE8zUm9jbTkzSUdZdVkyOWtaVDFjSWsxUFJGVk1SVjlPVDFSZlJrOVZUa1JjSWl4bWZYWmhjaUJzUFc1YmIxMDllMlY0Y0c5eWRITTZlMzE5TzNSYmIxMWJNRjB1WTJGc2JDaHNMbVY0Y0c5eWRITXNablZ1WTNScGIyNG9aU2w3ZG1GeUlHNDlkRnR2WFZzeFhWdGxYVHR5WlhSMWNtNGdjeWh1UDI0NlpTbDlMR3dzYkM1bGVIQnZjblJ6TEdVc2RDeHVMSElwZlhKbGRIVnliaUJ1VzI5ZExtVjRjRzl5ZEhOOWRtRnlJR2s5ZEhsd1pXOW1JSEpsY1hWcGNtVTlQVndpWm5WdVkzUnBiMjVjSWlZbWNtVnhkV2x5WlR0bWIzSW9kbUZ5SUc4OU1EdHZQSEl1YkdWdVozUm9PMjhyS3lsektISmJiMTBwTzNKbGRIVnliaUJ6ZlNraUxDSm1kVzVqZEdsdmJpQmhaR1JCWW05MWRDZ3BJSHRjY2x4dUlDQWdJR3hsZENCaFltOTFkQ0E5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9YQ0lqWVdKdmRYUkVhWFpjSWlrN1hISmNiaUFnSUNCcFppQW9JV0ZpYjNWMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElHRmliM1YwUkdsMklEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENoY0ltUnBkbHdpS1R0Y2NseHVJQ0FnSUNBZ0lDQmhZbTkxZEVScGRpNXpaWFJCZEhSeWFXSjFkR1VvWENKcFpGd2lMQ0JjSW1GaWIzVjBSR2wyWENJcE8xeHlYRzRnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbUp2WkhrdVlYQndaVzVrUTJocGJHUW9ZV0p2ZFhSRWFYWXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdGaWIzVjBSR2wyTG1sdWJtVnlTRlJOVENBOUlHQThjRDdRa05HQTBMclF0TkM5MExEUmp5RFF1TkN6MFlEUXNDRFFzZEdMMEx2UXNDRFJnZEMrMExmUXROQ3cwTDNRc0NEUW10R0QwTHZRdGRHSTBMN1FzdEdMMEx3ZzBKTFF1OUN3MExUUXVOQzgwTGpSZ05DKzBMdzhMM0ErWEhKY2JqeHdQanhoSUdoeVpXWTlKMmgwZEhCek9pOHZkbXN1WTI5dEwzWjJhM1ZzWlhOb2IzWW5JSFJoY21kbGREMG5YMkpzWVc1ckp6N1FrdENhMEw3UXZkR0MwTERRdXRHQzBMVThMMkUrUEM5d1BseHlYRzQ4Y0Q0OFlTQm9jbVZtUFNkb2RIUndjem92TDNkM2R5NXNhVzVyWldScGJpNWpiMjB2YVc0dmRteGhaR2x0YVhJdGEzVnNaWE5vYjNZdE1qY3pNalUzTVRKaEx5Y2dkR0Z5WjJWMFBTZGZZbXhoYm1zblBreHBibXRsWkVsdVBDOWhQand2Y0Q1Y2NseHVQSEErMEpqUXM5R0EwTEFnMExIUmk5QzcwTEFnMFlIUXZ0QzMwTFRRc05DOTBMQWcwTC9RdmlEUW90Q1hJTkMrMEwvUXVOR0IwTERRdmRDOTBMN1F2TkdESU5HQzBZUFJnam9nUEdFZ2FISmxaajBuYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNaMmMyTnZaR1V2YW5NdExXSmhjMlV0WTI5MWNuTmxMM1J5WldVdmJXRnpkR1Z5THpBNUwyaDBKeUIwWVhKblpYUTlKMTlpYkdGdWF5YyswS0xRbHlEUXROQzcwWThnMExqUXM5R0EwWXM4TDJFK1BDOXdQbUJjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdSbFptRjFiSFFnWVdSa1FXSnZkWFE3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh5WEc1amJHRnpjeUJRWlhKemIyNGdlMXh5WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvWlhabGJuUkNkWE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJuUmhhVzVsY2xkcFpIUm9JRDBnWkc5amRXMWxiblF1Wkc5amRXMWxiblJGYkdWdFpXNTBMbU5zYVdWdWRGZHBaSFJvTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WTI5dWRHRnBibVZ5U0dWcFoyaDBJRDBnWkc5amRXMWxiblF1Wkc5amRXMWxiblJGYkdWdFpXNTBMbU5zYVdWdWRFaGxhV2RvZER0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1WMlpXNTBRblZ6SUQwZ1pYWmxiblJDZFhNN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1a2FXVWdQU0JtWVd4elpUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuTjRJRDBnTUR0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5ONUlEMGdNRHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCelpYUlNZVzVrYjIxUWIzTnBkR2x2Ym5Nb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NTRJRDBnZEdocGN5NW5aWFJTWVc1a2IyMUpiblFvTUN3Z2RHaHBjeTVqYjI1MFlXbHVaWEpYYVdSMGFDazdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NTVJRDBnZEdocGN5NW5aWFJTWVc1a2IyMUpiblFvTUN3Z2RHaHBjeTVqYjI1MFlXbHVaWEpJWldsbmFIUXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnWXlBOUlIUm9hWE11WjJWMFVtVnpkV3gwVUhsMGFHRm5iM0psWVc1VWFHVnZjbVZ0S0NrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0dNZ1BDQjBhR2x6TGxOVlFrcEZRMVJmVTBsYVJTQXFJRFVwSUhSb2FYTXVjMlYwVW1GdVpHOXRVRzl6YVhScGIyNXpLQ2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2MzVmljMk55YVdKbFZHOU5iM1psS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJR3hsZENCM2NtRndjR1Z5VFc5MlpWQmxjbk52YmlBOUlIUm9hWE11Ylc5MlpWQmxjbk52Ymk1aWFXNWtLSFJvYVhNcE8xeHlYRzRnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbUp2WkhrdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmEyVjVaRzkzYmljc0lIZHlZWEJ3WlhKTmIzWmxVR1Z5YzI5dUtUdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2QzSmhjSEJsY2sxdmRtVkRhR0Z5WVdOMFpYSlBiazF2WW1sc1pTQTlJSFJvYVhNdWJXOTJaVU5vWVhKaFkzUmxjazl1VFc5aWFXeGxMbUpwYm1Rb1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXBPMXh5WEc0Z0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9KeTV0YjJKcGJHVkRiMjUwY205c2N5Y3BMbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lIZHlZWEJ3WlhKTmIzWmxRMmhoY21GamRHVnlUMjVOYjJKcGJHVXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUcxdmRtVkRhR0Z5WVdOMFpYSlBiazF2WW1sc1pTaGxkaWtnZTF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0IwWVhKblpYUWdQU0JsZGk1MFlYSm5aWFE3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVrYVhKbFkzUnBiMjRnUFNCMFlYSm5aWFF1ZG1Gc2RXVTdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnYlc5MlpWQmxjbk52YmlobGRtVnVkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JVVDFCZlFWSlNUMWRmUzBWWklEMGdNemc3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJRUpQVkZSUFRWOUJVbEpQVjE5TFJWa2dQU0EwTUR0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnVWtsSFNGUmZRVkpTVDFkZlMwVlpJRDBnTXprN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUV4RlJsUmZRVkpTVDFkZlMwVlpJRDBnTXpjN1hISmNiaUFnSUNBZ0lDQWdjM2RwZEdOb0lDaGxkbVZ1ZEM1clpYbERiMlJsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdWRTlRWDBGU1VrOVhYMHRGV1RwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WkdseVpXTjBhVzl1SUQwZ0oyMXZkbVZHYjNKM1lYSmtKenRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUVKUFZGUlBUVjlCVWxKUFYxOUxSVms2WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVJwY21WamRHbHZiaUE5SUNkaVlXTnJkMkZ5WkNjN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQlNTVWRJVkY5QlVsSlBWMTlMUlZrNlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1ScGNtVmpkR2x2YmlBOUlDZHRiM1psVW1sbmFIUW5PMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnVEVWR1ZGOUJVbEpQVjE5TFJWazZYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtUnBjbVZqZEdsdmJpQTlJQ2R0YjNabFRHVm1kQ2M3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdiVzkyWlVsdVVtRnVaRzl0UkdseVpXTjBhVzl1S0NrZ2UxeHlYRzRnSUNBZ0lDQWdJSE4zYVhSamFDQW9kR2hwY3k1blpYUlNZVzVrYjIxSmJuUW9NU3dnTkNrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0F4T2x4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVrYVhKbFkzUnBiMjRnUFNBbmJXOTJaVVp2Y25kaGNtUW5PMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTWpwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WkdseVpXTjBhVzl1SUQwZ0oySmhZMnQzWVhKa0p6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRE02WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVJwY21WamRHbHZiaUE5SUNkdGIzWmxVbWxuYUhRbk8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdORHBjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaR2x5WldOMGFXOXVJRDBnSjIxdmRtVk1aV1owSnp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBZWEowVFc5MlpTZ3BPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdkbGRGSmhibVJ2YlVsdWRDaHRhVzRzSUcxaGVDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJOWVhSb0xtWnNiMjl5S0UxaGRHZ3VjbUZ1Wkc5dEtDa2dLaUFvYldGNElDMGdiV2x1SUNzZ01Ta3BJQ3NnYldsdU8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSE5sZEVWMlpXNTBRblZ6UkdseVpXTjBhVzl1S0NrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpYWmxiblJDZFhNdWIyNG9KMjF2ZG1WU2FXZG9kRUZ1WkVSdmQyNG5MQ0IwYUdsekxtMXZkbVZTYVdkb2RFRnVaRVJ2ZDI0cE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpYWmxiblJDZFhNdWIyNG9KMjF2ZG1WTVpXWjBRVzVrUkc5M2JpY3NJSFJvYVhNdWJXOTJaVXhsWm5SQmJtUkViM2R1S1R0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1WMlpXNTBRblZ6TG05dUtDZHRiM1psVW1sbmFIUkJibVJCVlhBbkxDQjBhR2x6TG0xdmRtVlNhV2RvZEVGdVpFRlZjQ2s3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVsZG1WdWRFSjFjeTV2YmlnbmJXOTJaVXhsWm5SQmJtUkJWWEFuTENCMGFHbHpMbTF2ZG1WTVpXWjBRVzVrUVZWd0tUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtVjJaVzUwUW5WekxtOXVLQ2R0YjNabFJtOXlkMkZ5WkNjc0lIUm9hWE11Ylc5MlpVWnZjbmRoY21RcE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpYWmxiblJDZFhNdWIyNG9KMjF2ZG1WU2FXZG9kQ2NzSUhSb2FYTXViVzkyWlZKcFoyaDBLVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVYyWlc1MFFuVnpMbTl1S0NkdGIzWmxUR1ZtZENjc0lIUm9hWE11Ylc5MlpVeGxablFwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WlhabGJuUkNkWE11YjI0b0oySmhZMnQzWVhKa0p5d2dkR2hwY3k1aVlXTnJkMkZ5WkNrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjSFZ5YzNWbFEyaGhjbUZqZEdWeUtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5CeVpYa3VlQ0ErSUhSb2FYTXVlQ0FtSmlCMGFHbHpMbkJ5WlhrdWVTQStJSFJvYVhNdWVTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1ScGNtVmpkR2x2YmlBOUlDZHRiM1psVW1sbmFIUkJibVJFYjNkdUp6dGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2RHaHBjeTV3Y21WNUxuZ2dQQ0IwYUdsekxuZ2dKaVlnZEdocGN5NXdjbVY1TG5rZ1BpQjBhR2x6TG5rcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVrYVhKbFkzUnBiMjRnUFNBbmJXOTJaVXhsWm5SQmJtUkViM2R1Snp0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnWld4elpTQnBaaUFvZEdocGN5NXdjbVY1TG5nZ1BpQjBhR2x6TG5nZ0ppWWdkR2hwY3k1d2NtVjVMbmtnUENCMGFHbHpMbmtwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWthWEpsWTNScGIyNGdQU0FuYlc5MlpWSnBaMmgwUVc1a1FWVndKenRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdaV3h6WlNCcFppQW9kR2hwY3k1d2NtVjVMbmdnUENCMGFHbHpMbmdnSmlZZ2RHaHBjeTV3Y21WNUxua2dQQ0IwYUdsekxua3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1a2FYSmxZM1JwYjI0Z1BTQW5iVzkyWlV4bFpuUkJibVJCVlhBbk8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCbGJITmxJR2xtSUNoMGFHbHpMbkJ5WlhrdWVDQThJSFJvYVhNdWVDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1ScGNtVmpkR2x2YmlBOUlDZHRiM1psVEdWbWRDYzdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tIUm9hWE11Y0hKbGVTNTRJRDRnZEdocGN5NTRLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpHbHlaV04wYVc5dUlEMGdKMjF2ZG1WU2FXZG9kQ2M3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLSFJvYVhNdWNISmxlUzU1SUQ0Z2RHaHBjeTU1S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaR2x5WldOMGFXOXVJRDBnSjJKaFkydDNZWEprSnp0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnWld4elpTQnBaaUFvZEdocGN5NXdjbVY1TG5rZ1BDQjBhR2x6TG5rcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVrYVhKbFkzUnBiMjRnUFNBbmJXOTJaVVp2Y25kaGNtUW5PMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnRiM1psUm05eWQyRnlaQ2h6Wld4bUtTQjdYSEpjYmlBZ0lDQWdJQ0FnYzJWc1ppNTVJRDBnYzJWc1ppNTVJQzBnTWp0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQmlZV05yZDJGeVpDaHpaV3htS1NCN1hISmNiaUFnSUNBZ0lDQWdjMlZzWmk1NUlEMGdjMlZzWmk1NUlDc2dNanRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCdGIzWmxVbWxuYUhRb2MyVnNaaWtnZTF4eVhHNGdJQ0FnSUNBZ0lITmxiR1l1ZUNBOUlITmxiR1l1ZUNBcklESTdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnYlc5MlpVeGxablFvYzJWc1ppa2dlMXh5WEc0Z0lDQWdJQ0FnSUhObGJHWXVlQ0E5SUhObGJHWXVlQ0F0SURJN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdiVzkyWlV4bFpuUkJibVJCVlhBb2MyVnNaaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDMHRjMlZzWmk1NE8xeHlYRzRnSUNBZ0lDQWdJQzB0YzJWc1ppNTVPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUcxdmRtVlNhV2RvZEVGdVpFRlZjQ2h6Wld4bUtTQjdYSEpjYmlBZ0lDQWdJQ0FnS3l0elpXeG1Mbmc3WEhKY2JpQWdJQ0FnSUNBZ0xTMXpaV3htTG5rN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdiVzkyWlV4bFpuUkJibVJFYjNkdUtITmxiR1lwSUh0Y2NseHVJQ0FnSUNBZ0lDQXRMWE5sYkdZdWVEdGNjbHh1SUNBZ0lDQWdJQ0FySzNObGJHWXVlVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCdGIzWmxVbWxuYUhSQmJtUkViM2R1S0hObGJHWXBJSHRjY2x4dUlDQWdJQ0FnSUNBckszTmxiR1l1ZUR0Y2NseHVJQ0FnSUNBZ0lDQXJLM05sYkdZdWVUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JuWlhSU1pYTjFiSFJRZVhSb1lXZHZjbVZoYmxSb1pXOXlaVzBvS1NCN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUdFZ1BTQW9kR2hwY3k1d2NtVjVMbmdnTFNCMGFHbHpMbE5WUWtwRlExUmZVMGxhUlNBdklESXBJQzFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdLSFJvYVhNdWVDQXRJSFJvYVhNdVUxVkNTa1ZEVkY5VFNWcEZJQzhnTWlrN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUdJZ1BTQW9kR2hwY3k1d2NtVjVMbmtnTFNCMGFHbHpMbE5WUWtwRlExUmZVMGxhUlNBdklESXBJQzFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdLSFJvYVhNdWVTQXRJSFJvYVhNdVUxVkNTa1ZEVkY5VFNWcEZJQzhnTWlrN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFMWhkR2d1YzNGeWRDaGhJQ29nWVNBcklHSWdLaUJpS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQmphR1ZqYTA5MWRGUm9aVVZrWjJWUFpsUm9aVU5vWVhKaFkzUmxjaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NTRJRHdnTUNBdElIUm9hWE11VTFWQ1NrVkRWRjlUU1ZwRktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZUNBOUlIUm9hWE11WTI5dWRHRnBibVZ5VjJsa2RHZzdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoMGFHbHpMbmdnUGlCMGFHbHpMbU52Ym5SaGFXNWxjbGRwWkhSb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZUNBOUlEQTdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoMGFHbHpMbmtnUENBd0lDMGdkR2hwY3k1VFZVSktSVU5VWDFOSldrVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1NUlEMGdkR2hwY3k1amIyNTBZV2x1WlhKSVpXbG5hSFE3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TG5rZ1BpQjBhR2x6TG1OdmJuUmhhVzVsY2tobGFXZG9kQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxua2dQU0F3TzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JqWVhSamFGVndWMmwwYUZSb1pWQnNZWGxsY2lncElIdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ1l5QTlJSFJvYVhNdVoyVjBVbVZ6ZFd4MFVIbDBhR0ZuYjNKbFlXNVVhR1Z2Y21WdEtDazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hqSUR3Z2RHaHBjeTVUVlVKS1JVTlVYMU5KV2tVZ0x5QXhMalVnSmlZZ2RHaHBjeTUwZVhCbElEMDlQU0FuYlhWemFISnZiMjBuSUNZbVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNGMGFHbHpMbVJwWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdWNISmxlUzVoZEdWTmRYTm9jbTl2YlNrZ2RHaHBjeTV3YkdGNVpYSkRZWFJqYUUxMWMyaHliMjl0S0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaR2xsSUQwZ2RISjFaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d2NtVjVMbUYwWlUxMWMyaHliMjl0SUQwZ2RISjFaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d2NtVjVMbTExYzJoeWIyOXRWR2x0WlhJZ0t6MGdNVFU3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLR01nUENCMGFHbHpMbE5WUWtwRlExUmZVMGxhUlNBdklERXVOU0FtSmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnlaWGt1WVhSbFRYVnphSEp2YjIwcElIUm9hWE11WkdsbElEMGdkSEoxWlR0Y2NseHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaGpJRHdnZEdocGN5NVRWVUpLUlVOVVgxTkpXa1VnTHlBeExqVWdKaVpjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJWFJvYVhNdVpHbGxLU0IwYUdsekxuQnlaWGt1YUhWdFlXNU1hV1psSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1kyaGxZMnRHYjNKRGFHRnlZV04wWlhKUFkyTjFjbkpsYm1ObGMwbHVVbUZrYVhWektDa2dlMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQmpJRDBnZEdocGN5NW5aWFJTWlhOMWJIUlFlWFJvWVdkdmNtVmhibFJvWlc5eVpXMG9LVHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9ZeUE4SUhSb2FYTXVVMVZDU2tWRFZGOVRTVnBGSUNvZ01pNDNLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNIVnljM1ZsUTJoaGNtRmpkR1Z5S0NrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhCc1lYbGxja05oZEdOb1RYVnphSEp2YjIwb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElIUnBiV1VnUFNCelpYUkpiblJsY25aaGJDZ29LU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUMwdGRHaHBjeTV3Y21WNUxtMTFjMmh5YjI5dFZHbHRaWEk3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbkJ5WlhrdWJYVnphSEp2YjIxVWFXMWxjaUE4UFNBd0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnlaWGt1WVhSbFRYVnphSEp2YjIwZ1BTQm1ZV3h6WlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNaV0Z5U1c1MFpYSjJZV3dvZEdsdFpTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5TENBeE1EQXdLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCemRHRnlkRTF2ZG1Vb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElIUnBiV1Z5SUQwZ2MyVjBTVzUwWlhKMllXd29LQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU5vWldOclQzVjBWR2hsUldSblpVOW1WR2hsUTJoaGNtRmpkR1Z5S0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5SNWNHVWdQVDA5SUNkb2RXNTBNaWNwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WlhabGJuUkNkWE11ZEhKcFoyZGxjaWgwYUdsekxtUnBjbVZqZEdsdmJpd2dkR2hwY3lrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OaGRHTm9WWEJYYVhSb1ZHaGxVR3hoZVdWeUtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTm9aV05yUm05eVEyaGhjbUZqZEdWeVQyTmpkWEp5Wlc1alpYTkpibEpoWkdsMWN5Z3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsZG1WdWRFSjFjeTUwY21sbloyVnlLSFJvYVhNdVpHbHlaV04wYVc5dUxDQjBhR2x6S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuUjVjR1VnSVQwOUlDZG9kVzFoYmljcElIUm9hWE11WTJGMFkyaFZjRmRwZEdoVWFHVlFiR0Y1WlhJb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUZpYjNKMFNXNTBaWEoyWVd3b2RHbHRaWElwTzF4eVhHNGdJQ0FnSUNBZ0lIMHNJSFJvYVhNdWMzQmxaV1FnS2lBMEtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0J6ZEdGeWRGVndaR0YwWlZOd2NtbDBaWE1vS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1ZUY0hKcGRHVnpWR2x0WlhJZ1BTQnpaWFJKYm5SbGNuWmhiQ2dvS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZFhCa1lYUmxVM0J5YVhSbEtDazdYSEpjYmlBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTV6Y0dWbFpDQXFJREU0S1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQmhZbTl5ZEVsdWRHVnlkbUZzS0hScGJXVnlLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ2gwYUdsekxuUjVjR1VnUFQwOUlDZG9kVzUwTWljZ2ZId2dkR2hwY3k1MGVYQmxJRDA5UFNBbmFIVnVkREVuS1NBbUpseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBaGRHaHBjeTV3Y21WNUxtaDFiV0Z1VEdsbVpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiR1ZoY2tsdWRHVnlkbUZzS0hScGJXVnlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhsWVhKSmJuUmxjblpoYkNoMGFHbHpMblZ3WkdGMFpWTndjbWwwWlhOVWFXMWxjaWs3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TG5SNWNHVWdQVDA5SUNkb2RXMWhiaWNnSmlZZ0lYUm9hWE11YUhWdFlXNU1hV1psS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOc1pXRnlTVzUwWlhKMllXd29kR2x0WlhJcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHVmhja2x1ZEdWeWRtRnNLSFJvYVhNdWRYQmtZWFJsVTNCeWFYUmxjMVJwYldWeUtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZCbGNuTnZianNpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjY2x4dWFXMXdiM0owSUZCbGNuTnZiaUJtY205dElDY3VMaTlqYUdGeVlXTjBaWEp6Snp0Y2NseHVYSEpjYm1Oc1lYTnpJRWgxYldGdUlHVjRkR1Z1WkhNZ1VHVnljMjl1SUh0Y2NseHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVjJaVzUwUW5WektTQjdYSEpjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9aWFpsYm5SQ2RYTXBPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVMVZDU2tWRFZGOVRTVnBGSUQwZ2RHaHBjeTVqYjI1MFlXbHVaWEpJWldsbmFIUWdMeUF4TlR0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5nZ1BTQk5ZWFJvTG5KdmRXNWtLSFJvYVhNdVkyOXVkR0ZwYm1WeVYybGtkR2dnTHlBeUlDMGdkR2hwY3k1VFZVSktSVU5VWDFOSldrVWdMeUF5S1R0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5rZ1BTQk5ZWFJvTG5KdmRXNWtLSFJvYVhNdVkyOXVkR0ZwYm1WeVNHVnBaMmgwSUM4Z01pQXRJSFJvYVhNdVUxVkNTa1ZEVkY5VFNWcEZJQzhnTWlrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1emNHVmxaQ0E5SURVN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1MGVYQmxJRDBnSjJoMWJXRnVKenRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbWgxYldGdVRHbG1aU0E5SUhSeWRXVTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWhkR1ZOZFhOb2NtOXZiU0E5SUdaaGJITmxPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXViWFZ6YUhKdmIyMVVhVzFsY2lBOUlEQTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXBibWwwS0NrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdhVzVwZENncElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRVYyWlc1MFFuVnpSR2x5WldOMGFXOXVLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV0YjNabFNXNVNZVzVrYjIxRWFYSmxZM1JwYjI0b0tUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuTjFZbk5qY21saVpWUnZUVzkyWlNncE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUmhjblJWY0dSaGRHVlRjSEpwZEdWektDazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnZFhCa1lYUmxVM0J5YVhSbEtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQk5UMVpGWDBaUFVsZEJVa1JmVTFCU1NWUkZYMHhKVGtVZ1BTQXlNRGM3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJRTFQVmtWZlFrRkRTMWRCVWtSZlUxQlNTVlJGWDB4SlRrVWdQU0F3TzF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JOVDFaRlgxSkpSMGhVWDFOUVVrbFVSVjlNU1U1RklEMGdNVE00TzF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JOVDFaRlgweEZSbFJmVTFCU1NWUkZYMHhKVGtVZ1BTQTJPVHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdRMGhCVWtGRFZFVlNYMU5VUlZBZ1BTQTJORHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdSa2xTVTFSZlEwaEJVa0ZEVkVWU1gxTlVSVkFnUFNBd08xeHlYRzRnSUNBZ0lDQWdJR3hsZENCRlRrUmZUMFpmVkVoRlgxTlFVa2xVUlNBOUlESTFNRHRjY2x4dUlDQWdJQ0FnSUNCemQybDBZMmdnS0hSb2FYTXVaR2x5WldOMGFXOXVLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oyMXZkbVZHYjNKM1lYSmtKenBjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmJXOTJaVXhsWm5SQmJtUkJWWEFuT2x4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZHRiM1psVW1sbmFIUkJibVJCVlhBbk9seHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1emVTQTlJRTFQVmtWZlJrOVNWMEZTUkY5VFVGSkpWRVZmVEVsT1JUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RpWVdOcmQyRnlaQ2M2WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oyMXZkbVZNWldaMFFXNWtSRzkzYmljNlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMjF2ZG1WU2FXZG9kRUZ1WkVSdmQyNG5PbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXplU0E5SUUxUFZrVmZRa0ZEUzFkQlVrUmZVMUJTU1ZSRlgweEpUa1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmJXOTJaVkpwWjJoMEp6cGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMza2dQU0JOVDFaRlgxSkpSMGhVWDFOUVVrbFVSVjlNU1U1Rk8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMjF2ZG1WTVpXWjBKenBjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM2tnUFNCTlQxWkZYMHhGUmxSZlUxQlNTVlJGWDB4SlRrVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZUNBclBTQkRTRUZTUVVOVVJWSmZVMVJGVUR0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXplQ0ErUFNCRlRrUmZUMFpmVkVoRlgxTlFVa2xVUlNrZ2RHaHBjeTV6ZUNBOUlFWkpVbE5VWDBOSVFWSkJRMVJGVWw5VFZFVlFPMXh5WEc0Z0lDQWdmVnh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JJZFcxaGJqc2lMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNjbHh1YVcxd2IzSjBJRkJsY25OdmJpQm1jbTl0SUNjdUxpOWphR0Z5WVdOMFpYSnpKenRjY2x4dVhISmNibU5zWVhOeklFaDFiblF4SUdWNGRHVnVaSE1nVUdWeWMyOXVJSHRjY2x4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0hCeVpYa3NaWFpsYm5SQ2RYTXBJSHRjY2x4dUlDQWdJQ0FnSUNCemRYQmxjaWhsZG1WdWRFSjFjeWs3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV3Y21WNUlEMGdjSEpsZVR0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TGxOVlFrcEZRMVJmVTBsYVJTQTlJSFJvYVhNdVkyOXVkR0ZwYm1WeVNHVnBaMmgwSUM4Z01UVTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXpjR1ZsWkNBOUlIUm9hWE11WjJWMFVtRnVaRzl0U1c1MEtETXNJREV3S1R0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5SNWNHVWdQU0JjSW1oMWJuUXhYQ0k3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVwYm1sMEtDazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnYVc1cGRDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sZEZKaGJtUnZiVkJ2YzJsMGFXOXVjeWdwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11Ylc5MlpVbHVVbUZ1Wkc5dFJHbHlaV04wYVc5dUtDazdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkR0Z5ZEZWd1pHRjBaVk53Y21sMFpYTW9LVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCMWNHUmhkR1ZUY0hKcGRHVW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJRTFQVmtWZlJrOVNWMEZTUkY5VFVGSkpWRVZmVEVsT1JTQTlJREUwTlR0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnVFU5V1JWOUNRVU5MVjBGU1JGOVRVRkpKVkVWZlRFbE9SU0E5SURBN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUUxUFZrVmZVa2xIU0ZSZlUxQlNTVlJGWDB4SlRrVWdQU0E1Tmp0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnVFU5V1JWOU1SVVpVWDFOUVVrbFVSVjlNU1U1RklEMGdORGc3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJRVpKVWxOVVgwTklRVkpCUTFSRlVsOVRWRVZRSUQwZ01EdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ1EwaEJVa0ZEVkVWU1gxTlVSVkFnUFNBME5qdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ1JVNUVYMDlHWDFSSVJWOVRVRkpKVkVVZ1BTQXhNekE3WEhKY2JpQWdJQ0FnSUNBZ2MzZHBkR05vSUNoMGFHbHpMbVJwY21WamRHbHZiaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2liVzkyWlVadmNuZGhjbVJjSWpwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmNJbTF2ZG1WTVpXWjBRVzVrUVZWd1hDSTZYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKdGIzWmxVbWxuYUhSQmJtUkJWWEJjSWpwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNrZ1BTQk5UMVpGWDBaUFVsZEJVa1JmVTFCU1NWUkZYMHhKVGtVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmNJbUpoWTJ0M1lYSmtYQ0k2WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSnRiM1psVEdWbWRFRnVaRVJ2ZDI1Y0lqcGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JjSW0xdmRtVlNhV2RvZEVGdVpFUnZkMjVjSWpwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNrZ1BTQk5UMVpGWDBKQlEwdFhRVkpFWDFOUVVrbFVSVjlNU1U1Rk8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0p0YjNabFVtbG5hSFJjSWpwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNrZ1BTQk5UMVpGWDFKSlIwaFVYMU5RVWtsVVJWOU1TVTVGTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSnRiM1psVEdWbWRGd2lPbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXplU0E5SUUxUFZrVmZURVZHVkY5VFVGSkpWRVZmVEVsT1JUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbk40SUNzOUlFTklRVkpCUTFSRlVsOVRWRVZRTzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuTjRJRDQ5SUVWT1JGOVBSbDlVU0VWZlUxQlNTVlJGS1NCMGFHbHpMbk40SUQwZ1JrbFNVMVJmUTBoQlVrRkRWRVZTWDFOVVJWQTdYSEpjYmlBZ0lDQjlYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRWgxYm5ReE95SXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHlYRzVwYlhCdmNuUWdVR1Z5YzI5dUlHWnliMjBnSnk0dUwyTm9ZWEpoWTNSbGNuTW5PMXh5WEc1Y2NseHVZMnhoYzNNZ1NIVnVkRElnWlhoMFpXNWtjeUJRWlhKemIyNGdlMXh5WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvY0hKbGVTeGxkbVZ1ZEVKMWN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLR1YyWlc1MFFuVnpLVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbkJ5WlhrZ1BTQndjbVY1TzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11VTFWQ1NrVkRWRjlUU1ZwRklEMGdkR2hwY3k1amIyNTBZV2x1WlhKSVpXbG5hSFFnTHlBeE1qdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuTndaV1ZrSUQwZ2RHaHBjeTVuWlhSU1lXNWtiMjFKYm5Rb05Td2dNVElwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11ZEhsd1pTQTlJRndpYUhWdWRESmNJanRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbWx1YVhRb0tUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JwYm1sMEtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwVW1GdVpHOXRVRzl6YVhScGIyNXpLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV0YjNabFNXNVNZVzVrYjIxRWFYSmxZM1JwYjI0b0tUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBZWEowVlhCa1lYUmxVM0J5YVhSbGN5Z3BPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhWd1pHRjBaVk53Y21sMFpTZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdUVTlXUlY5R1QxSlhRVkpFWDFOUVVrbFVSVjlNU1U1RklEMGdNamc0TzF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JOVDFaRlgwSkJRMHRYUVZKRVgxTlFVa2xVUlY5TVNVNUZJRDBnTUR0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnVFU5V1JWOVNTVWRJVkY5VFVGSkpWRVZmVEVsT1JTQTlJREU1TWp0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnVFU5V1JWOU1SVVpVWDFOUVVrbFVSVjlNU1U1RklEMGdPVFk3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJRVpKVWxOVVgwTklRVkpCUTFSRlVsOVRWRVZRSUQwZ01EdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ1EwaEJVa0ZEVkVWU1gxTlVSVkFnUFNBeE5ETTdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElFVk9SRjlQUmw5VVNFVmZVMUJTU1ZSRklEMGdOREkxTzF4eVhHNGdJQ0FnSUNBZ0lITjNhWFJqYUNBb2RHaHBjeTVrYVhKbFkzUnBiMjRwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmNJbTF2ZG1WR2IzSjNZWEprWENJNlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0p0YjNabFRHVm1kRUZ1WkVGVmNGd2lPbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aWJXOTJaVkpwWjJoMFFXNWtRVlZ3WENJNlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ONUlEMGdUVTlXUlY5R1QxSlhRVkpFWDFOUVVrbFVSVjlNU1U1Rk8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0ppWVdOcmQyRnlaRndpT2x4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2liVzkyWlV4bFpuUkJibVJFYjNkdVhDSTZYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKdGIzWmxVbWxuYUhSQmJtUkViM2R1WENJNlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ONUlEMGdUVTlXUlY5Q1FVTkxWMEZTUkY5VFVGSkpWRVZmVEVsT1JUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpYlc5MlpWSnBaMmgwWENJNlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ONUlEMGdUVTlXUlY5U1NVZElWRjlUVUZKSlZFVmZURWxPUlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2liVzkyWlV4bFpuUmNJanBjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM2tnUFNCTlQxWkZYMHhGUmxSZlUxQlNTVlJGWDB4SlRrVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZUNBclBTQkRTRUZTUVVOVVJWSmZVMVJGVUR0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXplQ0ErUFNCRlRrUmZUMFpmVkVoRlgxTlFVa2xVUlNrZ2RHaHBjeTV6ZUNBOUlFWkpVbE5VWDBOSVFWSkJRMVJGVWw5VFZFVlFPMXh5WEc0Z0lDQWdmVnh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JJZFc1ME1qc2lMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNjbHh1YVcxd2IzSjBJRkJsY25OdmJpQm1jbTl0SUNjdUxpOWphR0Z5WVdOMFpYSnpKenRjY2x4dVhISmNibU5zWVhOeklFMTFjMmh5YjI5dElHVjRkR1Z1WkhNZ1VHVnljMjl1SUh0Y2NseHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtIQnlaWGtzWlhabGJuUkNkWE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQnpkWEJsY2lobGRtVnVkRUoxY3lrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtVjVJRDBnY0hKbGVUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxsTlZRa3BGUTFSZlUwbGFSU0E5SUhSb2FYTXVZMjl1ZEdGcGJtVnlTR1ZwWjJoMElDOGdNVFU3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV6Y0dWbFpDQTlJSFJvYVhNdVoyVjBVbUZ1Wkc5dFNXNTBLRGNzSURFMEtUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuUjVjR1VnUFNCY0ltMTFjMmh5YjI5dFhDSTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXBibWwwS0NrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdhVzVwZENncElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRkpoYm1SdmJWQnZjMmwwYVc5dWN5Z3BPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXViVzkyWlVsdVVtRnVaRzl0UkdseVpXTjBhVzl1S0NrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1emRHRnlkRlZ3WkdGMFpWTndjbWwwWlhNb0tUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0IxY0dSaGRHVlRjSEpwZEdVb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElFMVBWa1ZmUms5U1YwRlNSRjlUVUZKSlZFVmZURWxPUlNBOUlERTFNRHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdUVTlXUlY5Q1FVTkxWMEZTUkY5VFVGSkpWRVZmVEVsT1JTQTlJREE3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJRTFQVmtWZlVrbEhTRlJmVTFCU1NWUkZYMHhKVGtVZ1BTQXhNREE3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJRTFQVmtWZlRFVkdWRjlUVUZKSlZFVmZURWxPUlNBOUlEVXdPMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQkdTVkpUVkY5RFNFRlNRVU5VUlZKZlUxUkZVQ0E5SURBN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUVOSVFWSkJRMVJGVWw5VFZFVlFJRDBnTlRBN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUVWT1JGOVBSbDlVU0VWZlUxQlNTVlJGSUQwZ01UUXdPMXh5WEc0Z0lDQWdJQ0FnSUhOM2FYUmphQ0FvZEdocGN5NWthWEpsWTNScGIyNHBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0ltMXZkbVZHYjNKM1lYSmtYQ0k2WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSnRiM1psVEdWbWRFRnVaRUZWY0Z3aU9seHlYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpYlc5MlpWSnBaMmgwUVc1a1FWVndYQ0k2WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk41SUQwZ1RVOVdSVjlHVDFKWFFWSkVYMU5RVWtsVVJWOU1TVTVGTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSmlZV05yZDJGeVpGd2lPbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aWJXOTJaVXhsWm5SQmJtUkViM2R1WENJNlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0p0YjNabFVtbG5hSFJCYm1SRWIzZHVYQ0k2WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk41SUQwZ1RVOVdSVjlDUVVOTFYwRlNSRjlUVUZKSlZFVmZURWxPUlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2liVzkyWlZKcFoyaDBYQ0k2WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk41SUQwZ1RVOVdSVjlTU1VkSVZGOVRVRkpKVkVWZlRFbE9SVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aWJXOTJaVXhsWm5SY0lqcGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMza2dQU0JOVDFaRlgweEZSbFJmVTFCU1NWUkZYMHhKVGtVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXplQ0FyUFNCRFNFRlNRVU5VUlZKZlUxUkZVRHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1emVDQStQU0JGVGtSZlQwWmZWRWhGWDFOUVVrbFVSU2tnZEdocGN5NXplQ0E5SUVaSlVsTlVYME5JUVZKQlExUkZVbDlUVkVWUU8xeHlYRzRnSUNBZ2ZWeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQk5kWE5vY205dmJUc2lMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNjbHh1YVcxd2IzSjBJRWgxYldGdUlHWnliMjBnWENJdUwyTm9ZWEpoWTNSbGNuTXZTSFZ0WVc1Y0lqdGNjbHh1YVcxd2IzSjBJRWgxYm5ReElHWnliMjBnWENJdUwyTm9ZWEpoWTNSbGNuTXZTSFZ1ZERGY0lqdGNjbHh1YVcxd2IzSjBJRWgxYm5ReUlHWnliMjBnWENJdUwyTm9ZWEpoWTNSbGNuTXZTSFZ1ZERKY0lqdGNjbHh1YVcxd2IzSjBJRTExYzJoeWIyOXRJR1p5YjIwZ1hDSXVMMk5vWVhKaFkzUmxjbk12VFhWemFISnZiMjFjSWp0Y2NseHVhVzF3YjNKMElFVjJaVzUwUW5WeklHWnliMjBnSnk0dUwzVjBhV3hwZEdsbGN5OWxkbVZ1ZEVKMWN5YzdYSEpjYmx4eVhHNWpiR0Z6Y3lCSFlXMWxRWEpsWVNCN1hISmNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaGpiMjUwWVdsdUxDQndaWEp6YjI1aFoyVXBJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbU52Ym5SaGFXNGdQU0JqYjI1MFlXbHVPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR3hoZVdsdVowZGhiV1VnUFNCMGNuVmxPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaMkZ0WlZOMFlXZGxJRDBnTVR0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1WMlpXNTBRblZ6SUQwZ2JtVjNJRVYyWlc1MFFuVnpLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ0Z3WlhKemIyNWhaMlVwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW9kVzFoYmlBOUlHNWxkeUJJZFcxaGJpaDBhR2x6TG1WMlpXNTBRblZ6S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBhVzFsVkc5VGRHRnlkQ0E5SUc1bGR5QkVZWFJsS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR1Z5YzI5dVlXZGxJRDBnVzNSb2FYTXVhSFZ0WVc1ZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWhwYzNSdmNubFRkR0ZuWlNBOUlGdGRPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WNGNHOXlkRU5vWVhKaFkzUmxja1JoZEdFb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6ZEdGeWRGUnBiV1Z5S0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbFFYSmxZU2dwTzF4eVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCMGFHbHpMbWRsZEVOMWNuSmxiblJRWlhKemIyNWhaMlZCY25KaGVTaHdaWEp6YjI1aFoyVXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1OeVpXRjBaVU5oYm5aaGMwRnlaV0VvS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQm5aWFJEZFhKeVpXNTBVR1Z5YzI5dVlXZGxRWEp5WVhrb2NHVnljMjl1WVdkbEtTQjdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXdaWEp6YjI1aFoyVWdQU0J3WlhKemIyNWhaMlZiZEdocGN5NW5ZVzFsVTNSaFoyVWdMU0F4WFR0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQmpjbVZoZEdWRFlXNTJZWE5CY21WaEtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZWEpqWVdSbFIyRnRaVU52Ym5SaGFXNWxjaUE5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9YQ0pqWVc1MllYTmNJaWs3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVoY21OaFpHVkhZVzFsUTI5dWRHRnBibVZ5TG5ObGRFRjBkSEpwWW5WMFpTaGNJbWxrWENJc0lGd2laMkZ0WlZ3aUtUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtRnlZMkZrWlVkaGJXVkRiMjUwWVdsdVpYSXVhR1ZwWjJoMElEMGdaRzlqZFcxbGJuUXVaRzlqZFcxbGJuUkZiR1Z0Wlc1MExtTnNhV1Z1ZEVobGFXZG9kRHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbUZ5WTJGa1pVZGhiV1ZEYjI1MFlXbHVaWEl1ZDJsa2RHZ2dQU0JrYjJOMWJXVnVkQzVrYjJOMWJXVnVkRVZzWlcxbGJuUXVZMnhwWlc1MFYybGtkR2c3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVrY21GM1EyRnVkbUZ6UVhKbFlTZ3BPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdSeVlYZERZVzUyWVhOQmNtVmhLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JqZEhnZ1BTQjBhR2x6TG1GeVkyRmtaVWRoYldWRGIyNTBZV2x1WlhJdVoyVjBRMjl1ZEdWNGRDZ25NbVFuS1R0Y2NseHVJQ0FnSUNBZ0lDQmpkSGd1WTJ4bFlYSlNaV04wS0RBc0lEQXNJSFJvYVhNdVlYSmpZV1JsUjJGdFpVTnZiblJoYVc1bGNpNTNhV1IwYUN3Z2RHaHBjeTVoY21OaFpHVkhZVzFsUTI5dWRHRnBibVZ5TG1obGFXZG9kQ2s3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVrY21GM1IyRnRaVUp2WVhKa0tHTjBlQ2s3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJRzUxYldKbGNrOW1RMmhoY21GamRHVnljeUE5SUhSb2FYTXVjR1Z5YzI5dVlXZGxMbXhsYm1kMGFEdGNjbHh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUc1MWJXSmxjazltUTJoaGNtRmpkR1Z5Y3pzZ0t5dHBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpISmhkMUJsY25OdmJtRm5aU2hqZEhnc0lIUm9hWE11Y0dWeWMyOXVZV2RsVzJsZEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjI1MFlXbHVMbUZ3Y0dWdVpFTm9hV3hrS0hSb2FYTXVZWEpqWVdSbFIyRnRaVU52Ym5SaGFXNWxjaWs3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1pISmhkMGRoYldWQ2IyRnlaQ2hqZEhncElIdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ1kzUjRNU0E5SUdOMGVEdGNjbHh1SUNBZ0lDQWdJQ0JqZEhneExtSmxaMmx1VUdGMGFDZ3BPMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQmlZV05yWjNKdmRXNWtJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25JMkpoWTJ0bmNtOTFibVFuS1R0Y2NseHVJQ0FnSUNBZ0lDQmpkSGd4TG1SeVlYZEpiV0ZuWlNoaVlXTnJaM0p2ZFc1a0xDQXdMQ0F3TENCMGFHbHpMbUZ5WTJGa1pVZGhiV1ZEYjI1MFlXbHVaWEl1ZDJsa2RHZ3NJSFJvYVhNdVlYSmpZV1JsUjJGdFpVTnZiblJoYVc1bGNpNW9aV2xuYUhRcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR1J5WVhkUVpYSnpiMjVoWjJVb1kzUjRMQ0J3WlhKemIyNWhaMlVwSUh0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnZUNBOUlIQmxjbk52Ym1GblpTNTRPMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQjVJRDBnY0dWeWMyOXVZV2RsTG5rN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUhONElEMGdNRHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdjM2tnUFNBd08xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9jR1Z5YzI5dVlXZGxMbk40SUQ0OUlEQXBJSE40SUQwZ2NHVnljMjl1WVdkbExuTjRPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHdaWEp6YjI1aFoyVXVjM2tnUGowZ01Da2djM2tnUFNCd1pYSnpiMjVoWjJVdWMzazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0J6VjJsa2RHZ3NJSE5JWldsbmFIUXNJSE53Y21sMFpUdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ1UxVkNTa1ZEVkY5VFNWcEZJRDBnY0dWeWMyOXVZV2RsTGxOVlFrcEZRMVJmVTBsYVJTQjhmQ0IwYUdsekxtRnlZMkZrWlVkaGJXVkRiMjUwWVdsdVpYSXVhR1ZwWjJoMElDOGdNVFU3WEhKY2JpQWdJQ0FnSUNBZ2MzZHBkR05vSUNod1pYSnpiMjVoWjJVdWRIbHdaU0I4ZkNCd1pYSnpiMjVoWjJVdWRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aWFIVnRZVzVjSWpwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTjBlQzVpWldkcGJsQmhkR2dvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITlhhV1IwYUNBOUlEWXpMalU3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelNHVnBaMmgwSUQwZ05qZ3VOVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOd2NtbDBaU0E5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9KeU53WlhKemIyNHRhVzFuSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpkSGd1WkhKaGQwbHRZV2RsS0hOd2NtbDBaU3dnYzNnc0lITjVMQ0J6VjJsa2RHZ3NJSE5JWldsbmFIUXNJSGdzSUhrc0lGTlZRa3BGUTFSZlUwbGFSU3dnVTFWQ1NrVkRWRjlUU1ZwRktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpYUhWdWRERmNJanBjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMGVDNWlaV2RwYmxCaGRHZ29LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOWGFXUjBhQ0E5SURRMUxqYzdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6U0dWcFoyaDBJRDBnTkRjdU56VTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Y0hKcGRHVWdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDY2phSFZ1ZEdWeU1TMXBiV2NuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTjBlQzVrY21GM1NXMWhaMlVvYzNCeWFYUmxMQ0J6ZUN3Z2Mza3NJSE5YYVdSMGFDd2djMGhsYVdkb2RDd2dlQ3dnZVN3Z1UxVkNTa1ZEVkY5VFNWcEZMQ0JUVlVKS1JVTlVYMU5KV2tVcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0pvZFc1ME1sd2lPbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNSNExtSmxaMmx1VUdGMGFDZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzFkcFpIUm9JRDBnTVRReUxqTXpPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzBobGFXZG9kQ0E5SURrMUxqYzFPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNCeWFYUmxJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25JMmgxYm5SbGNqSXRhVzFuSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlRWVUpLUlVOVVgxTkpXa1VnUFNCd1pYSnpiMjVoWjJVdVUxVkNTa1ZEVkY5VFNWcEZJSHg4SUhSb2FYTXVZWEpqWVdSbFIyRnRaVU52Ym5SaGFXNWxjaTVvWldsbmFIUWdMeUF4TWp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTjBlQzVrY21GM1NXMWhaMlVvYzNCeWFYUmxMQ0J6ZUN3Z2Mza3NJSE5YYVdSMGFDd2djMGhsYVdkb2RDd2dlQ3dnZVN3Z1UxVkNTa1ZEVkY5VFNWcEZMQ0JUVlVKS1JVTlVYMU5KV2tVcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM1I0TG1GeVl5aDRJQ3NnS0ZOVlFrcEZRMVJmVTBsYVJTQXZJRElwTENCNUlDc2dLRk5WUWtwRlExUmZVMGxhUlNBdklESXBMQ0JUVlVKS1JVTlVYMU5KV2tVZ0tpQXlMalVzSURBc0lFMWhkR2d1VUVrZ0tpQXlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMGVDNXpkSEp2YTJVb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpYlhWemFISnZiMjFjSWpwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTjBlQzVpWldkcGJsQmhkR2dvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITlhhV1IwYUNBOUlEVXdPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzBobGFXZG9kQ0E5SURVd08xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM0J5YVhSbElEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2lnbkkzUnBibmx6YUhKdmIyMXRaVzR0YVcxbkp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZEhndVpISmhkMGx0WVdkbEtITndjbWwwWlN3Z2MzZ3NJSE41TENCelYybGtkR2dzSUhOSVpXbG5hSFFzSUhnc0lIa3NJRk5WUWtwRlExUmZVMGxhUlN3Z1UxVkNTa1ZEVkY5VFNWcEZLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnpkR0Z5ZEZScGJXVnlLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0IwYVcxbGNpQTlJSE5sZEVsdWRHVnlkbUZzS0NncElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjR3hoZVdsdVowZGhiV1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WVdSa1RtVjNTSFZ1ZEdWeUtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FySzNSb2FYTXVaMkZ0WlZOMFlXZGxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLQ0YwYUdsekxtaDFiV0Z1TG1oMWJXRnVUR2xtWlNrZ1kyeGxZWEpKYm5SbGNuWmhiQ2gwYVcxbGNpazdYSEpjYmlBZ0lDQWdJQ0FnZlN3Z05UQXdNQ2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1kzSmxZWFJsUTJoaGNtRmpkR1Z5UkdGMFlVWnZja1Y0Y0c5eWRDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdZWEp5SUQwZ2RHaHBjeTV3WlhKemIyNWhaMlV1YldGd0tDaHdaWEp6YjI1aFoyVXBJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHOWlhaUE5SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZzZJSEJsY25OdmJtRm5aUzU0TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VUb2djR1Z5YzI5dVlXZGxMbmtzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemVEb2djR1Z5YzI5dVlXZGxMbk40TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzazZJSEJsY25OdmJtRm5aUzV6ZVN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUTZJSEJsY25OdmJtRm5aUzUwZVhCbFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ2WW1vN1hISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGeWNqdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JoWkdST1pYZElkVzUwWlhJb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WjJGdFpWTjBZV2RsSUNVZ05TQTlQVDBnTUNrZ2RHaHBjeTV3WlhKemIyNWhaMlV1Y0hWemFDaHVaWGNnU0hWdWRESW9kR2hwY3k1b2RXMWhiaXgwYUdsekxtVjJaVzUwUW5WektTazdYSEpjYmlBZ0lDQWdJQ0FnWld4elpTQjBhR2x6TG5CbGNuTnZibUZuWlM1d2RYTm9LRzVsZHlCSWRXNTBNU2gwYUdsekxtaDFiV0Z1TEhSb2FYTXVaWFpsYm5SQ2RYTXBLVHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1bllXMWxVM1JoWjJVZ0pTQXhNQ0E5UFQwZ01Da2dkR2hwY3k1d1pYSnpiMjVoWjJVdWNIVnphQ2h1WlhjZ1RYVnphSEp2YjIwb2RHaHBjeTVvZFcxaGJpeDBhR2x6TG1WMlpXNTBRblZ6S1NrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdkWEJrWVhSbFFYSmxZU2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnZEdsdFpYSWdQU0J6WlhSSmJuUmxjblpoYkNnb0tTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbWgxYldGdUxtaDFiV0Z1VEdsbVpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlaVzF2ZG1WRVpXRmtRMmhoY21GamRHVnljeWdwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVrY21GM1EyRnVkbUZ6UVhKbFlTZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWphR1ZqYTAxMWMyaHliMjl0VkdsdFpYSW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2doZEdocGN5NW9kVzFoYmk1b2RXMWhia3hwWm1VcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWldGeVNXNTBaWEoyWVd3b2RHbHRaWElwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVuWVcxbFQzWmxjaWdwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZTd2dOVEFwWEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1pYaHdiM0owUTJoaGNtRmpkR1Z5UkdGMFlTZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdkR2x0WlhJZ1BTQnpaWFJKYm5SbGNuWmhiQ2dvS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YUdsemRHOXllVk4wWVdkbExuQjFjMmdvZEdocGN5NWpjbVZoZEdWRGFHRnlZV04wWlhKRVlYUmhSbTl5Ulhod2IzSjBLQ2twTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11YUhWdFlXNHVhSFZ0WVc1TWFXWmxLU0JqYkdWaGNrbHVkR1Z5ZG1Gc0tIUnBiV1Z5S1R0Y2NseHVJQ0FnSUNBZ0lDQjlMQ0F5TURBcFhISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjbVZ0YjNabFJHVmhaRU5vWVhKaFkzUmxjbk1vS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1d1pYSnpiMjVoWjJVZ1BTQjBhR2x6TG5CbGNuTnZibUZuWlM1bWFXeDBaWElvS0dOb1lYSmhZM1JsY2lrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyaGhjbUZqZEdWeUxtUnBaU0E5UFQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ2ZTbGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JqYUdWamEwMTFjMmh5YjI5dFZHbHRaWElvS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVhSFZ0WVc0dWJYVnphSEp2YjIxVWFXMWxjaUErSURBcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzExYzJoeWIyOXRWR2x0WlhJZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0Z3aUkyMTFjMmh5YjI5dFZHbHRaWEpjSWlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hiWFZ6YUhKdmIyMVVhVzFsY2lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiWFZ6YUhKdmIyMVVhVzFsY2lBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvWENKd1hDSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlhWemFISnZiMjFVYVcxbGNpNXpaWFJCZEhSeWFXSjFkR1VvWENKcFpGd2lMQ0JjSW0xMWMyaHliMjl0VkdsdFpYSmNJaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1aWIyUjVMbUZ3Y0dWdVpFTm9hV3hrS0cxMWMyaHliMjl0VkdsdFpYSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHMTFjMmh5YjI5dFZHbHRaWEl1YVc1dVpYSklWRTFNSUQwZ1lOQ1MwWURRdGRDODBZOGcwTFRRdGRDNTBZSFJndEN5MExqUmp5RFFzdEMrMEx2UmlOQzEwTEhRdmRDKzBMUFF2aURRczlHQTBMalFzZEN3T2lBa2UzUm9hWE11YUhWdFlXNHViWFZ6YUhKdmIyMVVhVzFsY24wZzBZSFF0ZEM2MFlQUXZkQzBZRHRjY2x4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JYVnphSEp2YjIxVWFXMWxjaUE5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9YQ0lqYlhWemFISnZiMjFVYVcxbGNsd2lLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0cxMWMyaHliMjl0VkdsdFpYSXBJRzExYzJoeWIyOXRWR2x0WlhJdWNtVnRiM1psS0NrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdkaGJXVlBkbVZ5S0NrZ2UxeHlYRzRnSUNBZ0lDQWdJR3hsZENCamRYSnlaVzUwU1hSbGJTQTlJRzVsZHlCRVlYUmxLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJR1JwWm1abGNtVnVZMlZKYmxScGJXVWdQU0JqZFhKeVpXNTBTWFJsYlNBdElIUm9hWE11ZEdsdFpWUnZVM1JoY25RN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUc5MlpYSlVhVzFsSUQwZ2JtVjNJRVJoZEdVb1pHbG1abVZ5Wlc1alpVbHVWR2x0WlNrN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUcxcGJuVjBaWE1nUFNCdmRtVnlWR2x0WlM1blpYUk5hVzUxZEdWektDazdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElITmxZMjl1WkhNZ1BTQnZkbVZ5VkdsdFpTNW5aWFJUWldOdmJtUnpLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV3YkdGNWFXNW5SMkZ0WlNBOUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNBZ0lITmxkRlJwYldWdmRYUW9kR2hwY3k1M2NtbDBaVVpwYm1sMFpWUnBiV1VvYldsdWRYUmxjeXdnYzJWamIyNWtjeWtzSURFd01DazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnZDNKcGRHVkdhVzVwZEdWVWFXMWxLRzFwYm5WMFpYTXNJSE5sWTI5dVpITXBJSHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdjR3hoZVdWeVRtRnRaU0E5SUhCeWIyMXdkQ2hjSXRDYTBMN1F2ZEMxMFlZZzBMalFzOUdBMFlzdUlOQ1MwTExRdGRDMDBMalJndEMxSU5DUzBMRFJpQ0RRdmRDNDBMcGNJaXdnWENKVmMyVnlYQ0lwSUh4OElGd2lWWE5sY2x3aU8xeHlYRzRnSUNBZ0lDQWdJR3hsZENCb2FYTjBiM0o1VTNSaFoyVWdQU0IwYUdsekxtaHBjM1J2Y25sVGRHRm5aVHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdjR3hoZVdWeUlEMGdXM0JzWVhsbGNrNWhiV1VzSUcxcGJuVjBaWE1zSUhObFkyOXVaSE1zSUdocGMzUnZjbmxUZEdGblpWMDdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnNiMk5oYkZOMGIzSmhaMlZiWENKd2JHRjVaWEp6WENKZEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHZZMkZzVTNSdmNtRm5aVnRjSW5Cc1lYbGxjbk5jSWwwZ1BTQmNJbHdpTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NHeGhlV1Z5YzBGeWNtRjVJRDBnVzNCc1lYbGxjbDA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3h2WTJGc1UzUnZjbUZuWlZ0Y0luQnNZWGxsY25OY0lsMGdQU0JLVTA5T0xuTjBjbWx1WjJsbWVTaHdiR0Y1WlhKelFYSnlZWGtwTzF4eVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQndiR0Y1WlhKelFYSnlZWGtnUFNCS1UwOU9MbkJoY25ObEtHeHZZMkZzVTNSdmNtRm5aVnRjSW5Cc1lYbGxjbk5jSWwwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCd2JHRjVaWEp6UVhKeVlYa3VjSFZ6YUNod2JHRjVaWElwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzYjJOaGJGTjBiM0poWjJWYlhDSndiR0Y1WlhKelhDSmRJRDBnU2xOUFRpNXpkSEpwYm1kcFpua29jR3hoZVdWeWMwRnljbUY1S1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1b1lYTm9JRDBnWUhSb1pVVnVaQ1I3Y0d4aGVXVnlUbUZ0WlgwN0pIdHRhVzUxZEdWeklDc2dYQ0k2WENJZ0t5QnpaV052Ym1SemZXQTdYSEpjYmlBZ0lDQjlYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRWRoYldWQmNtVmhPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNjbHh1YVcxd2IzSjBJRkp2ZFhSbGNpQm1jbTl0SUZ3aUxpNHZkWFJwYkdsMGFXVnpMM0p2ZFhSbGNsd2lPMXh5WEc1cGJYQnZjblFnWVdSa1FXSnZkWFFnWm5KdmJTQmNJaTR2WVdKdmRYUlFZV2RsWENJN1hISmNibWx0Y0c5eWRDQkhZVzFsUVhKbFlTQm1jbTl0SUZ3aUxpOW5ZVzFsUVhKbFlWd2lPMXh5WEc1cGJYQnZjblFnVW1WamIzSmtjeUJtY205dElGd2lMaTl5WldOdmNtUnpYQ0k3WEhKY2JtbHRjRzl5ZENCU1pXTnZjbVJRYkdGNVltRmpheUJtY205dElGd2lMaTl5WldOdmNtUlFiR0Y1WW1GamExd2lPMXh5WEc1cGJYQnZjblFnUlhabGJuUkNkWE1nWm5KdmJTQW5MaTR2ZFhScGJHbDBhV1Z6TDJWMlpXNTBRblZ6Snp0Y2NseHVYSEpjYm14bGRDQmxkbVZ1ZEVKMWN5QTlJRzVsZHlCRmRtVnVkRUoxY3lncE8xeHlYRzVjY2x4dWQybHVaRzkzTG05dWJHOWhaQ0E5SUNncElEMCtJSHRjY2x4dUlDQWdJR3hsZENCeWIzVjBaWElnUFNCdVpYY2dVbTkxZEdWeUtIdGNjbHh1SUNBZ0lDQWdJQ0J5YjNWMFpYTTZJRnQ3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzVoYldVNklDZHBibVJsZUNjc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUcxaGRHTm9PaUJjSWx3aUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrVnVkR1Z5T2lBb0tTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiVzlpYVd4bFEyOXVkSEp2YkhNZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0Z3aUxtMXZZbWxzWlVOdmJuUnliMnh6WENJcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiVzlpYVd4bFEyOXVkSEp2YkhNdWMzUjViR1V1WkdsemNHeGhlU0E5SUZ3aWJtOXVaVndpTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZTeDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWhiV1U2SUNkSFlXMWxKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiV0YwWTJnNklDOUhZVzFsTHl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1Q1pXWnZjbVZGYm5SbGNqb2dLQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdOdmJuUmhhVzVsY2xkcFpIUm9JRDBnWkc5amRXMWxiblF1Wkc5amRXMWxiblJGYkdWdFpXNTBMbU5zYVdWdWRGZHBaSFJvTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR052Ym5SaGFXNWxjbGRwWkhSb0lEd2dNVEF5TkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnRiMkpwYkdWRGIyNTBjbTlzY3lBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvWENJdWJXOWlhV3hsUTI5dWRISnZiSE5jSWlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlc5aWFXeGxRMjl1ZEhKdmJITXVjM1I1YkdVdVpHbHpjR3hoZVNBOUlGd2lZbXh2WTJ0Y0lqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVGYm5SbGNqb2dLQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUcxaGFXNVVaWGgwSUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWhjSWlOdFlXbHVYM1JsZUhSY0lpazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JtRjJJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpaGNJbTVoZGx3aUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFoYVc1VVpYaDBMbk4wZVd4bExtUnBjM0JzWVhrZ1BTQmNJbTV2Ym1WY0lqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVoZGk1emRIbHNaUzVrYVhOd2JHRjVJRDBnWENKdWIyNWxYQ0k3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZMjl1ZEdGcGJrZGhiV1VnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLRndpSTJOdmJuUmhhVzVjSWlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjUwWVdsdVIyRnRaUzV6ZEhsc1pTNWthWE53YkdGNUlEMGdYQ0ppYkc5amExd2lPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHTnZiblJoYVc0Z1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0Z3aUkyTnZiblJoYVc1Y0lpazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1IyRnRaVUZ5WldFb1kyOXVkR0ZwYmlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUc5dVRHVmhkbVU2SUNncElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpiMjUwWVdsdVIyRnRaU0E5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9YQ0lqWTI5dWRHRnBibHdpS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJoYVc1SFlXMWxMbk4wZVd4bExtUnBjM0JzWVhrZ1BTQmNJbTV2Ym1WY0lqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDBzZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbE9pQW5SMkZ0WlU5MlpYSW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRZWFJqYURvZ0wzUm9aVVZ1WkNndUt5a3ZMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia0psWm05eVpVVnVkR1Z5T2lBb0tTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiVzlpYVd4bFEyOXVkSEp2YkhNZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0Z3aUxtMXZZbWxzWlVOdmJuUnliMnh6WENJcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiVzlpYVd4bFEyOXVkSEp2YkhNdWMzUjViR1V1WkdsemNHeGhlU0E5SUZ3aWJtOXVaVndpTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzFoYVc1VVpYaDBJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpaGNJaU50WVdsdVgzUmxlSFJjSWlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZV2x1VkdWNGRDNXpkSGxzWlM1a2FYTndiR0Y1SUQwZ1hDSnViMjVsWENJN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUc5dVJXNTBaWEk2SUNod2JHRjVaWEpVYVcxbEtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjR3hoZVdWeUlEMGdjR3hoZVdWeVZHbHRaUzV6Y0d4cGRDaGNJanRjSWlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWm1sdVlXeFVhVzFsSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2hjSW1neVhDSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1sdVlXeFVhVzFsTG5ObGRFRjBkSEpwWW5WMFpTaGNJbWxrWENJc1hDSm1hVzVoYkZScGJXVmNJaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXNWhiRlJwYldVdWFXNXVaWEpJVkUxTUlEMGdZQ1I3Y0d4aGVXVnlXekJkZlN3ZzBKTFFzTkdJMExVZzBMTFJnTkMxMEx6Ump5RFF1TkN6MFlEUml6b2dKSHR3YkdGNVpYSmJNVjE5WUR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtSnZaSGt1WVhCd1pXNWtRMmhwYkdRb1ptbHVZV3hVYVcxbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdVlYWWdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtGd2libUYyWENJcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibUYyTG5OMGVXeGxMbVJwYzNCc1lYa2dQU0JjSW1Kc2IyTnJYQ0k3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzl1VEdWaGRtVTZJQ2dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbWFXNWhiRlJwYldVZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0Z3aUkyWnBibUZzVkdsdFpWd2lLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJtRnNWR2x0WlM1emRIbHNaUzVrYVhOd2JHRjVJRDBnWENKdWIyNWxYQ0k3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOUxDQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWhiV1U2SUNkU1pXTnZjbVJ6Snl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYldGMFkyZzZJQzlTWldOdmNtUnpMeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVDWldadmNtVkZiblJsY2pvZ0tDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzF2WW1sc1pVTnZiblJ5YjJ4eklEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2loY0lpNXRiMkpwYkdWRGIyNTBjbTlzYzF3aUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzF2WW1sc1pVTnZiblJ5YjJ4ekxuTjBlV3hsTG1ScGMzQnNZWGtnUFNCY0ltNXZibVZjSWp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J0WVdsdVZHVjRkQ0E5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9YQ0lqYldGcGJsOTBaWGgwWENJcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0ZwYmxSbGVIUXVjM1I1YkdVdVpHbHpjR3hoZVNBOUlGd2libTl1WlZ3aU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrVnVkR1Z5T2lBb0tTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkR0ZpYkdWRGIyNTBZV2x1SUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWhjSWlOMFlXSnNaVU52Ym5SaGFXNWNJaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVpYY2dVbVZqYjNKa2N5aDBZV0pzWlVOdmJuUmhhVzRwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J2Ymt4bFlYWmxPaUFvS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtGd2lJM1JoWW14bFEyOXVkR0ZwYmx3aUtTNXBibTVsY2toVVRVd2dQU0JjSWx3aU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmU3dnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbE9pQW5jR3hoZVdKaFkydFZjMlZ5Snl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYldGMFkyZzZJQzl3YkdGNVltRmphMVZ6WlhJOUtDNHJLUzhzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzl1UW1WbWIzSmxSVzUwWlhJNklDZ3BJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J0YjJKcGJHVkRiMjUwY205c2N5QTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb1hDSXViVzlpYVd4bFEyOXVkSEp2YkhOY0lpazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0YjJKcGJHVkRiMjUwY205c2N5NXpkSGxzWlM1a2FYTndiR0Y1SUQwZ1hDSnViMjVsWENJN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYldGcGJsUmxlSFFnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLRndpSTIxaGFXNWZkR1Y0ZEZ3aUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFoYVc1VVpYaDBMbk4wZVd4bExtUnBjM0JzWVhrZ1BTQmNJbTV2Ym1WY0lqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2IyNUZiblJsY2pvZ0tHbHVaR1Y0S1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1VtVmpiM0prVUd4aGVXSmhZMnNvYVc1a1pYZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia3hsWVhabE9pQW9LU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWTI5dWRISnZiSE1nUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLRndpSTJOdmJuUnliMnh6UkdsMlhDSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHTnZiblJoYVc1SFlXMWxJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpaGNJaU53WVhsaVlXTnJSMkZ0WlZ3aUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5SaGFXNUhZVzFsTG5OMGVXeGxMbVJwYzNCc1lYa2dQU0JjSW01dmJtVmNJanRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUnliMnh6TG5KbGJXOTJaU2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZTd2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnVZVzFsT2lBblFYVjBhRzl5Snl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYldGMFkyZzZJQzlCZFhSb2IzSXZMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia0psWm05eVpVVnVkR1Z5T2lBb0tTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiVzlpYVd4bFEyOXVkSEp2YkhNZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0Z3aUxtMXZZbWxzWlVOdmJuUnliMnh6WENJcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiVzlpYVd4bFEyOXVkSEp2YkhNdWMzUjViR1V1WkdsemNHeGhlU0E5SUZ3aWJtOXVaVndpTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzFoYVc1VVpYaDBJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpaGNJaU50WVdsdVgzUmxlSFJjSWlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZV2x1VkdWNGRDNXpkSGxzWlM1a2FYTndiR0Y1SUQwZ1hDSnViMjVsWENJN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUc5dVJXNTBaWEk2SUNncElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmhZbTkxZEVScGRpQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb1hDSWpZV0p2ZFhSRWFYWmNJaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV0ZpYjNWMFJHbDJLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV1JrUVdKdmRYUW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV0p2ZFhSRWFYWXVjM1I1YkdVdVpHbHpjR3hoZVNBOUlGd2lZbXh2WTJ0Y0lqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVNWldGMlpUb2dLQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdGaWIzVjBSR2wySUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWhjSWlOaFltOTFkRVJwZGx3aUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZpYjNWMFJHbDJMbk4wZVd4bExtUnBjM0JzWVhrZ1BTQmNJbTV2Ym1WY0lqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCZFhISmNiaUFnSUNCOUtUdGNjbHh1ZlR0Y2NseHVYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1YyWlc1MFFuVnpPeUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh5WEc1cGJYQnZjblFnUjJGdFpVRnlaV0VnWm5KdmJTQmNJaTR2WjJGdFpVRnlaV0ZjSWp0Y2NseHVYSEpjYm1Oc1lYTnpJRkpsWTI5eVpGQnNZWGxpWVdOcklIdGNjbHh1SUNBZ0lHTnZibk4wY25WamRHOXlLR2x1WkdWNEtTQjdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXdiR0Y1WW1GamEwRnljbUY1SUQwZ1NsTlBUaTV3WVhKelpTaHNiMk5oYkZOMGIzSmhaMlZiWENKd2JHRjVaWEp6WENKZEtWdHBibVJsZUYxYk0xMDdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXdiR0Y1WW1GamEwZGhiV1ZEYjI1MFlXbHVaWElnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLRndpWkdsMlhDSXBPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR3hoZVdKaFkydEhZVzFsUTI5dWRHRnBibVZ5TG5ObGRFRjBkSEpwWW5WMFpTaGNJbWxrWENJc0lGd2ljR0Y1WW1GamEwZGhiV1ZjSWlrN1hISmNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVZbTlrZVM1aGNIQmxibVJEYUdsc1pDaDBhR2x6TG5Cc1lYbGlZV05yUjJGdFpVTnZiblJoYVc1bGNpazdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXdiR0Y1YVc1blIyRnRaU0E5SUhSeWRXVTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXBibWwwVUd4aGVXSmhZMnNvS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnBibWwwVUd4aGVXSmhZMnNvS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1amNtVmhkR1ZEYjI1MGNtOXNjeWdwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WTNKbFlYUmxVR3hoZVdKaFkydEhZVzFsUVhKbFlTZ3BPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbFVHeGhlV0poWTJ0SFlXMWxRWEpsWVNncE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR055WldGMFpVTnZiblJ5YjJ4ektDbDdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElHTnZiblJ5YjJ4eklEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2loY0lpTmpiMjUwY205c2MwUnBkbHdpS1R0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvWTI5dWRISnZiSE1wZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MGNtOXNjeTV6ZEhsc1pTNWthWE53YkdGNUlEMGdYQ0ppYkc5amExd2lPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXVkSEp2YkhORWFYWWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtGd2laR2wyWENJcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52Ym5SeWIyeHpSR2wyTG5ObGRFRjBkSEpwWW5WMFpTaGNJbWxrWENJc0lGd2lZMjl1ZEhKdmJITkVhWFpjSWlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG1KdlpIa3VZWEJ3Wlc1a1EyaHBiR1FvZEdocGN5NWpiMjUwY205c2MwUnBkaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCemNHVmxaRU52Ym5SeWIyeHNaWEpNWVdKbGJDQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb1hDSnNZV0psYkZ3aUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MzQmxaV1JEYjI1MGNtOXNiR1Z5VEdGaVpXd3VhVzV1WlhKVVpYaDBJRDBnWENMUW9OQzEwTFBSZzlDNzBZL1JndEMrMFlBZzBZSFF1dEMrMFlEUXZ0R0IwWUxRdURwY0lqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MzQmxaV1JEYjI1MGNtOXNiR1Z5VEdGaVpXd3VjMlYwUVhSMGNtbGlkWFJsS0Z3aWFXUmNJaXhjSW5Od1pXVmtRMjl1ZEhKdmJHeGxja3hoWW1Wc1hDSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJuUnliMnh6UkdsMkxtRndjR1Z1WkVOb2FXeGtLSE53WldWa1EyOXVkSEp2Ykd4bGNreGhZbVZzS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpjR1ZsWkVOdmJuUnliMnhzWlhJZ1BTQjBhR2x6TG1OeVpXRjBaVkpoYm1kbEtITndaV1ZrUTI5dWRISnZiR3hsY2t4aFltVnNMRndpYzNCbFpXUkRiMjUwY205c2JHVnlYQ0lzTlRBcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk53WldWa1EyOXVkSEp2Ykd4bGNpNXpaWFJCZEhSeWFXSjFkR1VvWENKMllXeDFaVndpTENCY0lqSTFYQ0lwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSmxkMmx1WkVOdmJuUnliMnhzWlhJZ1BTQjBhR2x6TG1OeVpXRjBaVkpoYm1kbEtIUm9hWE11WTI5dWRISnZiSE5FYVhZc1hDSnlaWGRwYm1SRGIyNTBjbTlzYkdWeVhDSXNkR2hwY3k1d2JHRjVZbUZqYTBGeWNtRjVMbXhsYm1kMGFDQXRJREVwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnlaV0YwWlZCc1lYbENkWFIwYjI0b2RHaHBjeTVqYjI1MGNtOXNjMFJwZGlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1ZpYzFSdlEyaGhibWRsUTI5dWRISnZiSE1vS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWTNKbFlYUmxVbUZ1WjJVb1kyOXVkR0ZwYml4cFpDeHRZWGhTWVc1blpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQnlZVzVuWlNBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvWENKcGJuQjFkRndpS1R0Y2NseHVJQ0FnSUNBZ0lDQnlZVzVuWlM1elpYUkJkSFJ5YVdKMWRHVW9YQ0pwWkZ3aUxDQnBaQ2s3WEhKY2JpQWdJQ0FnSUNBZ2NtRnVaMlV1YzJWMFFYUjBjbWxpZFhSbEtGd2lkSGx3WlZ3aUxDQmNJbkpoYm1kbFhDSXBPMXh5WEc0Z0lDQWdJQ0FnSUhKaGJtZGxMbk5sZEVGMGRISnBZblYwWlNoY0luWmhiSFZsWENJc0lGd2lNVndpS1R0Y2NseHVJQ0FnSUNBZ0lDQnlZVzVuWlM1elpYUkJkSFJ5YVdKMWRHVW9YQ0p0YVc1Y0lpd2dYQ0l4WENJcE8xeHlYRzRnSUNBZ0lDQWdJSEpoYm1kbExuTmxkRUYwZEhKcFluVjBaU2hjSW0xaGVGd2lMQ0J0WVhoU1lXNW5aU2s3WEhKY2JpQWdJQ0FnSUNBZ1kyOXVkR0ZwYmk1aGNIQmxibVJEYUdsc1pDaHlZVzVuWlNrN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmhibWRsTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHTnlaV0YwWlZCc1lYbENkWFIwYjI0b0tYdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuQnNZWGxDZFhSMGIyNGdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtGd2lhVzV3ZFhSY0lpazdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXdiR0Y1UW5WMGRHOXVMbk5sZEVGMGRISnBZblYwWlNoY0ltbGtYQ0lzSUZ3aWNHeGhlVUoxZEhSdmJsd2lLVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbkJzWVhsQ2RYUjBiMjR1YzJWMFFYUjBjbWxpZFhSbEtGd2lkSGx3WlZ3aUxDQmNJbUoxZEhSdmJsd2lLVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbkJzWVhsQ2RYUjBiMjR1YzJWMFFYUjBjbWxpZFhSbEtGd2lkbUZzZFdWY0lpd2dYQ0p6ZEc5d1hDSXBPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl1ZEhKdmJITkVhWFl1WVhCd1pXNWtRMmhwYkdRb2RHaHBjeTV3YkdGNVFuVjBkRzl1S1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnpkV0p6Vkc5RGFHRnVaMlZEYjI1MGNtOXNjeWdwZTF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0IzY21Gd2NHVnlRMnhwWTJ0UGJsQnNZWGxDZFhSMGIyNGdQU0IwYUdsekxtTnNhV05yVDI1UWJHRjVRblYwZEc5dUxtSnBibVFvZEdocGN5azdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXdiR0Y1UW5WMGRHOXVJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpaGNJaU53YkdGNVFuVjBkRzl1WENJcE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHeGhlVUoxZEhSdmJpNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtGd2lZMnhwWTJ0Y0lpeDNjbUZ3Y0dWeVEyeHBZMnRQYmxCc1lYbENkWFIwYjI0cE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCc1pYUWdkM0poY0hCbGNrTm9ZVzVuWlZKaGJtZGxJRDBnZEdocGN5NWphR0Z1WjJWU1lXNW5aUzVpYVc1a0tIUm9hWE1wTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WTI5dWRISnZiSE5FYVhZdVlXUmtSWFpsYm5STWFYTjBaVzVsY2loY0ltTm9ZVzVuWlZ3aUxIZHlZWEJ3WlhKRGFHRnVaMlZTWVc1blpTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWTJoaGJtZGxVbUZ1WjJVb1pYWXBlMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQjBZWEpuWlhRZ1BTQmxkaTUwWVhKblpYUTdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIUmhjbWRsZEM1amJHOXpaWE4wS0Z3aUkzSmxkMmx1WkVOdmJuUnliMnhzWlhKY0lpa3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d2JHRjVZbUZqYXk1bllXMWxVM1JoWjJVZ1BTQXJkR0Z5WjJWMExuWmhiSFZsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnNZWGxpWVdOckxtZGxkRU4xY25KbGJuUlFaWEp6YjI1aFoyVkJjbkpoZVNoMGFHbHpMbkJzWVhsaVlXTnJRWEp5WVhrcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJzWVhsaVlXTnJMbVJ5WVhkRFlXNTJZWE5CY21WaEtDazdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoMFlYSm5aWFF1WTJ4dmMyVnpkQ2hjSWlOemNHVmxaRU52Ym5SeWIyeHNaWEpjSWlrZ0ppWWdkR2hwY3k1d2JHRjVZbUZqYTBGeWNtRjVMbXhsYm1kMGFDQXRJREVnSVQwOUlIUm9hWE11Y0d4aGVXSmhZMnN1WjJGdFpWTjBZV2RsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1J2Y0ZCc1lYbGlZV05yUjJGdFpVRnlaV0VvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWUWJHRjVZbUZqYTBkaGJXVkJjbVZoS0NrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdOc2FXTnJUMjVRYkdGNVFuVjBkRzl1S0dWMktYdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2RHRnlaMlYwSUQwZ1pYWXVkR0Z5WjJWME8xeHlYRzRnSUNBZ0lDQWdJR2xtSUNoMFlYSm5aWFF1ZG1Gc2RXVWdQVDA5SUZ3aWMzUnZjRndpS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSaGNtZGxkQzUyWVd4MVpTQTlJRndpY0d4aGVWd2lPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBZWEpuWlhRdWMzUjViR1V1WW1GamEyZHliM1Z1WkZCdmMybDBhVzl1V0NBOUlGd2lNRndpTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTUwYVcxbGNpa2dkR2hwY3k1emRHOXdVR3hoZVdKaFkydEhZVzFsUVhKbFlTZ3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaDBZWEpuWlhRdWRtRnNkV1VnUFQwOUlGd2ljR3hoZVZ3aUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUmhjbWRsZEM1MllXeDFaU0E5SUZ3aWMzUnZjRndpTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwWVhKblpYUXVjM1I1YkdVdVltRmphMmR5YjNWdVpGQnZjMmwwYVc5dVdDQTlJRndpTVRjbFhDSTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NTBhVzFsY2lrZ2RHaHBjeTUxY0dSaGRHVlFiR0Y1WW1GamEwZGhiV1ZCY21WaEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuQnNZWGxpWVdOclFYSnlZWGt1YkdWdVozUm9JQzBnTVNBOVBUMGdkR2hwY3k1d2JHRjVZbUZqYXk1bllXMWxVM1JoWjJVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtVjNhVzVrUTI5dWRISnZiR3hsY2k1MllXeDFaU0E5SURFN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5Cc1lYbGlZV05yTG1kaGJXVlRkR0ZuWlNBOUlERTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1kzSmxZWFJsVUd4aGVXSmhZMnRIWVcxbFFYSmxZU2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5Cc1lYbGlZV05ySUQwZ2JtVjNJRWRoYldWQmNtVmhLSFJvYVhNdWNHeGhlV0poWTJ0SFlXMWxRMjl1ZEdGcGJtVnlMQ0IwYUdsekxuQnNZWGxpWVdOclFYSnlZWGtwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lIVndaR0YwWlZCc1lYbGlZV05yUjJGdFpVRnlaV0VvS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1MGFXMWxjaUE5SUhObGRFbHVkR1Z5ZG1Gc0tDZ3BJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnS3l0MGFHbHpMbkJzWVhsaVlXTnJMbWRoYldWVGRHRm5aVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0N0MGFHbHpMbkpsZDJsdVpFTnZiblJ5YjJ4c1pYSXVkbUZzZFdVZ1BUMDlJSFJvYVhNdWNHeGhlV0poWTJzdVoyRnRaVk4wWVdkbElDMGdNU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5WlhkcGJtUkRiMjUwY205c2JHVnlMblpoYkhWbElEMGdkR2hwY3k1d2JHRjVZbUZqYXk1bllXMWxVM1JoWjJVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdiR0Y1WW1GamF5NW5aWFJEZFhKeVpXNTBVR1Z5YzI5dVlXZGxRWEp5WVhrb2RHaHBjeTV3YkdGNVltRmphMEZ5Y21GNUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3YkdGNVltRmpheTVrY21GM1EyRnVkbUZ6UVhKbFlTZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXdiR0Y1WW1GamEwRnljbUY1TG14bGJtZDBhQ0F0SURFZ1BUMDlJSFJvYVhNdWNHeGhlV0poWTJzdVoyRnRaVk4wWVdkbEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnNZWGxDZFhSMGIyNHVkbUZzZFdVZ1BTQmNJbkJzWVhsY0lqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHeGhlVUoxZEhSdmJpNXpkSGxzWlM1aVlXTnJaM0p2ZFc1a1VHOXphWFJwYjI1WUlEMGdYQ0l3WENJN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMGIzQlFiR0Y1WW1GamEwZGhiV1ZCY21WaEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5TENCMGFHbHpMbk53WldWa1EyOXVkSEp2Ykd4bGNpNTJZV3gxWlNrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjM1J2Y0ZCc1lYbGlZV05yUjJGdFpVRnlaV0VvS1h0Y2NseHVJQ0FnSUNBZ0lDQmpiR1ZoY2tsdWRHVnlkbUZzS0hSb2FYTXVkR2x0WlhJcE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWRHbHRaWElnUFNBd08xeHlYRzRnSUNBZ2ZWeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlNaV052Y21SUWJHRjVZbUZqYXpzaUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2NseHVZMnhoYzNNZ1VtVmpiM0prY3lCN1hISmNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaDBZV0pzWlVOdmJuUmhhVzRwSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5SaFlteGxRMjl1ZEdGcGJpQTlJSFJoWW14bFEyOXVkR0ZwYmp0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1OeVpXRjBaVlJoWW14bFZHVnRjR3hoZEdVb0tUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JqY21WaGRHVlVZV0pzWlZSbGJYQnNZWFJsS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWRHRmliR1VnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLRndpZEdGaWJHVmNJaWs3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTUwWVdKc1pTNXpaWFJCZEhSeWFXSjFkR1VvWENKcFpGd2lMQ0JjSW5KbFkyOXlaSE5jSWlrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1MFlXSnNaUzVwYm01bGNraFVUVXdnUFNCZ1BIUnlQangwYUQ3UW5kQzQwTG9nMExqUXM5R0EwTDdRdXRDd1BDOTBhRDQ4ZEdnKzBKelF1TkM5MFlQUmdqd3ZkR2crUEhSb1B0Q2gwTFhRdXRHRDBMM1F0RHd2ZEdnK1BIUm9QdENTMEw3UmdkQy8wWURRdnRDNDBMZlFzdEMxMFlIUmd0QzRJTkMzMExEUXY5QzQwWUhRc05DOTBMM1JnOUdPSU5DNDBMUFJnTkdEUEM5MGFENDhMM1J5UG1BN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0d4dlkyRnNVM1J2Y21GblpWdGNJbkJzWVhsbGNuTmNJbDBwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdiR0Y1WlhKelFYSnlZWGtnUFNCS1UwOU9MbkJoY25ObEtHeHZZMkZzVTNSdmNtRm5aVnRjSW5Cc1lYbGxjbk5jSWwwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU55WldGMFpWUmhZbXhsS0NrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdOeVpXRjBaVlJoWW14bEtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2RHaHBjeTV3YkdGNVpYSnpRWEp5WVhrdWJHVnVaM1JvT3lBcksya3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhSeUlEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENoY0luUnlYQ0lwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JxSUQwZ01Ec2dhaUE4SUhSb2FYTXVjR3hoZVdWeWMwRnljbUY1VzJsZExteGxibWQwYURzZ0t5dHFLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkR1FnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLRndpZEdSY0lpazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FpQWhQVDBnZEdocGN5NXdiR0Y1WlhKelFYSnlZWGxiYVYwdWJHVnVaM1JvSUMwZ01Ta2dkR1F1YVc1dVpYSlVaWGgwSUQwZ2RHaHBjeTV3YkdGNVpYSnpRWEp5WVhsYmFWMWJhbDA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWW5WMGRHOXVJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDaGNJbUZjSWlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5WMGRHOXVMbk5sZEVGMGRISnBZblYwWlNoY0ltTnNZWE56WENJc0lGd2ljR3hoZVZKbFkyOXlaR1ZrUjJGdFpWd2lLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlkWFIwYjI0dWMyVjBRWFIwY21saWRYUmxLRndpYUhKbFpsd2lMQ0JnSTNCc1lYbGlZV05yVlhObGNqMGtlMmw5WUNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5WMGRHOXVMbWx1Ym1WeVZHVjRkQ0E5SUZ3aVVHeGhlVndpTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJrTG1Gd2NHVnVaRU5vYVd4a0tHSjFkSFJ2YmlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwY2k1aGNIQmxibVJEYUdsc1pDaDBaQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MFlXSnNaUzVoY0hCbGJtUkRhR2xzWkNoMGNpazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11ZEdGaWJHVkRiMjUwWVdsdUxtbHVibVZ5U0ZSTlRDQTlJRndpWENJN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1MFlXSnNaVU52Ym5SaGFXNHVZWEJ3Wlc1a1EyaHBiR1FvZEdocGN5NTBZV0pzWlNrN1hISmNiaUFnSUNCOVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElGSmxZMjl5WkhNN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4eVhHNWpiR0Z6Y3lCRmRtVnVkRUoxY3lCN1hISmNiaUFnSUNCamIyNXpkSEoxWTNSdmNpZ3BlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXViR2x6ZEdWdVpYSnpJRDBnZTMwN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdiMjRvYm1GdFpTd2dZMklwSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG14cGMzUmxibVZ5YzF0dVlXMWxYU0E5SUhSb2FYTXViR2x6ZEdWdVpYSnpXMjVoYldWZElIeDhJRnRkTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YkdsemRHVnVaWEp6VzI1aGJXVmRMbkIxYzJnb1kySXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhSeWFXZG5aWElvYm1GdFpTd2dMaTR1WkdGMFlTa2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG14cGMzUmxibVZ5YzF0dVlXMWxYU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxteHBjM1JsYm1WeWMxdHVZVzFsWFM1bWIzSkZZV05vS0dOaUlEMCtJR05pS0M0dUxtUmhkR0VwS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnYjJabUtHNWhiV1VzSUdOaUtTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmpZaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVWdkR2hwY3k1c2FYTjBaVzVsY25OYmJtRnRaVjA3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXNhWE4wWlc1bGNuTmJibUZ0WlYwZ1BTQjBhR2x6TG14cGMzUmxibVZ5YzF0dVlXMWxYUzVtYVd4MFpYSW9LR0Z5Y21GNVEyRnNiR0poWTJzcElEMCtJQ0VvWTJJZ1BUMDlJR0Z5Y21GNVEyRnNiR0poWTJzcEtWeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCdmJtTmxLRzVoYldVc0lHTmlLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV2YmlodVlXMWxMQ0J2Ym1ObFQyWm1LVHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdjMlZzWmlBOUlIUm9hWE03WEhKY2JseHlYRzRnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJRzl1WTJWUFptWW9MaTR1WkdGMFlTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZaWd1TGk1a1lYUmhLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElITmxiR1l1YkdsemRHVnVaWEp6VzI1aGJXVmRPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHUmxabUYxYkhRZ1JYWmxiblJDZFhNN1hISmNiaUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNjbHh1WTJ4aGMzTWdVbTkxZEdWeUlIdGNjbHh1SUNBZ0lHTnZibk4wY25WamRHOXlLRzl3ZEdsdmJuTWdQU0JiWFNrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtOTFkR1Z6SUQwZ2IzQjBhVzl1Y3k1eWIzVjBaWE03WEhKY2JpQWdJQ0FnSUNBZ2QybHVaRzkzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvWENKb1lYTm9ZMmhoYm1kbFhDSXNJQ2dwSUQwK0lIUm9hWE11YUdGemFFTm9aV05yS0hkcGJtUnZkeTVzYjJOaGRHbHZiaTVvWVhOb0tTazdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NW9ZWE5vUTJobFkyc29kMmx1Wkc5M0xteHZZMkYwYVc5dUxtaGhjMmdwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnWm1sdVpFNWxkMUp2ZFhSbEtHaGhjMmdwSUh0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnY205MWRHVTdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElITmxiR1lnUFNCMGFHbHpPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1eWIzVjBaWE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHaHBjeTV5YjNWMFpYTXViR1Z1WjNSb0lEMDlQU0F4S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtWnBibVJTYjNWMFpTaG9ZWE5vTENCMGFHbHpMbkp2ZFhSbGMxc3dYU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXliM1YwWlhNdVptOXlSV0ZqYUNnb2NtOTFkR1ZKZEdWdEtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMlZzWmk1bWFXNWtVbTkxZEdVb2FHRnphQ3dnY205MWRHVkpkR1Z0S1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5YjNWMFpTQTlJSEp2ZFhSbFNYUmxiVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5YjNWMFpUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JtYVc1a1VtOTFkR1VvYUdGemFDd2dhWFJsYlNsN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJwZEdWdExtMWhkR05vSUQwOVBTQW5jM1J5YVc1bkp5QW1KaUJvWVhOb0lEMDlQU0JwZEdWdExtMWhkR05vSUh4OFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVnZaaUJwZEdWdExtMWhkR05vSUQwOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUdsMFpXMHViV0YwWTJnb2FHRnphQ2tnZkh4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVhSbGJTNXRZWFJqYUNCcGJuTjBZVzVqWlc5bUlGSmxaMFY0Y0NBbUppQm9ZWE5vTG0xaGRHTm9LR2wwWlcwdWJXRjBZMmdwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJwZEdWdE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCb1lYTm9RMmhsWTJzb2FHRnphQ2w3WEhKY2JpQWdJQ0FnSUNBZ2FHRnphQ0E5SUdoaGMyZ3VjMnhwWTJVb01TazdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElIQnlaVkp2ZFhSbElEMGdkR2hwY3k1aFkzUnBkbVZTYjNWMFpUdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2JtVjNVbTkxZEdVZ1BTQjBhR2x6TG1acGJtUk9aWGRTYjNWMFpTaG9ZWE5vS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnVaWGRTYjNWMFpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdibVYzVW05MWRHVXViV0YwWTJnZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtOTFkR1ZRWVhKaGJYTWdQU0J1WlhkU2IzVjBaUzV0WVhSamFEdGNjbHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0c1bGQxSnZkWFJsTG0xaGRHTm9JR2x1YzNSaGJtTmxiMllnVW1WblJYaHdLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtOTFkR1ZRWVhKaGJYTWdQU0JvWVhOb0xtMWhkR05vS0c1bGQxSnZkWFJsTG0xaGRHTm9LVnN4WFR0Y2NseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQnVaWGRTYjNWMFpTNXRZWFJqYUNBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSnZkWFJsVUdGeVlXMXpJRDBnYm1WM1VtOTFkR1V1YldGMFkyZ29hR0Z6YUNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQlFjbTl0YVhObExuSmxjMjlzZG1Vb0tWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdWRHaGxiaWdvS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NISmxVbTkxZEdVZ0ppWWdjSEpsVW05MWRHVXViMjVNWldGMlpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0hKbFVtOTFkR1ZRWVhKaGJYTWdQeUJ3Y21WU2IzVjBaUzV2Ymt4bFlYWmxLSFJvYVhNdWNISmxVbTkxZEdWUVlYSmhiWE1wSURvZ2NISmxVbTkxZEdVdWIyNU1aV0YyWlNncFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDNTBhR1Z1S0NncElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHVaWGRTYjNWMFpTQW1KaUJ1WlhkU2IzVjBaUzV2YmtKbFptOXlaVVZ1ZEdWeUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5YjNWMFpWQmhjbUZ0Y3lBL0lHNWxkMUp2ZFhSbExtOXVRbVZtYjNKbFJXNTBaWElvZEdocGN5NXliM1YwWlZCaGNtRnRjeWtnT2lCdVpYZFNiM1YwWlM1dmJrSmxabTl5WlVWdWRHVnlLQ2xjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTG5Sb1pXNG9LQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c1bGQxSnZkWFJsSUNZbUlHNWxkMUp2ZFhSbExtOXVSVzUwWlhJcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkp2ZFhSbFVHRnlZVzF6SUQ4Z2JtVjNVbTkxZEdVdWIyNUZiblJsY2loMGFHbHpMbkp2ZFhSbFVHRnlZVzF6S1NBNklHNWxkMUp2ZFhSbExtOXVSVzUwWlhJb0tWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXVkR2hsYmlnb0tTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUZqZEdsMlpWSnZkWFJsSUQwZ2JtVjNVbTkxZEdVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CeVpWSnZkWFJsVUdGeVlXMXpJRDBnZEdocGN5NXliM1YwWlZCaGNtRnRjenRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2xjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMbU5oZEdOb0tDaGxjbkp2Y2lrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb1pYSnliM0lwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgxY2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHUmxabUYxYkhRZ1VtOTFkR1Z5T3lKZGZRPT1cbiJdfQ==
